{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1572578209369},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1572578209369},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1572578209369},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1572578209372},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1572578209372},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1572578209373},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1572578209373},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1572578209373},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1572578209374},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1572578209374},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1572578209374},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1572578209378},{"_id":"themes/next/_config.yml","hash":"abbe3dd83218e7a4df8586bac8370dc45b610f60","modified":1572666509706},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1572578209380},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1572578209380},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1572578209457},{"_id":"source/404/index.md","hash":"4c488209ee9b73e6396e26b56c3f6da7df81f952","modified":1572597809345},{"_id":"source/_posts/404-1.md","hash":"15081c6f6bb5b24df419a05c772b63b9defa010b","modified":1572597829907},{"_id":"source/_posts/404.md","hash":"659c7e826d2323cc35f374c261c7b8018a7af637","modified":1572597815516},{"_id":"source/_posts/Sublime-Operate.md","hash":"7935649315310f90079d74938b31f61286fd6f8f","modified":1572659767927},{"_id":"source/_posts/git.md","hash":"20cea037ece007c256d7a1f36d7f9ef4aa29abad","modified":1572659753027},{"_id":"source/about/index.md","hash":"7f9dae4b467960f9cee23d7ea33d128f508f841f","modified":1572591081245},{"_id":"source/categories/index.md","hash":"def0604d4b6f41731485658f5ad94cf514883fde","modified":1572588419699},{"_id":"source/tags/index.md","hash":"f15433fde46151bcc9fb366dab263fb92dc1dac6","modified":1572588028247},{"_id":"themes/next/.git/FETCH_HEAD","hash":"d5932b39c178826b7db21fb111fe59f356b4e644","modified":1572597704736},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1572578209313},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1572578209336},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1572578183714},{"_id":"themes/next/.git/index","hash":"ae8960c32e96943ffc6e847625e220e4f785d763","modified":1572578209739},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1572578209299},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1572578209370},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1572578209370},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1572578209371},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1572578209371},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1572578209382},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1572578209382},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1572578209383},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1572578209384},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1572578209385},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1572578209388},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1572578209389},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1572578209390},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1572578209390},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1572578209391},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1572578209391},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1572578209391},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1572578209392},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ec90e47786cf6a9b4c754bdcc2bb3f108563ca6a","modified":1572589796875},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1572578209394},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1572578209395},{"_id":"themes/next/layout/_layout.swig","hash":"a6e11c8bd8e97df79591fe359e690d82374afa05","modified":1572600747689},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1572578209453},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1572578209454},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1572578209454},{"_id":"themes/next/layout/page.swig","hash":"4f2d674ea7b17d59499a5e5fe698d107c55ebb68","modified":1572656498364},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1572578209455},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1572578209456},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1572578209456},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1572578209458},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1572578209460},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1572578209736},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1572578209737},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1572578209738},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572578209608},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1572578183715},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1572578183716},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1572578183716},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1572578183717},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1572578183717},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1572578183718},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1572578183718},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1572578183719},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1572578183719},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1572578183720},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1572578183720},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1572578183721},{"_id":"themes/next/.git/logs/HEAD","hash":"67f19ceb3887024809d7edfda0977ba2ee4942d4","modified":1572578209320},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1572578209397},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1572578209397},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"81d1b895982f78a9f09547c757513a93b2d9c536","modified":1572590652740},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1572578209399},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1572578209399},{"_id":"themes/next/layout/_macro/post.swig","hash":"756d97df4de5b0c08f98f401e24f624cab264dfb","modified":1572664773432},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1572578209401},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1572578209401},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1572578209402},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1572578209403},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d6fbd1ddf27b60ba5f4356d0776b1dfd8f546ea3","modified":1572665175106},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1572578209403},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1572578209405},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1572578209405},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1572578209407},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1572578209407},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1572578209415},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1572578209416},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1572578209422},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1572578209441},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1572578209442},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1572578209442},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1572578209444},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1572578209445},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1572578209445},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1572578209446},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1572578209461},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1572578209462},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1572578209462},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1572578209463},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1572578209464},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1572578209464},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1572578209465},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1572578209465},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1572578209465},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1572578209607},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1572578209609},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1572578209610},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1572578209611},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1572578209612},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1572578209613},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1572578209613},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1572578209614},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1572578209615},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1572578209615},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1572578209616},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1572578209616},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1572578209617},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1572578209618},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1572578209618},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1572578209619},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1572578209619},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1572578209620},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1572578209621},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572578209420},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572578209420},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572578209579},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572578209580},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572578209582},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572578209603},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572578209606},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1572578209319},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1572578209404},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1572578209404},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1572578209410},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1572578209410},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1572578209411},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1572578209412},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1572578209413},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1572578209413},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1572578209414},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1572578209417},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1572578209419},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1572578209421},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1572578209423},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1572578209424},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1572578209425},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"9eeeee5afd01f27fbb5c64df445c68faf77016d5","modified":1572665313866},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1572578209426},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1572578209428},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1572578209429},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1572578209429},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1572578209430},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1572578209431},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1572578209432},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1572578209433},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1572578209434},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1572578209435},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1572578209436},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1572578209436},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1572578209437},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1572578209437},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1572578209438},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1572578209439},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1572578209440},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1572578209440},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1572578209450},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1572578209451},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1572578209451},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1572578209452},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a1d3ad9bc25a49808b5ac139a78abc7159180e82","modified":1572674054112},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1572578209578},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1572578209581},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1572578209581},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1572578209602},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1572578209602},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1572578209603},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1ef80ab79eac471304fea91bf03fdfab0f13be3","modified":1572666779024},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1572578209622},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1572578209623},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1572578209624},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1572578209624},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1572578209625},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1572578209628},{"_id":"themes/next/source/js/src/love.js","hash":"c518a6536a87f5dd8d9b41613d4b3f5f3065e4c4","modified":1572594156022},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1572578209630},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1572578209631},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1572578209633},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1572578209633},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1572578209634},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1572578209648},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1572578209653},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1572578209654},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1572578209655},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1572578209656},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1572578209671},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1572578209672},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1572578209672},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1572578209672},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1572578209677},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1572578209677},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1572578209677},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1572578209678},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1572578209678},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1572578209696},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1572578209699},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1572578209700},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1572578209701},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1572578209701},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1572578209702},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1572578209703},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1572578209704},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1572578209705},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1572578209705},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1572578209707},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1572578209707},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1572578209708},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1572578209710},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1572578209711},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1572578209712},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1572578209712},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1572578209714},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1572578209713},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1572578209714},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1572578209715},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1572578209716},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1572578209716},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1572578209717},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1572578209718},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1572578209720},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1572578209720},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1572578209730},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1572578209731},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1572578209733},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1572578209734},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1572578209735},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1572578209697},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"67f19ceb3887024809d7edfda0977ba2ee4942d4","modified":1572578209322},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1572578209311},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1572578209449},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1572578209450},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1572578209468},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1572578209469},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1572578209470},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1572578209471},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1572578209471},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1572578209486},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1572578209549},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1572578209566},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1572578209568},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1572578209568},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1572578209569},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1572578209570},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1572578209570},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1572578209571},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1572578209584},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1572578209585},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1572578209585},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1572578209586},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1572578209586},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1572578209587},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1572578209588},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1572578209588},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1572578209591},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1572578209593},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1572578209593},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1572578209594},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1572578209595},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1572578209597},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1572578209598},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1572578209599},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1572578209600},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1572578209600},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1572578209601},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1572578209632},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1572578209645},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1572578209647},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572578209657},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572578209657},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572578209658},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572578209660},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572578209661},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572578209662},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1572578209669},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1572578209670},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1572578209670},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1572578209673},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1572578209674},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1572578209680},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1572578209681},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1572578209681},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1572578209727},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1572578209729},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1572578209643},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1572578209645},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572578209693},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572578209694},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1572578209732},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"67f19ceb3887024809d7edfda0977ba2ee4942d4","modified":1572578209311},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1572578209472},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1572578209473},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1572578209473},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1572578209474},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1572578209474},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1572578209477},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1572578209480},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1572578209480},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1572578209481},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1572578209482},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1572578209483},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1572578209484},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1572578209484},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1572578209485},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1572578209487},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1572578209488},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1572578209488},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1572578209489},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1572578209490},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1572578209490},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1572578209491},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1572578209492},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1572578209492},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1572578209514},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1572578209518},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1572578209520},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1572578209523},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1572578209526},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1572578209532},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1572578209535},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1572578209537},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1572578209538},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1572578209540},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1572578209541},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1572578209548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1572578209548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1572578209548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1572578209549},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1572578209549},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1572578209551},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1572578209552},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1572578209553},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1572578209553},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1572578209554},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1572578209555},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1572578209555},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1572578209555},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1572578209556},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1572578209556},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1572578209557},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1572578209558},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1572578209561},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1572578209562},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1572578209562},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1572578209563},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1572578209563},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1572578209564},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1572578209565},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1572578209589},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1572578209590},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1572578209596},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1572578209638},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1572578209639},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1572578209640},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1572578209641},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1572578209642},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572578209663},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1572578209664},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1572578209665},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1572578209666},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1572578209667},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1572578209668},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572578209684},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572578209691},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572578209686},{"_id":"themes/next/.git/objects/pack/pack-9a1704e3d6ebeef0700e6750a36d60c3d044653d.idx","hash":"06b30e2f3dd6d63843a2db5dd8e64720ae3fa5b2","modified":1572578208982},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1572578209650},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1572578209724},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1572578209689},{"_id":"themes/next/.git/objects/pack/pack-9a1704e3d6ebeef0700e6750a36d60c3d044653d.pack","hash":"121cc3119eced880061564577954df0bb51f2e31","modified":1572578208974},{"_id":"source/_posts/sublime.md","hash":"8754e66c3b66e44da1291982339a72b294fb27b0","modified":1572659782659},{"_id":"public/content.json","hash":"c22a0022d3290f05c6a09ee0d978a644538f0396","modified":1572667028689},{"_id":"public/search.xml","hash":"dbcaf0556ffc2b92b4b4250401444ae540543d90","modified":1572667028689},{"_id":"public/about/index.html","hash":"69542a2757b469ccaeb9b350c5574d647e4cea99","modified":1572667028689},{"_id":"public/categories/index.html","hash":"1c04b6d14c443a9b82abd1f8670359a9af0132f4","modified":1572667028689},{"_id":"public/tags/index.html","hash":"603c1922ce8ed26bb61dfcb6b12c1ffc3e3804df","modified":1572667028689},{"_id":"public/2019/11/01/sublime/index.html","hash":"aacdf972c05274147966646b895d9eb6a8badacc","modified":1572667028689},{"_id":"public/2019/11/01/git/index.html","hash":"4791be0809715a70fecdbcfaa31e1d862c57e2dc","modified":1572667028689},{"_id":"public/2019/11/01/Sublime-Operate/index.html","hash":"6bd7a5e255138391d1400d06e070c8e9e3429e07","modified":1572667028689},{"_id":"public/archives/index.html","hash":"4c3bc15ee1898d1e2ba909c717c9aa3655211798","modified":1572667028689},{"_id":"public/archives/2019/index.html","hash":"418e80ec0da8fa0b836fc4f1acfe091fca8c87d5","modified":1572667028689},{"_id":"public/archives/2019/11/index.html","hash":"2a514e516e0d108512335cc2c7b31637fdbdf658","modified":1572667028689},{"_id":"public/index.html","hash":"fe0dc6b6fc4866dce6416f8de27a76a3ade9d386","modified":1572667028689},{"_id":"public/categories/Operate/index.html","hash":"fab811e8d7c0b8d618808af2af880904cb90e759","modified":1572667028689},{"_id":"public/tags/cmd/index.html","hash":"32083a7538ff4bed8534b3a38c5dad7b6025fd8d","modified":1572667028689},{"_id":"public/tags/git/index.html","hash":"f6a1b7f13d8a069d99f19a87bd14ff90eea3170a","modified":1572667028689},{"_id":"source/_posts/NodeJS.md","hash":"dda4b6349ecf1854fc2be706a3607b47d8d4a9b3","modified":1572658485616},{"_id":"themes/next/layout/_macro/post copy.swig","hash":"5740abcc4aec70ffdbf1a23632ef016332fc5b5c","modified":1572661560163},{"_id":"public/2019/11/02/NodeJS/index.html","hash":"29a42dc4edc33d77f56444fba9b5554af49723d3","modified":1572667028689},{"_id":"public/categories/Server/index.html","hash":"47db838811f2fa57153470f9aba0c7d8ce5f64b2","modified":1572667028689},{"_id":"public/tags/NodeJS/index.html","hash":"5474aeb779de1d742d2565e519e4536385ebf488","modified":1572667028689}],"Category":[{"name":"Operate","_id":"ck2fw5cgg00062cq129chau1k"},{"name":"Server","_id":"ck2guvu4g0001swq182uz6j1c"}],"Data":[],"Page":[{"title":"about","date":"2019-11-01T06:51:04.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-11-01 14:51:04\n---\n","updated":"2019-11-01T06:51:21.245Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck2fw5cg000022cq17nfk7nc8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2019-11-01T03:46:28.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-11-01 11:46:28\ntype: \"categories\"\n---\n","updated":"2019-11-01T06:06:59.699Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck2fw5cgc00042cq1ax3y9wr6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-11-01T03:58:53.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-11-01 11:58:53\ntype: \"tags\"\n---\n","updated":"2019-11-01T06:00:28.247Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck2fw5cpu000b2cq14ht3f0do","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"dos","title":"Sublime_Operate","date":"2019-11-01T02:37:12.000Z","_content":"## Dos 常用命令\n\n\n\n### CMD操作类\n\n```shell\n\n# 切盘\n$ D:\n\n# 删除文件\n$ del\n\n# 退出dos\n$ exit\n\n# 清空命令行\n$ cls\n\n# &&   同时执行两个操作 用 && 衔接\n```\n<!-- more -->\n\n\n### 目录操作类\n\n```shell\n\n#显示目录\n$ dir   ## 详细\n\n#创建目录\n$ md 目录名\n\n#删除目录\n$ rd 目录名\n$ rd /s/q 目录名   ## 强制删除文件文件夹和文件夹内所有文件\n\n#进入指定目录\n$ cd 目录名\n\n#树形图显示目录结构\n$ tree\n\n```\n\n\n\n### 文件操作类\n\n```shell\n\n# 重名名文件\n$ ren\n\n######\t进阶操作  ==>  批量重命名(指定字符串替换)\n$ ren *.html *.php\n\n# 替换文件\n$ replace\n\n# 删除文件\n$ replace\n$ del 文件名\n\n# 创建文件\n$ echo on > a.txt\n\n\n\n# 向文件添加内容 （覆盖）\n$ echo 内容 > a.txt\n\n# 向文件添加内容 （向后追加）\n$ echo 追加 >> a.txt\n\n```\n\n\n\n\n\n### 服务操作类\n\n```shell\n\n# 查询服务\n$ sc query MySQL\n\n# 启动服务\n$ net start MySQL\n\t\t\n# 停止服务\n$ net stop MySQL\n\t\t\n# 删除服务\n$ sc delete MySQL\n\n# 查询端口情况\n$ netstat -ano\n\n```\n\n\n\n## Linux \n\nGit Bash / Cmder 可以模拟Linux环境，在Windows操作\n\n```bash\n\n# 清屏\nclear\n\n# 显示文件夹列表 （显示不隐藏的文件与文件夹） \nls\nls -a  # (显示当前目录下的所有文件及文件夹包括隐藏的.和..等)\n\n# 显示工作目录 \npwd\n\n# 删除一个文件或者目录\nrm 文件名\n# 删除非空目录，以及一些比较顽固的文件或者目录\nrm -rf 目录名\n\n# 创建目录\ntouch 文件名\n\n# 查看文件（完整输出）\ncat 文件名\n# 向文件添加内容 （覆盖）\ncat > a.txt （回车后 添加内容）\n# 向文件添加内容 （向后追加）\ncat >> a.txt （回车后 添加内容）\n\n# 查看文件（分页输出）-- 适用于查看大文本文件\nless 文件名 \t\t# b 向上翻一页    空格 向下翻一页    鼠标滚轮翻页\n\n# visual interface 编辑文本\nvi 文件名\t\t# 进去vi编辑模式\nEsc         # 退出到命令模式\ni \t\t\t\t\t# 进入插入模式\n:q \t\t\t\t\t# 退出vi\n:w \t\t\t\t\t# 保存编辑\n:wq \t\t\t\t# 保存并退出\n:q! \t\t\t\t# 强制退出不保存修改\n\n```\n\n\n\n## Window\n\n```shell\n\nsysdm.cpl  cmd 开启服务\n\n# 显示桌面\t\t\t==>   win + D\n\n# 最小化所有窗口\t  ==>   win + M\n\n# 最小化除当前窗口以外所有窗口\t==>   win + HOME\n\n# 打开资源管理器\t  ==>   win + E\n\n# 打开设置\t        ==>   win + I\n\n# 截图\t\t\t ==>   win + PrintScreen\n\n# 放大缩小视口\t  ==>   WIN + +/-\n\n# 切换输入法    \t   ==>   WIN + space\n\n# 自定义截图\t\t   ==>   WIN + SHFIT +S\n```\n\n```\nwin + Ctrl + D       新建桌面\nwin + Ctrl + 方向键   切换桌面\nwin + tab\t\t\t\t\t\t 列表\n```\n\n\n\n## Sublime\n\n```shell\n# 命令行 用 sublime 打开当前目录 .表示当前目录\nsubl .\n\n# 命令行 用 vscode 打开当前目录\ncode .\n\n# 删除整行  \t\t==>    CTRL + SHIFT + K \n\n# 括号内部选中  \t   ==>    CTRL + SHIFT + M\n\n# 直接跳下一行  \t   ==>    CTRL + ENTER\n\n# 直接跳上一行  \t   ==>    CTRL + SHIFT + ENTER\n\n# 查找选择器\t\t    ==>\t   CTRL + R\n\n# 替换同一个目录下所有文件公共部分\n# ==>侧边栏目录下子文件右键选项   Find Advanced  >  In Parent Folder \n\n# 打开所在目录\t\t==>    右击文件选  Reveal\n\n```\n\n\n\n## Browser\n\n### Chrome\n\n```shell\n\n# console 命令行截图    ==>     Capture node screenshot\n\n```\n\n### 搜索栏技巧\n\n```shell\n# 搜索关键词如有空格，可用  \"\"  包含，视为一个词\n\n# 搜索限定\n\n$ 关键词 + site:cnblogs.com\n\n# 限定在 cnblogs.com 搜索\n\n```\n\n\n\n## 右键菜单分栏设置地址\n\n> \n>\n> HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\CommandStore\\shell\\\n\n\n\n\n\n","source":"_posts/Sublime-Operate.md","raw":"---\nlayout: dos\ntitle: Sublime_Operate\ndate: 2019-11-01 10:37:12\ncategories:\n- Operate\ntags:\n- cmd\n---\n## Dos 常用命令\n\n\n\n### CMD操作类\n\n```shell\n\n# 切盘\n$ D:\n\n# 删除文件\n$ del\n\n# 退出dos\n$ exit\n\n# 清空命令行\n$ cls\n\n# &&   同时执行两个操作 用 && 衔接\n```\n<!-- more -->\n\n\n### 目录操作类\n\n```shell\n\n#显示目录\n$ dir   ## 详细\n\n#创建目录\n$ md 目录名\n\n#删除目录\n$ rd 目录名\n$ rd /s/q 目录名   ## 强制删除文件文件夹和文件夹内所有文件\n\n#进入指定目录\n$ cd 目录名\n\n#树形图显示目录结构\n$ tree\n\n```\n\n\n\n### 文件操作类\n\n```shell\n\n# 重名名文件\n$ ren\n\n######\t进阶操作  ==>  批量重命名(指定字符串替换)\n$ ren *.html *.php\n\n# 替换文件\n$ replace\n\n# 删除文件\n$ replace\n$ del 文件名\n\n# 创建文件\n$ echo on > a.txt\n\n\n\n# 向文件添加内容 （覆盖）\n$ echo 内容 > a.txt\n\n# 向文件添加内容 （向后追加）\n$ echo 追加 >> a.txt\n\n```\n\n\n\n\n\n### 服务操作类\n\n```shell\n\n# 查询服务\n$ sc query MySQL\n\n# 启动服务\n$ net start MySQL\n\t\t\n# 停止服务\n$ net stop MySQL\n\t\t\n# 删除服务\n$ sc delete MySQL\n\n# 查询端口情况\n$ netstat -ano\n\n```\n\n\n\n## Linux \n\nGit Bash / Cmder 可以模拟Linux环境，在Windows操作\n\n```bash\n\n# 清屏\nclear\n\n# 显示文件夹列表 （显示不隐藏的文件与文件夹） \nls\nls -a  # (显示当前目录下的所有文件及文件夹包括隐藏的.和..等)\n\n# 显示工作目录 \npwd\n\n# 删除一个文件或者目录\nrm 文件名\n# 删除非空目录，以及一些比较顽固的文件或者目录\nrm -rf 目录名\n\n# 创建目录\ntouch 文件名\n\n# 查看文件（完整输出）\ncat 文件名\n# 向文件添加内容 （覆盖）\ncat > a.txt （回车后 添加内容）\n# 向文件添加内容 （向后追加）\ncat >> a.txt （回车后 添加内容）\n\n# 查看文件（分页输出）-- 适用于查看大文本文件\nless 文件名 \t\t# b 向上翻一页    空格 向下翻一页    鼠标滚轮翻页\n\n# visual interface 编辑文本\nvi 文件名\t\t# 进去vi编辑模式\nEsc         # 退出到命令模式\ni \t\t\t\t\t# 进入插入模式\n:q \t\t\t\t\t# 退出vi\n:w \t\t\t\t\t# 保存编辑\n:wq \t\t\t\t# 保存并退出\n:q! \t\t\t\t# 强制退出不保存修改\n\n```\n\n\n\n## Window\n\n```shell\n\nsysdm.cpl  cmd 开启服务\n\n# 显示桌面\t\t\t==>   win + D\n\n# 最小化所有窗口\t  ==>   win + M\n\n# 最小化除当前窗口以外所有窗口\t==>   win + HOME\n\n# 打开资源管理器\t  ==>   win + E\n\n# 打开设置\t        ==>   win + I\n\n# 截图\t\t\t ==>   win + PrintScreen\n\n# 放大缩小视口\t  ==>   WIN + +/-\n\n# 切换输入法    \t   ==>   WIN + space\n\n# 自定义截图\t\t   ==>   WIN + SHFIT +S\n```\n\n```\nwin + Ctrl + D       新建桌面\nwin + Ctrl + 方向键   切换桌面\nwin + tab\t\t\t\t\t\t 列表\n```\n\n\n\n## Sublime\n\n```shell\n# 命令行 用 sublime 打开当前目录 .表示当前目录\nsubl .\n\n# 命令行 用 vscode 打开当前目录\ncode .\n\n# 删除整行  \t\t==>    CTRL + SHIFT + K \n\n# 括号内部选中  \t   ==>    CTRL + SHIFT + M\n\n# 直接跳下一行  \t   ==>    CTRL + ENTER\n\n# 直接跳上一行  \t   ==>    CTRL + SHIFT + ENTER\n\n# 查找选择器\t\t    ==>\t   CTRL + R\n\n# 替换同一个目录下所有文件公共部分\n# ==>侧边栏目录下子文件右键选项   Find Advanced  >  In Parent Folder \n\n# 打开所在目录\t\t==>    右击文件选  Reveal\n\n```\n\n\n\n## Browser\n\n### Chrome\n\n```shell\n\n# console 命令行截图    ==>     Capture node screenshot\n\n```\n\n### 搜索栏技巧\n\n```shell\n# 搜索关键词如有空格，可用  \"\"  包含，视为一个词\n\n# 搜索限定\n\n$ 关键词 + site:cnblogs.com\n\n# 限定在 cnblogs.com 搜索\n\n```\n\n\n\n## 右键菜单分栏设置地址\n\n> \n>\n> HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\CommandStore\\shell\\\n\n\n\n\n\n","slug":"Sublime-Operate","published":1,"updated":"2019-11-02T01:56:07.927Z","_id":"ck2fw5cgd00052cq16fnpdj43","comments":1,"photos":[],"link":"","content":"<h2 id=\"Dos-常用命令\"><a href=\"#Dos-常用命令\" class=\"headerlink\" title=\"Dos 常用命令\"></a>Dos 常用命令</h2><h3 id=\"CMD操作类\"><a href=\"#CMD操作类\" class=\"headerlink\" title=\"CMD操作类\"></a>CMD操作类</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切盘</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> D:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> del</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 退出dos</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">exit</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清空命令行</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &amp;&amp;   同时执行两个操作 用 &amp;&amp; 衔接</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n\n<h3 id=\"目录操作类\"><a href=\"#目录操作类\" class=\"headerlink\" title=\"目录操作类\"></a>目录操作类</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">显示目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dir   <span class=\"comment\">## 详细</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">创建目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> md 目录名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rd 目录名</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rd /s/q 目录名   <span class=\"comment\">## 强制删除文件文件夹和文件夹内所有文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入指定目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> 目录名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">树形图显示目录结构</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tree</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文件操作类\"><a href=\"#文件操作类\" class=\"headerlink\" title=\"文件操作类\"></a>文件操作类</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重名名文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ren</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#####\t进阶操作  ==&gt;  批量重命名(指定字符串替换)</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ren *.html *.php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 替换文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> replace</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> replace</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> del 文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> on &gt; a.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 向文件添加内容 （覆盖）</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> 内容 &gt; a.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 向文件添加内容 （向后追加）</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> 追加 &gt;&gt; a.txt</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"服务操作类\"><a href=\"#服务操作类\" class=\"headerlink\" title=\"服务操作类\"></a>服务操作类</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询服务</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc query MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动服务</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> net start MySQL</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止服务</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> net stop MySQL</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除服务</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc delete MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询端口情况</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> netstat -ano</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><p>Git Bash / Cmder 可以模拟Linux环境，在Windows操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清屏</span></span><br><span class=\"line\">clear</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示文件夹列表 （显示不隐藏的文件与文件夹） </span></span><br><span class=\"line\">ls</span><br><span class=\"line\">ls -a  <span class=\"comment\"># (显示当前目录下的所有文件及文件夹包括隐藏的.和..等)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作目录 </span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个文件或者目录</span></span><br><span class=\"line\">rm 文件名</span><br><span class=\"line\"><span class=\"comment\"># 删除非空目录，以及一些比较顽固的文件或者目录</span></span><br><span class=\"line\">rm -rf 目录名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\">touch 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看文件（完整输出）</span></span><br><span class=\"line\">cat 文件名</span><br><span class=\"line\"><span class=\"comment\"># 向文件添加内容 （覆盖）</span></span><br><span class=\"line\">cat &gt; a.txt （回车后 添加内容）</span><br><span class=\"line\"><span class=\"comment\"># 向文件添加内容 （向后追加）</span></span><br><span class=\"line\">cat &gt;&gt; a.txt （回车后 添加内容）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看文件（分页输出）-- 适用于查看大文本文件</span></span><br><span class=\"line\">less 文件名 \t\t<span class=\"comment\"># b 向上翻一页    空格 向下翻一页    鼠标滚轮翻页</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># visual interface 编辑文本</span></span><br><span class=\"line\">vi 文件名\t\t<span class=\"comment\"># 进去vi编辑模式</span></span><br><span class=\"line\">Esc         <span class=\"comment\"># 退出到命令模式</span></span><br><span class=\"line\">i \t\t\t\t\t<span class=\"comment\"># 进入插入模式</span></span><br><span class=\"line\">:q \t\t\t\t\t<span class=\"comment\"># 退出vi</span></span><br><span class=\"line\">:w \t\t\t\t\t<span class=\"comment\"># 保存编辑</span></span><br><span class=\"line\">:wq \t\t\t\t<span class=\"comment\"># 保存并退出</span></span><br><span class=\"line\">:q! \t\t\t\t<span class=\"comment\"># 强制退出不保存修改</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Window\"><a href=\"#Window\" class=\"headerlink\" title=\"Window\"></a>Window</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sysdm.cpl  cmd 开启服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示桌面\t\t\t==&gt;   win + D</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最小化所有窗口\t  ==&gt;   win + M</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最小化除当前窗口以外所有窗口\t==&gt;   win + HOME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开资源管理器\t  ==&gt;   win + E</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开设置\t        ==&gt;   win + I</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 截图\t\t\t ==&gt;   win + PrintScreen</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 放大缩小视口\t  ==&gt;   WIN + +/-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换输入法    \t   ==&gt;   WIN + space</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自定义截图\t\t   ==&gt;   WIN + SHFIT +S</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">win + Ctrl + D       新建桌面</span><br><span class=\"line\">win + Ctrl + 方向键   切换桌面</span><br><span class=\"line\">win + tab\t\t\t\t\t\t 列表</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令行 用 sublime 打开当前目录 .表示当前目录</span></span><br><span class=\"line\">subl .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令行 用 vscode 打开当前目录</span></span><br><span class=\"line\">code .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除整行  \t\t==&gt;    CTRL + SHIFT + K </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 括号内部选中  \t   ==&gt;    CTRL + SHIFT + M</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 直接跳下一行  \t   ==&gt;    CTRL + ENTER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 直接跳上一行  \t   ==&gt;    CTRL + SHIFT + ENTER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查找选择器\t\t    ==&gt;\t   CTRL + R</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 替换同一个目录下所有文件公共部分</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ==&gt;侧边栏目录下子文件右键选项   Find Advanced  &gt;  In Parent Folder </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开所在目录\t\t==&gt;    右击文件选  Reveal</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h2><h3 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> console 命令行截图    ==&gt;     Capture node screenshot</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索栏技巧\"><a href=\"#搜索栏技巧\" class=\"headerlink\" title=\"搜索栏技巧\"></a>搜索栏技巧</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索关键词如有空格，可用  <span class=\"string\">\"\"</span>  包含，视为一个词</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索限定</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> 关键词 + site:cnblogs.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 限定在 cnblogs.com 搜索</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"右键菜单分栏设置地址\"><a href=\"#右键菜单分栏设置地址\" class=\"headerlink\" title=\"右键菜单分栏设置地址\"></a>右键菜单分栏设置地址</h2><blockquote>\n<p>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\CommandStore\\shell\\</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"Dos-常用命令\"><a href=\"#Dos-常用命令\" class=\"headerlink\" title=\"Dos 常用命令\"></a>Dos 常用命令</h2><h3 id=\"CMD操作类\"><a href=\"#CMD操作类\" class=\"headerlink\" title=\"CMD操作类\"></a>CMD操作类</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切盘</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> D:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> del</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 退出dos</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">exit</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 清空命令行</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &amp;&amp;   同时执行两个操作 用 &amp;&amp; 衔接</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"目录操作类\"><a href=\"#目录操作类\" class=\"headerlink\" title=\"目录操作类\"></a>目录操作类</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">显示目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dir   <span class=\"comment\">## 详细</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">创建目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> md 目录名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rd 目录名</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> rd /s/q 目录名   <span class=\"comment\">## 强制删除文件文件夹和文件夹内所有文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入指定目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> 目录名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">树形图显示目录结构</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> tree</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文件操作类\"><a href=\"#文件操作类\" class=\"headerlink\" title=\"文件操作类\"></a>文件操作类</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重名名文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ren</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#####\t进阶操作  ==&gt;  批量重命名(指定字符串替换)</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ren *.html *.php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 替换文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> replace</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> replace</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> del 文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> on &gt; a.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 向文件添加内容 （覆盖）</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> 内容 &gt; a.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 向文件添加内容 （向后追加）</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> 追加 &gt;&gt; a.txt</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"服务操作类\"><a href=\"#服务操作类\" class=\"headerlink\" title=\"服务操作类\"></a>服务操作类</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询服务</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc query MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动服务</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> net start MySQL</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 停止服务</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> net stop MySQL</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除服务</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sc delete MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查询端口情况</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> netstat -ano</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><p>Git Bash / Cmder 可以模拟Linux环境，在Windows操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清屏</span></span><br><span class=\"line\">clear</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示文件夹列表 （显示不隐藏的文件与文件夹） </span></span><br><span class=\"line\">ls</span><br><span class=\"line\">ls -a  <span class=\"comment\"># (显示当前目录下的所有文件及文件夹包括隐藏的.和..等)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示工作目录 </span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个文件或者目录</span></span><br><span class=\"line\">rm 文件名</span><br><span class=\"line\"><span class=\"comment\"># 删除非空目录，以及一些比较顽固的文件或者目录</span></span><br><span class=\"line\">rm -rf 目录名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\">touch 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看文件（完整输出）</span></span><br><span class=\"line\">cat 文件名</span><br><span class=\"line\"><span class=\"comment\"># 向文件添加内容 （覆盖）</span></span><br><span class=\"line\">cat &gt; a.txt （回车后 添加内容）</span><br><span class=\"line\"><span class=\"comment\"># 向文件添加内容 （向后追加）</span></span><br><span class=\"line\">cat &gt;&gt; a.txt （回车后 添加内容）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看文件（分页输出）-- 适用于查看大文本文件</span></span><br><span class=\"line\">less 文件名 \t\t<span class=\"comment\"># b 向上翻一页    空格 向下翻一页    鼠标滚轮翻页</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># visual interface 编辑文本</span></span><br><span class=\"line\">vi 文件名\t\t<span class=\"comment\"># 进去vi编辑模式</span></span><br><span class=\"line\">Esc         <span class=\"comment\"># 退出到命令模式</span></span><br><span class=\"line\">i \t\t\t\t\t<span class=\"comment\"># 进入插入模式</span></span><br><span class=\"line\">:q \t\t\t\t\t<span class=\"comment\"># 退出vi</span></span><br><span class=\"line\">:w \t\t\t\t\t<span class=\"comment\"># 保存编辑</span></span><br><span class=\"line\">:wq \t\t\t\t<span class=\"comment\"># 保存并退出</span></span><br><span class=\"line\">:q! \t\t\t\t<span class=\"comment\"># 强制退出不保存修改</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Window\"><a href=\"#Window\" class=\"headerlink\" title=\"Window\"></a>Window</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sysdm.cpl  cmd 开启服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示桌面\t\t\t==&gt;   win + D</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最小化所有窗口\t  ==&gt;   win + M</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最小化除当前窗口以外所有窗口\t==&gt;   win + HOME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开资源管理器\t  ==&gt;   win + E</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开设置\t        ==&gt;   win + I</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 截图\t\t\t ==&gt;   win + PrintScreen</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 放大缩小视口\t  ==&gt;   WIN + +/-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换输入法    \t   ==&gt;   WIN + space</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自定义截图\t\t   ==&gt;   WIN + SHFIT +S</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">win + Ctrl + D       新建桌面</span><br><span class=\"line\">win + Ctrl + 方向键   切换桌面</span><br><span class=\"line\">win + tab\t\t\t\t\t\t 列表</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令行 用 sublime 打开当前目录 .表示当前目录</span></span><br><span class=\"line\">subl .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令行 用 vscode 打开当前目录</span></span><br><span class=\"line\">code .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除整行  \t\t==&gt;    CTRL + SHIFT + K </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 括号内部选中  \t   ==&gt;    CTRL + SHIFT + M</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 直接跳下一行  \t   ==&gt;    CTRL + ENTER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 直接跳上一行  \t   ==&gt;    CTRL + SHIFT + ENTER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查找选择器\t\t    ==&gt;\t   CTRL + R</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 替换同一个目录下所有文件公共部分</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ==&gt;侧边栏目录下子文件右键选项   Find Advanced  &gt;  In Parent Folder </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开所在目录\t\t==&gt;    右击文件选  Reveal</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h2><h3 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> console 命令行截图    ==&gt;     Capture node screenshot</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索栏技巧\"><a href=\"#搜索栏技巧\" class=\"headerlink\" title=\"搜索栏技巧\"></a>搜索栏技巧</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索关键词如有空格，可用  <span class=\"string\">\"\"</span>  包含，视为一个词</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索限定</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> 关键词 + site:cnblogs.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 限定在 cnblogs.com 搜索</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"右键菜单分栏设置地址\"><a href=\"#右键菜单分栏设置地址\" class=\"headerlink\" title=\"右键菜单分栏设置地址\"></a>右键菜单分栏设置地址</h2><blockquote>\n<p>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\CommandStore\\shell\\</p>\n</blockquote>"},{"title":"git","date":"2019-11-01T05:53:45.000Z","comments":1,"_content":"\n\n\n[维基百科 - Git](https://zh.wikipedia.org/wiki/Git)\n<!-- more -->\n## Git 介绍\n\n- [Git教程 - 廖雪峰](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n- [Pro Git](http://git.oschina.net/progit/)\n- [git - 简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n- [猴子都能懂的GIT入门](http://backlogtool.com/git-guide/cn/)\n\n\n\n## Git 使用交互流程\n\n![git交互模型](media/Git_&_GitHub. assets/git交互模型-1571974764974.png)\n\n## 安装和配置 Git 环境\n\n下载地址：https://git-scm.com/\n\n\n\n### git-bash 常用命令\n\ngit-bash \n\n\n\n### 初始化Git仓库\n\n```shell\n# 找到目标文件夹并进入\n\n# 右键  选择 Git Bash Here\n\ngit init\n\ngit init 项目名称\n# 自动创建 项目目录 并且 初始化git 仓库\n\n```\n\n\n\n### 配置个人信息\n\n在用户目录下生成 `.gitconfig` 文件\n\n```shell\n\n# 方便每次备份将使用者信息备份起来，方便操作\n\n# 设置用户名\ngit config --global user.name \"answer-zf\"\n\n# 配置用户邮箱\ngit config --global user.email \"feng18255163789@gmail\"\n\n# 设置 gitk 图形查看工具中文显示默认编码（防止乱码）\ngit config --global gui.encoding utf-8\n\n# 查看配置列表项\ngit config --list\n\n```\n\n\n\n## 基本使用\n\n\n\n### 将文件备份到Git仓库中\n\n**操作 Git 的基本工作流程就是先修改文件，然后执行 `git add` 命令。**\n**`git add` 命令会把文件加入到暂存区，接着就可以执行 `git commit` 命令，将文件存入文档库，**\n**从而形成一次历史记录。**\n\n\n\n**暂存区：**\n\n- 可作为临时版本库\n- 可将修改的多个文件分多次提交\n  - 按照不同的修改分类提交\n\n```shell\n\n# 先存放置暂存区\n$ git add ./readme.md\n\n# 再提交到版本库\n$ git commit -m \"complete the first function！\"    # -m : 说明信息（便于查看）\n \n----------------------\n \t# 不输入 -m 会进去vim编辑器环境输说明信息。\n \t# 在vim里输入说明信息后 Esc键 + :Wp 即可    # w：保存 p：退出\n \t# 强制退出：Esc键 + :p\n \t\n##**************************************************************************\n \t\n# 把所有的文件存放到暂存区\n$ git add --all\n$ git add .\n$ git add ./\t# 当前文件夹所有文件\n\n# 一次性把所有修改后的文件直接放到版本库中\n$ git commit --all -m \"这是一次性操作\"        # --all : 把所有修改后的文件直接放到版本库中\n# 前提所有文件均被版本管理（提交过一次）\n\n# 使用一次新的commit，替代上一次提交 （修改commit的提交信息）\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n\n\n### 删除、修改工作区文件 \n\n```bash\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n```\n\n\n\n### 查看状态\n\n```bash\n\n$ git status\n\n# Changes not staged for commit\n# modified （红色）  =>  文件已修改，但未放入暂存区\n\n# Changes to be committed\n# modified （绿色）  =>  文件已经放入暂存区\n\n# nothing to commit, working tree clean  ==> 文件已经在工作区\n\n```\n\n\n\n### 查看提交日志\n\n``` shell\n\n# 查看历史日志\n$ git log   \n\n# 查看精简日志，单行显示\n$ git log --oneline\n\n# **************************************************\n\n# 日志过长会自动进入 less 查看模式\n\n# 查看每次切换版本记录\n$ git reflog\n\n```\n\n\n\n### 打开图形界面\n\n```shell\n$ gitk \n```\n\n\n\n### 撤销、回滚\n\n```bash\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# ex-----------------------------------------\n$ git reset --hard Head~0    # Head~0   回退到上一次提交代码时的状态\n\t\t\t\t\t\t\t # Head~1   回退到上上一次提交代码时的状态\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t # hard     允许工作区代码被以前的代码覆盖\n\t\t\t\t\t\t\t \n# 可以通过版本号精确回退到某一次提交的状态\n$ git reset --hard b0750f9   ## b0750f9 ：版本号\n# -------------------------------------------\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n\n\n## 分支（ 默认有一个主分支 master）\n\n\n\n### 分支基础\n\n默认在 git 的仓库中，会有个分支的原点：master\n\n```shell\n\n# 列出所有本地分支\n$ git branch\n\n# 基于当前分支新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 基于当前分支新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支，交替和上一个分支进行切换\n$ git checkout -\n\n# 合并 指定分支 到 当前分支\n$ git merge [branch]\n\n# 删除分支(不能是当前所处分支)\n$ git branch -d [branch-name]\n\n```\n\n- 对于没有提交到暂存区的工作区的修改文件，无论切换到那个分支，内容不变，处于待提交到暂存区状态\n- 对于没有提交到版本库的暂存区的文件，无论切换到那个分支，内容不变，处于待提交到版本库状态\n- 也就是说 只有 commit 到的指定分支 才能对该分支进行操作\n\n\n\n### 合并分支冲突\n\n```shell\n\n## 在dev分支提交了代码以后\n## 又在主分支master提交了代码\n## 合并分支以后，需要手动处理，在提交到主分支中\n\n```\n\n\n\n## Git 工作流程：分支策略\n\n[Git 工作流程](http://www.ruanyifeng.com/blog/2015/12/git-workflow.html)\n\n### Git Flow\n\n[Git分支管理策略](http://www.ruanyifeng.com/blog/2012/07/git.html) \n\n### Github Collabrators\n\n这种方式公司团队项目使用居多\n\n- 进入项目\n- settings - > Collaborators \n- 添加 协作者 \n\n### Github Flow\n\n这种方式开源项目使用居多\n\n- fork\n- clone 到你的本地\n- 在clone下来的项目中拉出一个新的分支\n  + 修改的时候最好是基于 master 拉出一个修改的分支，例如这个分支是用来添加某个功能的\n- 在新分支上开发或者修改完成之后，提交到本地仓库，然后 push 推到自己的账户中 fork 过来的仓库\n- 最后，在 Github 上你 fork 过来的仓库界面中找到 New Pull Request 发起提交请求\n- 对方就会在仓库的 Pull Requests 中收到你发起的提交请求\n  + 然后双方就可以使用社会化交流方式进行沟通协作\n  + 例如 Code Review 代码审查\n- 最后对方审查通过没有问题之后，选择 Merge Request\n- 到此，一个完整的 Github 工作流结束\n- 这种方式开源项目更多一些（大家都不认识）\n\n### Gitlab Flow\n\n#### Gitlab\n\n[Gitlab](https://about.gitlab.com/ )\n\nGitlab 是一个开源的类似于 Github 的一个系统，开源免费部署到自己的公司内容。\n\n\n\n## GIT 报错集合\n\n### 将文件存放置暂存区警告：\n\n> warning: LF will be replaced by CRLF in Config_Document/VS Code_Config/.vscode/settings.json.\n>\n> The file will have its original line endings in your working directory\n\n解决：\n\n```shell\n$ git config --global core.autocrlf false\n```\n\n\n\n### Git Bash 中文乱码：\n\n![Snipaste_2019-10-27_14-04-08](media/Git_&_GitHub. assets/Snipaste_2019-10-27_14-04-08.png)\n\n\n\n\n\n# GitHub\n\n**让你使用社交化的方式进行编程协作**\n\n**主要作用：**\n\n- 可以免费在线托管你的仓库\n- 可以实现多人协作","source":"_posts/git.md","raw":"---\ntitle: git\ndate: 2019-11-01 13:53:45\ncategories:\n- Operate\ntags:\n- git\ncomments: true\n---\n\n\n\n[维基百科 - Git](https://zh.wikipedia.org/wiki/Git)\n<!-- more -->\n## Git 介绍\n\n- [Git教程 - 廖雪峰](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n- [Pro Git](http://git.oschina.net/progit/)\n- [git - 简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n- [猴子都能懂的GIT入门](http://backlogtool.com/git-guide/cn/)\n\n\n\n## Git 使用交互流程\n\n![git交互模型](media/Git_&_GitHub. assets/git交互模型-1571974764974.png)\n\n## 安装和配置 Git 环境\n\n下载地址：https://git-scm.com/\n\n\n\n### git-bash 常用命令\n\ngit-bash \n\n\n\n### 初始化Git仓库\n\n```shell\n# 找到目标文件夹并进入\n\n# 右键  选择 Git Bash Here\n\ngit init\n\ngit init 项目名称\n# 自动创建 项目目录 并且 初始化git 仓库\n\n```\n\n\n\n### 配置个人信息\n\n在用户目录下生成 `.gitconfig` 文件\n\n```shell\n\n# 方便每次备份将使用者信息备份起来，方便操作\n\n# 设置用户名\ngit config --global user.name \"answer-zf\"\n\n# 配置用户邮箱\ngit config --global user.email \"feng18255163789@gmail\"\n\n# 设置 gitk 图形查看工具中文显示默认编码（防止乱码）\ngit config --global gui.encoding utf-8\n\n# 查看配置列表项\ngit config --list\n\n```\n\n\n\n## 基本使用\n\n\n\n### 将文件备份到Git仓库中\n\n**操作 Git 的基本工作流程就是先修改文件，然后执行 `git add` 命令。**\n**`git add` 命令会把文件加入到暂存区，接着就可以执行 `git commit` 命令，将文件存入文档库，**\n**从而形成一次历史记录。**\n\n\n\n**暂存区：**\n\n- 可作为临时版本库\n- 可将修改的多个文件分多次提交\n  - 按照不同的修改分类提交\n\n```shell\n\n# 先存放置暂存区\n$ git add ./readme.md\n\n# 再提交到版本库\n$ git commit -m \"complete the first function！\"    # -m : 说明信息（便于查看）\n \n----------------------\n \t# 不输入 -m 会进去vim编辑器环境输说明信息。\n \t# 在vim里输入说明信息后 Esc键 + :Wp 即可    # w：保存 p：退出\n \t# 强制退出：Esc键 + :p\n \t\n##**************************************************************************\n \t\n# 把所有的文件存放到暂存区\n$ git add --all\n$ git add .\n$ git add ./\t# 当前文件夹所有文件\n\n# 一次性把所有修改后的文件直接放到版本库中\n$ git commit --all -m \"这是一次性操作\"        # --all : 把所有修改后的文件直接放到版本库中\n# 前提所有文件均被版本管理（提交过一次）\n\n# 使用一次新的commit，替代上一次提交 （修改commit的提交信息）\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n\n\n### 删除、修改工作区文件 \n\n```bash\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n```\n\n\n\n### 查看状态\n\n```bash\n\n$ git status\n\n# Changes not staged for commit\n# modified （红色）  =>  文件已修改，但未放入暂存区\n\n# Changes to be committed\n# modified （绿色）  =>  文件已经放入暂存区\n\n# nothing to commit, working tree clean  ==> 文件已经在工作区\n\n```\n\n\n\n### 查看提交日志\n\n``` shell\n\n# 查看历史日志\n$ git log   \n\n# 查看精简日志，单行显示\n$ git log --oneline\n\n# **************************************************\n\n# 日志过长会自动进入 less 查看模式\n\n# 查看每次切换版本记录\n$ git reflog\n\n```\n\n\n\n### 打开图形界面\n\n```shell\n$ gitk \n```\n\n\n\n### 撤销、回滚\n\n```bash\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# ex-----------------------------------------\n$ git reset --hard Head~0    # Head~0   回退到上一次提交代码时的状态\n\t\t\t\t\t\t\t # Head~1   回退到上上一次提交代码时的状态\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t # hard     允许工作区代码被以前的代码覆盖\n\t\t\t\t\t\t\t \n# 可以通过版本号精确回退到某一次提交的状态\n$ git reset --hard b0750f9   ## b0750f9 ：版本号\n# -------------------------------------------\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n\n\n## 分支（ 默认有一个主分支 master）\n\n\n\n### 分支基础\n\n默认在 git 的仓库中，会有个分支的原点：master\n\n```shell\n\n# 列出所有本地分支\n$ git branch\n\n# 基于当前分支新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 基于当前分支新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支，交替和上一个分支进行切换\n$ git checkout -\n\n# 合并 指定分支 到 当前分支\n$ git merge [branch]\n\n# 删除分支(不能是当前所处分支)\n$ git branch -d [branch-name]\n\n```\n\n- 对于没有提交到暂存区的工作区的修改文件，无论切换到那个分支，内容不变，处于待提交到暂存区状态\n- 对于没有提交到版本库的暂存区的文件，无论切换到那个分支，内容不变，处于待提交到版本库状态\n- 也就是说 只有 commit 到的指定分支 才能对该分支进行操作\n\n\n\n### 合并分支冲突\n\n```shell\n\n## 在dev分支提交了代码以后\n## 又在主分支master提交了代码\n## 合并分支以后，需要手动处理，在提交到主分支中\n\n```\n\n\n\n## Git 工作流程：分支策略\n\n[Git 工作流程](http://www.ruanyifeng.com/blog/2015/12/git-workflow.html)\n\n### Git Flow\n\n[Git分支管理策略](http://www.ruanyifeng.com/blog/2012/07/git.html) \n\n### Github Collabrators\n\n这种方式公司团队项目使用居多\n\n- 进入项目\n- settings - > Collaborators \n- 添加 协作者 \n\n### Github Flow\n\n这种方式开源项目使用居多\n\n- fork\n- clone 到你的本地\n- 在clone下来的项目中拉出一个新的分支\n  + 修改的时候最好是基于 master 拉出一个修改的分支，例如这个分支是用来添加某个功能的\n- 在新分支上开发或者修改完成之后，提交到本地仓库，然后 push 推到自己的账户中 fork 过来的仓库\n- 最后，在 Github 上你 fork 过来的仓库界面中找到 New Pull Request 发起提交请求\n- 对方就会在仓库的 Pull Requests 中收到你发起的提交请求\n  + 然后双方就可以使用社会化交流方式进行沟通协作\n  + 例如 Code Review 代码审查\n- 最后对方审查通过没有问题之后，选择 Merge Request\n- 到此，一个完整的 Github 工作流结束\n- 这种方式开源项目更多一些（大家都不认识）\n\n### Gitlab Flow\n\n#### Gitlab\n\n[Gitlab](https://about.gitlab.com/ )\n\nGitlab 是一个开源的类似于 Github 的一个系统，开源免费部署到自己的公司内容。\n\n\n\n## GIT 报错集合\n\n### 将文件存放置暂存区警告：\n\n> warning: LF will be replaced by CRLF in Config_Document/VS Code_Config/.vscode/settings.json.\n>\n> The file will have its original line endings in your working directory\n\n解决：\n\n```shell\n$ git config --global core.autocrlf false\n```\n\n\n\n### Git Bash 中文乱码：\n\n![Snipaste_2019-10-27_14-04-08](media/Git_&_GitHub. assets/Snipaste_2019-10-27_14-04-08.png)\n\n\n\n\n\n# GitHub\n\n**让你使用社交化的方式进行编程协作**\n\n**主要作用：**\n\n- 可以免费在线托管你的仓库\n- 可以实现多人协作","slug":"git","published":1,"updated":"2019-11-02T01:55:53.027Z","_id":"ck2fw5cpt000a2cq1dmongcs8","layout":"post","photos":[],"link":"","content":"<p><a href=\"https://zh.wikipedia.org/wiki/Git\" target=\"_blank\" rel=\"noopener\">维基百科 - Git</a></p>\n<a id=\"more\"></a>\n<h2 id=\"Git-介绍\"><a href=\"#Git-介绍\" class=\"headerlink\" title=\"Git 介绍\"></a>Git 介绍</h2><ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\">Git教程 - 廖雪峰</a></li>\n<li><a href=\"http://git.oschina.net/progit/\" target=\"_blank\" rel=\"noopener\">Pro Git</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git - 简明指南</a></li>\n<li><a href=\"http://backlogtool.com/git-guide/cn/\" target=\"_blank\" rel=\"noopener\">猴子都能懂的GIT入门</a></li>\n</ul>\n<h2 id=\"Git-使用交互流程\"><a href=\"#Git-使用交互流程\" class=\"headerlink\" title=\"Git 使用交互流程\"></a>Git 使用交互流程</h2><p>![git交互模型](media/Git_&amp;_GitHub. assets/git交互模型-1571974764974.png)</p>\n<h2 id=\"安装和配置-Git-环境\"><a href=\"#安装和配置-Git-环境\" class=\"headerlink\" title=\"安装和配置 Git 环境\"></a>安装和配置 Git 环境</h2><p>下载地址：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<h3 id=\"git-bash-常用命令\"><a href=\"#git-bash-常用命令\" class=\"headerlink\" title=\"git-bash 常用命令\"></a>git-bash 常用命令</h3><p>git-bash </p>\n<h3 id=\"初始化Git仓库\"><a href=\"#初始化Git仓库\" class=\"headerlink\" title=\"初始化Git仓库\"></a>初始化Git仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找到目标文件夹并进入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 右键  选择 Git Bash Here</span></span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\">git init 项目名称</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自动创建 项目目录 并且 初始化git 仓库</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置个人信息\"><a href=\"#配置个人信息\" class=\"headerlink\" title=\"配置个人信息\"></a>配置个人信息</h3><p>在用户目录下生成 <code>.gitconfig</code> 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方便每次备份将使用者信息备份起来，方便操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置用户名</span></span><br><span class=\"line\">git config --global user.name \"answer-zf\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置用户邮箱</span></span><br><span class=\"line\">git config --global user.email \"feng18255163789@gmail\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置 gitk 图形查看工具中文显示默认编码（防止乱码）</span></span><br><span class=\"line\">git config --global gui.encoding utf-8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看配置列表项</span></span><br><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"将文件备份到Git仓库中\"><a href=\"#将文件备份到Git仓库中\" class=\"headerlink\" title=\"将文件备份到Git仓库中\"></a>将文件备份到Git仓库中</h3><p><strong>操作 Git 的基本工作流程就是先修改文件，然后执行 <code>git add</code> 命令。</strong><br><strong><code>git add</code> 命令会把文件加入到暂存区，接着就可以执行 <code>git commit</code> 命令，将文件存入文档库，</strong><br><strong>从而形成一次历史记录。</strong></p>\n<p><strong>暂存区：</strong></p>\n<ul>\n<li>可作为临时版本库</li>\n<li>可将修改的多个文件分多次提交<ul>\n<li>按照不同的修改分类提交</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 先存放置暂存区</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add ./readme.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再提交到版本库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"complete the first function！\"</span>    <span class=\"comment\"># -m : 说明信息（便于查看）</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">----------------------</span><br><span class=\"line\"><span class=\"meta\"> \t#</span><span class=\"bash\"> 不输入 -m 会进去vim编辑器环境输说明信息。</span></span><br><span class=\"line\"><span class=\"meta\"> \t#</span><span class=\"bash\"> 在vim里输入说明信息后 Esc键 + :Wp 即可    <span class=\"comment\"># w：保存 p：退出</span></span></span><br><span class=\"line\"><span class=\"meta\"> \t#</span><span class=\"bash\"> 强制退出：Esc键 + :p</span></span><br><span class=\"line\"> \t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#**************************************************************************</span></span></span><br><span class=\"line\"> \t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把所有的文件存放到暂存区</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add --all</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add .</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add ./\t<span class=\"comment\"># 当前文件夹所有文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 一次性把所有修改后的文件直接放到版本库中</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --all -m <span class=\"string\">\"这是一次性操作\"</span>        <span class=\"comment\"># --all : 把所有修改后的文件直接放到版本库中</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 前提所有文件均被版本管理（提交过一次）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用一次新的commit，替代上一次提交 （修改commit的提交信息）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend -m [message]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除、修改工作区文件\"><a href=\"#删除、修改工作区文件\" class=\"headerlink\" title=\"删除、修改工作区文件\"></a>删除、修改工作区文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Changes not staged for commit</span></span><br><span class=\"line\"><span class=\"comment\"># modified （红色）  =&gt;  文件已修改，但未放入暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Changes to be committed</span></span><br><span class=\"line\"><span class=\"comment\"># modified （绿色）  =&gt;  文件已经放入暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nothing to commit, working tree clean  ==&gt; 文件已经在工作区</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看提交日志\"><a href=\"#查看提交日志\" class=\"headerlink\" title=\"查看提交日志\"></a>查看提交日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看历史日志</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span>   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看精简日志，单行显示</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --oneline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> **************************************************</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 日志过长会自动进入 less 查看模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看每次切换版本记录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"打开图形界面\"><a href=\"#打开图形界面\" class=\"headerlink\" title=\"打开图形界面\"></a>打开图形界面</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitk</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"撤销、回滚\"><a href=\"#撤销、回滚\" class=\"headerlink\" title=\"撤销、回滚\"></a>撤销、回滚</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ex-----------------------------------------</span></span><br><span class=\"line\">$ git reset --hard Head~0    <span class=\"comment\"># Head~0   回退到上一次提交代码时的状态</span></span><br><span class=\"line\">\t\t\t\t\t\t\t <span class=\"comment\"># Head~1   回退到上上一次提交代码时的状态</span></span><br><span class=\"line\">\t\t\t\t\t\t\t </span><br><span class=\"line\">\t\t\t\t\t\t\t <span class=\"comment\"># hard     允许工作区代码被以前的代码覆盖</span></span><br><span class=\"line\">\t\t\t\t\t\t\t </span><br><span class=\"line\"><span class=\"comment\"># 可以通过版本号精确回退到某一次提交的状态</span></span><br><span class=\"line\">$ git reset --hard b0750f9   <span class=\"comment\">## b0750f9 ：版本号</span></span><br><span class=\"line\"><span class=\"comment\"># -------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分支（-默认有一个主分支-master）\"><a href=\"#分支（-默认有一个主分支-master）\" class=\"headerlink\" title=\"分支（ 默认有一个主分支 master）\"></a>分支（ 默认有一个主分支 master）</h2><h3 id=\"分支基础\"><a href=\"#分支基础\" class=\"headerlink\" title=\"分支基础\"></a>分支基础</h3><p>默认在 git 的仓库中，会有个分支的原点：master</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有本地分支</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基于当前分支新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch-name]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基于当前分支新建一个分支，并切换到该分支</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到指定分支，并更新工作区</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [branch-name]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到上一个分支，交替和上一个分支进行切换</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并 指定分支 到 当前分支</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge [branch]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除分支(不能是当前所处分支)</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -d [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对于没有提交到暂存区的工作区的修改文件，无论切换到那个分支，内容不变，处于待提交到暂存区状态</li>\n<li>对于没有提交到版本库的暂存区的文件，无论切换到那个分支，内容不变，处于待提交到版本库状态</li>\n<li>也就是说 只有 commit 到的指定分支 才能对该分支进行操作</li>\n</ul>\n<h3 id=\"合并分支冲突\"><a href=\"#合并分支冲突\" class=\"headerlink\" title=\"合并分支冲突\"></a>合并分支冲突</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 在dev分支提交了代码以后</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 又在主分支master提交了代码</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 合并分支以后，需要手动处理，在提交到主分支中</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Git-工作流程：分支策略\"><a href=\"#Git-工作流程：分支策略\" class=\"headerlink\" title=\"Git 工作流程：分支策略\"></a>Git 工作流程：分支策略</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html\" target=\"_blank\" rel=\"noopener\">Git 工作流程</a></p>\n<h3 id=\"Git-Flow\"><a href=\"#Git-Flow\" class=\"headerlink\" title=\"Git Flow\"></a>Git Flow</h3><p><a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">Git分支管理策略</a> </p>\n<h3 id=\"Github-Collabrators\"><a href=\"#Github-Collabrators\" class=\"headerlink\" title=\"Github Collabrators\"></a>Github Collabrators</h3><p>这种方式公司团队项目使用居多</p>\n<ul>\n<li>进入项目</li>\n<li>settings - &gt; Collaborators </li>\n<li>添加 协作者 </li>\n</ul>\n<h3 id=\"Github-Flow\"><a href=\"#Github-Flow\" class=\"headerlink\" title=\"Github Flow\"></a>Github Flow</h3><p>这种方式开源项目使用居多</p>\n<ul>\n<li>fork</li>\n<li>clone 到你的本地</li>\n<li>在clone下来的项目中拉出一个新的分支<ul>\n<li>修改的时候最好是基于 master 拉出一个修改的分支，例如这个分支是用来添加某个功能的</li>\n</ul>\n</li>\n<li>在新分支上开发或者修改完成之后，提交到本地仓库，然后 push 推到自己的账户中 fork 过来的仓库</li>\n<li>最后，在 Github 上你 fork 过来的仓库界面中找到 New Pull Request 发起提交请求</li>\n<li>对方就会在仓库的 Pull Requests 中收到你发起的提交请求<ul>\n<li>然后双方就可以使用社会化交流方式进行沟通协作</li>\n<li>例如 Code Review 代码审查</li>\n</ul>\n</li>\n<li>最后对方审查通过没有问题之后，选择 Merge Request</li>\n<li>到此，一个完整的 Github 工作流结束</li>\n<li>这种方式开源项目更多一些（大家都不认识）</li>\n</ul>\n<h3 id=\"Gitlab-Flow\"><a href=\"#Gitlab-Flow\" class=\"headerlink\" title=\"Gitlab Flow\"></a>Gitlab Flow</h3><h4 id=\"Gitlab\"><a href=\"#Gitlab\" class=\"headerlink\" title=\"Gitlab\"></a>Gitlab</h4><p><a href=\"https://about.gitlab.com/\" target=\"_blank\" rel=\"noopener\">Gitlab</a></p>\n<p>Gitlab 是一个开源的类似于 Github 的一个系统，开源免费部署到自己的公司内容。</p>\n<h2 id=\"GIT-报错集合\"><a href=\"#GIT-报错集合\" class=\"headerlink\" title=\"GIT 报错集合\"></a>GIT 报错集合</h2><h3 id=\"将文件存放置暂存区警告：\"><a href=\"#将文件存放置暂存区警告：\" class=\"headerlink\" title=\"将文件存放置暂存区警告：\"></a>将文件存放置暂存区警告：</h3><blockquote>\n<p>warning: LF will be replaced by CRLF in Config_Document/VS Code_Config/.vscode/settings.json.</p>\n<p>The file will have its original line endings in your working directory</p>\n</blockquote>\n<p>解决：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global core.autocrlf <span class=\"literal\">false</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Git-Bash-中文乱码：\"><a href=\"#Git-Bash-中文乱码：\" class=\"headerlink\" title=\"Git Bash 中文乱码：\"></a>Git Bash 中文乱码：</h3><p>![Snipaste_2019-10-27_14-04-08](media/Git_&amp;_GitHub. assets/Snipaste_2019-10-27_14-04-08.png)</p>\n<h1 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h1><p><strong>让你使用社交化的方式进行编程协作</strong></p>\n<p><strong>主要作用：</strong></p>\n<ul>\n<li>可以免费在线托管你的仓库</li>\n<li>可以实现多人协作</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://zh.wikipedia.org/wiki/Git\" target=\"_blank\" rel=\"noopener\">维基百科 - Git</a></p>","more":"<h2 id=\"Git-介绍\"><a href=\"#Git-介绍\" class=\"headerlink\" title=\"Git 介绍\"></a>Git 介绍</h2><ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\">Git教程 - 廖雪峰</a></li>\n<li><a href=\"http://git.oschina.net/progit/\" target=\"_blank\" rel=\"noopener\">Pro Git</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git - 简明指南</a></li>\n<li><a href=\"http://backlogtool.com/git-guide/cn/\" target=\"_blank\" rel=\"noopener\">猴子都能懂的GIT入门</a></li>\n</ul>\n<h2 id=\"Git-使用交互流程\"><a href=\"#Git-使用交互流程\" class=\"headerlink\" title=\"Git 使用交互流程\"></a>Git 使用交互流程</h2><p>![git交互模型](media/Git_&amp;_GitHub. assets/git交互模型-1571974764974.png)</p>\n<h2 id=\"安装和配置-Git-环境\"><a href=\"#安装和配置-Git-环境\" class=\"headerlink\" title=\"安装和配置 Git 环境\"></a>安装和配置 Git 环境</h2><p>下载地址：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<h3 id=\"git-bash-常用命令\"><a href=\"#git-bash-常用命令\" class=\"headerlink\" title=\"git-bash 常用命令\"></a>git-bash 常用命令</h3><p>git-bash </p>\n<h3 id=\"初始化Git仓库\"><a href=\"#初始化Git仓库\" class=\"headerlink\" title=\"初始化Git仓库\"></a>初始化Git仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 找到目标文件夹并进入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 右键  选择 Git Bash Here</span></span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\">git init 项目名称</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自动创建 项目目录 并且 初始化git 仓库</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置个人信息\"><a href=\"#配置个人信息\" class=\"headerlink\" title=\"配置个人信息\"></a>配置个人信息</h3><p>在用户目录下生成 <code>.gitconfig</code> 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方便每次备份将使用者信息备份起来，方便操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置用户名</span></span><br><span class=\"line\">git config --global user.name \"answer-zf\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置用户邮箱</span></span><br><span class=\"line\">git config --global user.email \"feng18255163789@gmail\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置 gitk 图形查看工具中文显示默认编码（防止乱码）</span></span><br><span class=\"line\">git config --global gui.encoding utf-8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看配置列表项</span></span><br><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"将文件备份到Git仓库中\"><a href=\"#将文件备份到Git仓库中\" class=\"headerlink\" title=\"将文件备份到Git仓库中\"></a>将文件备份到Git仓库中</h3><p><strong>操作 Git 的基本工作流程就是先修改文件，然后执行 <code>git add</code> 命令。</strong><br><strong><code>git add</code> 命令会把文件加入到暂存区，接着就可以执行 <code>git commit</code> 命令，将文件存入文档库，</strong><br><strong>从而形成一次历史记录。</strong></p>\n<p><strong>暂存区：</strong></p>\n<ul>\n<li>可作为临时版本库</li>\n<li>可将修改的多个文件分多次提交<ul>\n<li>按照不同的修改分类提交</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 先存放置暂存区</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add ./readme.md</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再提交到版本库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit -m <span class=\"string\">\"complete the first function！\"</span>    <span class=\"comment\"># -m : 说明信息（便于查看）</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">----------------------</span><br><span class=\"line\"><span class=\"meta\"> \t#</span><span class=\"bash\"> 不输入 -m 会进去vim编辑器环境输说明信息。</span></span><br><span class=\"line\"><span class=\"meta\"> \t#</span><span class=\"bash\"> 在vim里输入说明信息后 Esc键 + :Wp 即可    <span class=\"comment\"># w：保存 p：退出</span></span></span><br><span class=\"line\"><span class=\"meta\"> \t#</span><span class=\"bash\"> 强制退出：Esc键 + :p</span></span><br><span class=\"line\"> \t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#**************************************************************************</span></span></span><br><span class=\"line\"> \t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把所有的文件存放到暂存区</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add --all</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add .</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git add ./\t<span class=\"comment\"># 当前文件夹所有文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 一次性把所有修改后的文件直接放到版本库中</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --all -m <span class=\"string\">\"这是一次性操作\"</span>        <span class=\"comment\"># --all : 把所有修改后的文件直接放到版本库中</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 前提所有文件均被版本管理（提交过一次）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用一次新的commit，替代上一次提交 （修改commit的提交信息）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend -m [message]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除、修改工作区文件\"><a href=\"#删除、修改工作区文件\" class=\"headerlink\" title=\"删除、修改工作区文件\"></a>删除、修改工作区文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Changes not staged for commit</span></span><br><span class=\"line\"><span class=\"comment\"># modified （红色）  =&gt;  文件已修改，但未放入暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Changes to be committed</span></span><br><span class=\"line\"><span class=\"comment\"># modified （绿色）  =&gt;  文件已经放入暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nothing to commit, working tree clean  ==&gt; 文件已经在工作区</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看提交日志\"><a href=\"#查看提交日志\" class=\"headerlink\" title=\"查看提交日志\"></a>查看提交日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看历史日志</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span>   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看精简日志，单行显示</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --oneline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> **************************************************</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 日志过长会自动进入 less 查看模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看每次切换版本记录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"打开图形界面\"><a href=\"#打开图形界面\" class=\"headerlink\" title=\"打开图形界面\"></a>打开图形界面</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gitk</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"撤销、回滚\"><a href=\"#撤销、回滚\" class=\"headerlink\" title=\"撤销、回滚\"></a>撤销、回滚</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ex-----------------------------------------</span></span><br><span class=\"line\">$ git reset --hard Head~0    <span class=\"comment\"># Head~0   回退到上一次提交代码时的状态</span></span><br><span class=\"line\">\t\t\t\t\t\t\t <span class=\"comment\"># Head~1   回退到上上一次提交代码时的状态</span></span><br><span class=\"line\">\t\t\t\t\t\t\t </span><br><span class=\"line\">\t\t\t\t\t\t\t <span class=\"comment\"># hard     允许工作区代码被以前的代码覆盖</span></span><br><span class=\"line\">\t\t\t\t\t\t\t </span><br><span class=\"line\"><span class=\"comment\"># 可以通过版本号精确回退到某一次提交的状态</span></span><br><span class=\"line\">$ git reset --hard b0750f9   <span class=\"comment\">## b0750f9 ：版本号</span></span><br><span class=\"line\"><span class=\"comment\"># -------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"分支（-默认有一个主分支-master）\"><a href=\"#分支（-默认有一个主分支-master）\" class=\"headerlink\" title=\"分支（ 默认有一个主分支 master）\"></a>分支（ 默认有一个主分支 master）</h2><h3 id=\"分支基础\"><a href=\"#分支基础\" class=\"headerlink\" title=\"分支基础\"></a>分支基础</h3><p>默认在 git 的仓库中，会有个分支的原点：master</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 列出所有本地分支</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基于当前分支新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch [branch-name]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基于当前分支新建一个分支，并切换到该分支</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -b [branch]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到指定分支，并更新工作区</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout [branch-name]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到上一个分支，交替和上一个分支进行切换</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git checkout -</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 合并 指定分支 到 当前分支</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git merge [branch]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除分支(不能是当前所处分支)</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git branch -d [branch-name]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对于没有提交到暂存区的工作区的修改文件，无论切换到那个分支，内容不变，处于待提交到暂存区状态</li>\n<li>对于没有提交到版本库的暂存区的文件，无论切换到那个分支，内容不变，处于待提交到版本库状态</li>\n<li>也就是说 只有 commit 到的指定分支 才能对该分支进行操作</li>\n</ul>\n<h3 id=\"合并分支冲突\"><a href=\"#合并分支冲突\" class=\"headerlink\" title=\"合并分支冲突\"></a>合并分支冲突</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 在dev分支提交了代码以后</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 又在主分支master提交了代码</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 合并分支以后，需要手动处理，在提交到主分支中</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Git-工作流程：分支策略\"><a href=\"#Git-工作流程：分支策略\" class=\"headerlink\" title=\"Git 工作流程：分支策略\"></a>Git 工作流程：分支策略</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-workflow.html\" target=\"_blank\" rel=\"noopener\">Git 工作流程</a></p>\n<h3 id=\"Git-Flow\"><a href=\"#Git-Flow\" class=\"headerlink\" title=\"Git Flow\"></a>Git Flow</h3><p><a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">Git分支管理策略</a> </p>\n<h3 id=\"Github-Collabrators\"><a href=\"#Github-Collabrators\" class=\"headerlink\" title=\"Github Collabrators\"></a>Github Collabrators</h3><p>这种方式公司团队项目使用居多</p>\n<ul>\n<li>进入项目</li>\n<li>settings - &gt; Collaborators </li>\n<li>添加 协作者 </li>\n</ul>\n<h3 id=\"Github-Flow\"><a href=\"#Github-Flow\" class=\"headerlink\" title=\"Github Flow\"></a>Github Flow</h3><p>这种方式开源项目使用居多</p>\n<ul>\n<li>fork</li>\n<li>clone 到你的本地</li>\n<li>在clone下来的项目中拉出一个新的分支<ul>\n<li>修改的时候最好是基于 master 拉出一个修改的分支，例如这个分支是用来添加某个功能的</li>\n</ul>\n</li>\n<li>在新分支上开发或者修改完成之后，提交到本地仓库，然后 push 推到自己的账户中 fork 过来的仓库</li>\n<li>最后，在 Github 上你 fork 过来的仓库界面中找到 New Pull Request 发起提交请求</li>\n<li>对方就会在仓库的 Pull Requests 中收到你发起的提交请求<ul>\n<li>然后双方就可以使用社会化交流方式进行沟通协作</li>\n<li>例如 Code Review 代码审查</li>\n</ul>\n</li>\n<li>最后对方审查通过没有问题之后，选择 Merge Request</li>\n<li>到此，一个完整的 Github 工作流结束</li>\n<li>这种方式开源项目更多一些（大家都不认识）</li>\n</ul>\n<h3 id=\"Gitlab-Flow\"><a href=\"#Gitlab-Flow\" class=\"headerlink\" title=\"Gitlab Flow\"></a>Gitlab Flow</h3><h4 id=\"Gitlab\"><a href=\"#Gitlab\" class=\"headerlink\" title=\"Gitlab\"></a>Gitlab</h4><p><a href=\"https://about.gitlab.com/\" target=\"_blank\" rel=\"noopener\">Gitlab</a></p>\n<p>Gitlab 是一个开源的类似于 Github 的一个系统，开源免费部署到自己的公司内容。</p>\n<h2 id=\"GIT-报错集合\"><a href=\"#GIT-报错集合\" class=\"headerlink\" title=\"GIT 报错集合\"></a>GIT 报错集合</h2><h3 id=\"将文件存放置暂存区警告：\"><a href=\"#将文件存放置暂存区警告：\" class=\"headerlink\" title=\"将文件存放置暂存区警告：\"></a>将文件存放置暂存区警告：</h3><blockquote>\n<p>warning: LF will be replaced by CRLF in Config_Document/VS Code_Config/.vscode/settings.json.</p>\n<p>The file will have its original line endings in your working directory</p>\n</blockquote>\n<p>解决：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global core.autocrlf <span class=\"literal\">false</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Git-Bash-中文乱码：\"><a href=\"#Git-Bash-中文乱码：\" class=\"headerlink\" title=\"Git Bash 中文乱码：\"></a>Git Bash 中文乱码：</h3><p>![Snipaste_2019-10-27_14-04-08](media/Git_&amp;_GitHub. assets/Snipaste_2019-10-27_14-04-08.png)</p>\n<h1 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h1><p><strong>让你使用社交化的方式进行编程协作</strong></p>\n<p><strong>主要作用：</strong></p>\n<ul>\n<li>可以免费在线托管你的仓库</li>\n<li>可以实现多人协作</li>\n</ul>"},{"title":"sublime","date":"2019-11-01T09:05:58.000Z","_content":"## 插件\n<!-- more -->\n``` shell\n\n## 汉化插件\n$ Localization\n\n## 格式化代码插件\n$ JSFormat\t\t\t\t\t\t\t## js  格式化代码    shift+alt+j\n$ HTML-CSS-JS Prettify\t\t\t\t## html格式化代码\tshift+alt+h\n$ CodeFormatter\t\t\t\t\t\t## 通用格式化代码\t   shift+alt+f \n\t\t\t   ---------------------\n\t\t\t\t\t\t\t\t\t## sublime 只支持php5.6-php7.2的php版本\n\t\t\t\t\t\t\t\t\t## 更改配置信息：\n\t\t\t\t\t\t\t\t\t## \"php_path\": \"C:/Develop/php-7.1.31/php.exe\",\n\t\t\t\t\t\t\t\t\t\n## 侧边栏优化插件\n$ SideBarEnhancements\t\t\t\t## 具体配置见注释\n\n## 最牛逼的插件：\n$ Emmet                             ## 牛逼到不用解释！\n\n## 代码颜色插件：\n$ Color Highlighter\n\n## 最棒的注释插件：\n$ DocBlockr                         ## 快捷键：/** + enter\n\n## 括号匹配插件：\n$ Bracket Highlighter\n\n## 快捷文件名输入插件：\n$ AutoFileName\n\n## 等号对其插件：\n$ Alignment\t\t\t\t\t\t\t## 快捷键：alt+shift+e\n\n## 转码插件：\n$ ConvertToUTF8\n\n## 头部注释插件：\n$ FILE HEADER                       ## 自定义创建头部注释（详情配置见备注）\n\n## 语法错误检测插件\n$ sublimelinter \t\t\t\t\t## 错误日志视图快捷键： ctrl+k,ctrl+e\n\n$ sublimelinter-php \t\t\t\t## 具体见备注\n$ SublimeLinter-jshint\n$ SublimeLinter-csslint\n\n## PHP调试插件\n$ Xdebug Client\n\n## 主题预览插件\n$ colorsublime\n```\n\n\n\n# 主题\n\n``` shell\n\n## 配色:\t\t\tDracula\n## 主题:\t\t\tMaterialize\n\n```\n\n\n\n# 首选项配置\n\n``` json\n\n## 状态栏编码显示\n$ \"show_encoding\":true\n\n```\n\n\n\n## 备注\n\n\n\n**SUBLIMELINTER配置** \t==> \t基于node插件\n\n``` shell\n\n------js/css检测\t## 安装环境\n\n## 1.安装node.js\n\n## 2.命令行输入 \n##   2.1 js  检测\n$ npm install -g jshint            ##\tSublimeLinter-jshint\n$ jshint -v\t\t\t\t\t\t   ##   命令行输出：\"jshint v2.10.2\"\n\n##   2.2 css 检测\n$ npm install -g csslint           ##\tSublimeLinter-csslint\n$ csslint --version\t\t\t\t   ##   命令行输出：\"v1.0.4\"\n\n\n------php检测  \t ## 配置环境\n\n​```json\n\n    \"lint_mode\": \"save only\",\n\n    \"paths\": {\n        \"linux\": [],\n        \"osx\": [],\n        \"windows\": [\"C:/Develop/php\"]\n    }\t\n    \n```\n\n\n\n**FILE HEADER配置** \n\n```json\n\n## 1.设置配置文件\n        \n{\n    \"Default\":\n   {\n       \"email\": \"657829956@qq.com\",\n       \"last_modified_by\": \"answer-zf\",\n       \"author\": \"answe-zf\"\n   }\n｝\n\n## 2.自定义注释\n\n## \t2.1找到文件夹\n\n\tC:\\Users\\Administrator\\AppData\\Roaming\\Sublime Text 3\\\n    Packages\\FileHeader\\template\\header\n    \n## \t2.2在文件夹里找到需要修改的文件，并修改（以html文件为例）\n\n    <!--\n    * @Author: {{author}}\n    * @Date:   {{create_time}}\n    * @Last Modified by:   {{last_modified_by}}\n    * @Last Modified time: {{last_modified_time}}\n    * @E-mail: {{email}}\n    -->\n\n```\n\n\n\n## 快捷键配置\n\n``` json\n\n[\n    //格式化快捷键配置\n    //--codeformatter快捷键配置\n    {\n        \"keys\": [\"shift+alt+f\"],\n        \"command\": \"code_formatter\"\n    },\n    //--htmlprettify快捷键配置\n    {\n        \"keys\": [\"alt+shift+h\"],\n        \"command\": \"htmlprettify\"\n    },\n    //--jsFormat快捷键设置\n    {\n        \"keys\": [\"shift+alt+j\"],\n        \"command\": \"js_format\",\n        \"context\": [{\n            \"key\": \"selector\",\n            \"operator\": \"equal\",\n            \"operand\": \"source.js,source.json\"\n        }]\n    },\n    //chorme 浏览器打开快捷键(浏览器地址需适配本机电脑)    \n    {\n        \"keys\": [\"f2\"],\n        \"command\": \"side_bar_files_open_with\",\n        \"args\": {\n            \"paths\": [],\n            \"application\": \"C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n            \"extensions\": \".*\"\n        }\n    },\n    //SublimeLinter快捷键配置\n    //--Lint this view\n    {\n        \"keys\": [\"ctrl+k\", \"ctrl+l\"],\n        \"command\": \"sublime_linter_lint\"\n    },\n    //--Show all errors\n    {\n        \"keys\": [\"ctrl+k\", \"ctrl+e\"],\n        \"command\": \"sublime_linter_panel_toggle\"\n    },\n    //Alignment快捷键配置\n    {\n        \"keys\": [\"alt+shift+e\"],\n        \"command\": \"alignment\"\n    }\n]\n\n```\n\n\n\n## 设置配置\n\n\n\n## 连体字\n\n```json\n\n//连体字符设置\n\"font_face\": \"Fira Code\"\n\n## 常用编程字体：\n-- Consolas\n-- Fira Code\n-- Source Code Pro\n```\n\n","source":"_posts/sublime.md","raw":"---\ntitle: sublime\ndate: 2019-11-01 17:05:58\ntags:\n---\n## 插件\n<!-- more -->\n``` shell\n\n## 汉化插件\n$ Localization\n\n## 格式化代码插件\n$ JSFormat\t\t\t\t\t\t\t## js  格式化代码    shift+alt+j\n$ HTML-CSS-JS Prettify\t\t\t\t## html格式化代码\tshift+alt+h\n$ CodeFormatter\t\t\t\t\t\t## 通用格式化代码\t   shift+alt+f \n\t\t\t   ---------------------\n\t\t\t\t\t\t\t\t\t## sublime 只支持php5.6-php7.2的php版本\n\t\t\t\t\t\t\t\t\t## 更改配置信息：\n\t\t\t\t\t\t\t\t\t## \"php_path\": \"C:/Develop/php-7.1.31/php.exe\",\n\t\t\t\t\t\t\t\t\t\n## 侧边栏优化插件\n$ SideBarEnhancements\t\t\t\t## 具体配置见注释\n\n## 最牛逼的插件：\n$ Emmet                             ## 牛逼到不用解释！\n\n## 代码颜色插件：\n$ Color Highlighter\n\n## 最棒的注释插件：\n$ DocBlockr                         ## 快捷键：/** + enter\n\n## 括号匹配插件：\n$ Bracket Highlighter\n\n## 快捷文件名输入插件：\n$ AutoFileName\n\n## 等号对其插件：\n$ Alignment\t\t\t\t\t\t\t## 快捷键：alt+shift+e\n\n## 转码插件：\n$ ConvertToUTF8\n\n## 头部注释插件：\n$ FILE HEADER                       ## 自定义创建头部注释（详情配置见备注）\n\n## 语法错误检测插件\n$ sublimelinter \t\t\t\t\t## 错误日志视图快捷键： ctrl+k,ctrl+e\n\n$ sublimelinter-php \t\t\t\t## 具体见备注\n$ SublimeLinter-jshint\n$ SublimeLinter-csslint\n\n## PHP调试插件\n$ Xdebug Client\n\n## 主题预览插件\n$ colorsublime\n```\n\n\n\n# 主题\n\n``` shell\n\n## 配色:\t\t\tDracula\n## 主题:\t\t\tMaterialize\n\n```\n\n\n\n# 首选项配置\n\n``` json\n\n## 状态栏编码显示\n$ \"show_encoding\":true\n\n```\n\n\n\n## 备注\n\n\n\n**SUBLIMELINTER配置** \t==> \t基于node插件\n\n``` shell\n\n------js/css检测\t## 安装环境\n\n## 1.安装node.js\n\n## 2.命令行输入 \n##   2.1 js  检测\n$ npm install -g jshint            ##\tSublimeLinter-jshint\n$ jshint -v\t\t\t\t\t\t   ##   命令行输出：\"jshint v2.10.2\"\n\n##   2.2 css 检测\n$ npm install -g csslint           ##\tSublimeLinter-csslint\n$ csslint --version\t\t\t\t   ##   命令行输出：\"v1.0.4\"\n\n\n------php检测  \t ## 配置环境\n\n​```json\n\n    \"lint_mode\": \"save only\",\n\n    \"paths\": {\n        \"linux\": [],\n        \"osx\": [],\n        \"windows\": [\"C:/Develop/php\"]\n    }\t\n    \n```\n\n\n\n**FILE HEADER配置** \n\n```json\n\n## 1.设置配置文件\n        \n{\n    \"Default\":\n   {\n       \"email\": \"657829956@qq.com\",\n       \"last_modified_by\": \"answer-zf\",\n       \"author\": \"answe-zf\"\n   }\n｝\n\n## 2.自定义注释\n\n## \t2.1找到文件夹\n\n\tC:\\Users\\Administrator\\AppData\\Roaming\\Sublime Text 3\\\n    Packages\\FileHeader\\template\\header\n    \n## \t2.2在文件夹里找到需要修改的文件，并修改（以html文件为例）\n\n    <!--\n    * @Author: {{author}}\n    * @Date:   {{create_time}}\n    * @Last Modified by:   {{last_modified_by}}\n    * @Last Modified time: {{last_modified_time}}\n    * @E-mail: {{email}}\n    -->\n\n```\n\n\n\n## 快捷键配置\n\n``` json\n\n[\n    //格式化快捷键配置\n    //--codeformatter快捷键配置\n    {\n        \"keys\": [\"shift+alt+f\"],\n        \"command\": \"code_formatter\"\n    },\n    //--htmlprettify快捷键配置\n    {\n        \"keys\": [\"alt+shift+h\"],\n        \"command\": \"htmlprettify\"\n    },\n    //--jsFormat快捷键设置\n    {\n        \"keys\": [\"shift+alt+j\"],\n        \"command\": \"js_format\",\n        \"context\": [{\n            \"key\": \"selector\",\n            \"operator\": \"equal\",\n            \"operand\": \"source.js,source.json\"\n        }]\n    },\n    //chorme 浏览器打开快捷键(浏览器地址需适配本机电脑)    \n    {\n        \"keys\": [\"f2\"],\n        \"command\": \"side_bar_files_open_with\",\n        \"args\": {\n            \"paths\": [],\n            \"application\": \"C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n            \"extensions\": \".*\"\n        }\n    },\n    //SublimeLinter快捷键配置\n    //--Lint this view\n    {\n        \"keys\": [\"ctrl+k\", \"ctrl+l\"],\n        \"command\": \"sublime_linter_lint\"\n    },\n    //--Show all errors\n    {\n        \"keys\": [\"ctrl+k\", \"ctrl+e\"],\n        \"command\": \"sublime_linter_panel_toggle\"\n    },\n    //Alignment快捷键配置\n    {\n        \"keys\": [\"alt+shift+e\"],\n        \"command\": \"alignment\"\n    }\n]\n\n```\n\n\n\n## 设置配置\n\n\n\n## 连体字\n\n```json\n\n//连体字符设置\n\"font_face\": \"Fira Code\"\n\n## 常用编程字体：\n-- Consolas\n-- Fira Code\n-- Source Code Pro\n```\n\n","slug":"sublime","published":1,"updated":"2019-11-02T01:56:22.659Z","_id":"ck2fwxopm000f2cq14eg6h85m","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 汉化插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Localization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 格式化代码插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> JSFormat\t\t\t\t\t\t\t<span class=\"comment\">## js  格式化代码    shift+alt+j</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> HTML-CSS-JS Prettify\t\t\t\t<span class=\"comment\">## html格式化代码\tshift+alt+h</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> CodeFormatter\t\t\t\t\t\t<span class=\"comment\">## 通用格式化代码\t   shift+alt+f </span></span></span><br><span class=\"line\">\t\t\t   ---------------------</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t## sublime 只支持php5.6-php7.2的php版本</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t## 更改配置信息：</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t## \"php_path\": \"C:/Develop/php-7.1.31/php.exe\",</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 侧边栏优化插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> SideBarEnhancements\t\t\t\t<span class=\"comment\">## 具体配置见注释</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 最牛逼的插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Emmet                             <span class=\"comment\">## 牛逼到不用解释！</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 代码颜色插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Color Highlighter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 最棒的注释插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> DocBlockr                         <span class=\"comment\">## 快捷键：/** + enter</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 括号匹配插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Bracket Highlighter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 快捷文件名输入插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> AutoFileName</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 等号对其插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Alignment\t\t\t\t\t\t\t<span class=\"comment\">## 快捷键：alt+shift+e</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 转码插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ConvertToUTF8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 头部注释插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> FILE HEADER                       <span class=\"comment\">## 自定义创建头部注释（详情配置见备注）</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 语法错误检测插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sublimelinter \t\t\t\t\t<span class=\"comment\">## 错误日志视图快捷键： ctrl+k,ctrl+e</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sublimelinter-php \t\t\t\t<span class=\"comment\">## 具体见备注</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> SublimeLinter-jshint</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> SublimeLinter-csslint</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># PHP调试插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Xdebug Client</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 主题预览插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> colorsublime</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 配色:\t\t\tDracula</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 主题:\t\t\tMaterialize</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"首选项配置\"><a href=\"#首选项配置\" class=\"headerlink\" title=\"首选项配置\"></a>首选项配置</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 状态栏编码显示</span><br><span class=\"line\">$ \"show_encoding\":true</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p><strong>SUBLIMELINTER配置</strong>     ==&gt;     基于node插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">------js/css检测\t## 安装环境</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1.安装node.js</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 2.命令行输入 </span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#   2.1 js  检测</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g jshint            <span class=\"comment\">##\tSublimeLinter-jshint</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> jshint -v\t\t\t\t\t\t   <span class=\"comment\">##   命令行输出：\"jshint v2.10.2\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#   2.2 css 检测</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g csslint           <span class=\"comment\">##\tSublimeLinter-csslint</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> csslint --version\t\t\t\t   <span class=\"comment\">##   命令行输出：\"v1.0.4\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">------php检测  \t ## 配置环境</span><br><span class=\"line\"></span><br><span class=\"line\">​```json</span><br><span class=\"line\"></span><br><span class=\"line\">    \"lint_mode\": \"save only\",</span><br><span class=\"line\"></span><br><span class=\"line\">    \"paths\": &#123;</span><br><span class=\"line\">        \"linux\": [],</span><br><span class=\"line\">        \"osx\": [],</span><br><span class=\"line\">        \"windows\": [\"C:/Develop/php\"]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>FILE HEADER配置</strong> </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 1.设置配置文件</span><br><span class=\"line\">        </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"Default\"</span>:</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"657829956@qq.com\"</span>,</span><br><span class=\"line\">       <span class=\"attr\">\"last_modified_by\"</span>: <span class=\"string\">\"answer-zf\"</span>,</span><br><span class=\"line\">       <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"answe-zf\"</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">｝</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"number\">2.</span>自定义注释</span><br><span class=\"line\"></span><br><span class=\"line\">## \t<span class=\"number\">2.1</span>找到文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">\tC:\\Users\\Administrator\\AppData\\Roaming\\Sublime Text <span class=\"number\">3</span>\\</span><br><span class=\"line\">    Packages\\FileHeader\\template\\header</span><br><span class=\"line\">    </span><br><span class=\"line\">## \t<span class=\"number\">2.2</span>在文件夹里找到需要修改的文件，并修改（以html文件为例）</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    * @Author: &#123;&#123;author&#125;&#125;</span><br><span class=\"line\">    * @Date:   &#123;&#123;create_time&#125;&#125;</span><br><span class=\"line\">    * @Last Modified by:   &#123;&#123;last_modified_by&#125;&#125;</span><br><span class=\"line\">    * @Last Modified time: &#123;&#123;last_modified_time&#125;&#125;</span><br><span class=\"line\">    * @E-mail: &#123;&#123;email&#125;&#125;</span><br><span class=\"line\">    --&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"快捷键配置\"><a href=\"#快捷键配置\" class=\"headerlink\" title=\"快捷键配置\"></a>快捷键配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    //格式化快捷键配置</span><br><span class=\"line\">    //--codeformatter快捷键配置</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"shift+alt+f\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"code_formatter\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //--htmlprettify快捷键配置</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"alt+shift+h\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"htmlprettify\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //--jsFormat快捷键设置</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"shift+alt+j\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"js_format\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"context\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"attr\">\"key\"</span>: <span class=\"string\">\"selector\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"operator\"</span>: <span class=\"string\">\"equal\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"operand\"</span>: <span class=\"string\">\"source.js,source.json\"</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //chorme 浏览器打开快捷键(浏览器地址需适配本机电脑)    </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"f2\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"args\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"paths\"</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">\"application\"</span>: <span class=\"string\">\"C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"extensions\"</span>: <span class=\"string\">\".*\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //SublimeLinter快捷键配置</span><br><span class=\"line\">    //--Lint this view</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+k\"</span>, <span class=\"string\">\"ctrl+l\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"sublime_linter_lint\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //--Show all errors</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+k\"</span>, <span class=\"string\">\"ctrl+e\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"sublime_linter_panel_toggle\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //Alignment快捷键配置</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"alt+shift+e\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"alignment\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置配置\"><a href=\"#设置配置\" class=\"headerlink\" title=\"设置配置\"></a>设置配置</h2><h2 id=\"连体字\"><a href=\"#连体字\" class=\"headerlink\" title=\"连体字\"></a>连体字</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//连体字符设置</span><br><span class=\"line\">\"font_face\": \"Fira Code\"</span><br><span class=\"line\"></span><br><span class=\"line\">## 常用编程字体：</span><br><span class=\"line\">-- Consolas</span><br><span class=\"line\">-- Fira Code</span><br><span class=\"line\">-- Source Code Pro</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 汉化插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Localization</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 格式化代码插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> JSFormat\t\t\t\t\t\t\t<span class=\"comment\">## js  格式化代码    shift+alt+j</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> HTML-CSS-JS Prettify\t\t\t\t<span class=\"comment\">## html格式化代码\tshift+alt+h</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> CodeFormatter\t\t\t\t\t\t<span class=\"comment\">## 通用格式化代码\t   shift+alt+f </span></span></span><br><span class=\"line\">\t\t\t   ---------------------</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t## sublime 只支持php5.6-php7.2的php版本</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t## 更改配置信息：</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t## \"php_path\": \"C:/Develop/php-7.1.31/php.exe\",</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 侧边栏优化插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> SideBarEnhancements\t\t\t\t<span class=\"comment\">## 具体配置见注释</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 最牛逼的插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Emmet                             <span class=\"comment\">## 牛逼到不用解释！</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 代码颜色插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Color Highlighter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 最棒的注释插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> DocBlockr                         <span class=\"comment\">## 快捷键：/** + enter</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 括号匹配插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Bracket Highlighter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 快捷文件名输入插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> AutoFileName</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 等号对其插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Alignment\t\t\t\t\t\t\t<span class=\"comment\">## 快捷键：alt+shift+e</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 转码插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ConvertToUTF8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 头部注释插件：</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> FILE HEADER                       <span class=\"comment\">## 自定义创建头部注释（详情配置见备注）</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 语法错误检测插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sublimelinter \t\t\t\t\t<span class=\"comment\">## 错误日志视图快捷键： ctrl+k,ctrl+e</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sublimelinter-php \t\t\t\t<span class=\"comment\">## 具体见备注</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> SublimeLinter-jshint</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> SublimeLinter-csslint</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># PHP调试插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Xdebug Client</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 主题预览插件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> colorsublime</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 配色:\t\t\tDracula</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 主题:\t\t\tMaterialize</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"首选项配置\"><a href=\"#首选项配置\" class=\"headerlink\" title=\"首选项配置\"></a>首选项配置</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 状态栏编码显示</span><br><span class=\"line\">$ \"show_encoding\":true</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p><strong>SUBLIMELINTER配置</strong>     ==&gt;     基于node插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">------js/css检测\t## 安装环境</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 1.安装node.js</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 2.命令行输入 </span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#   2.1 js  检测</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g jshint            <span class=\"comment\">##\tSublimeLinter-jshint</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> jshint -v\t\t\t\t\t\t   <span class=\"comment\">##   命令行输出：\"jshint v2.10.2\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#   2.2 css 检测</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g csslint           <span class=\"comment\">##\tSublimeLinter-csslint</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> csslint --version\t\t\t\t   <span class=\"comment\">##   命令行输出：\"v1.0.4\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">------php检测  \t ## 配置环境</span><br><span class=\"line\"></span><br><span class=\"line\">​```json</span><br><span class=\"line\"></span><br><span class=\"line\">    \"lint_mode\": \"save only\",</span><br><span class=\"line\"></span><br><span class=\"line\">    \"paths\": &#123;</span><br><span class=\"line\">        \"linux\": [],</span><br><span class=\"line\">        \"osx\": [],</span><br><span class=\"line\">        \"windows\": [\"C:/Develop/php\"]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>FILE HEADER配置</strong> </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 1.设置配置文件</span><br><span class=\"line\">        </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"Default\"</span>:</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"657829956@qq.com\"</span>,</span><br><span class=\"line\">       <span class=\"attr\">\"last_modified_by\"</span>: <span class=\"string\">\"answer-zf\"</span>,</span><br><span class=\"line\">       <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"answe-zf\"</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">｝</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"number\">2.</span>自定义注释</span><br><span class=\"line\"></span><br><span class=\"line\">## \t<span class=\"number\">2.1</span>找到文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">\tC:\\Users\\Administrator\\AppData\\Roaming\\Sublime Text <span class=\"number\">3</span>\\</span><br><span class=\"line\">    Packages\\FileHeader\\template\\header</span><br><span class=\"line\">    </span><br><span class=\"line\">## \t<span class=\"number\">2.2</span>在文件夹里找到需要修改的文件，并修改（以html文件为例）</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    * @Author: &#123;&#123;author&#125;&#125;</span><br><span class=\"line\">    * @Date:   &#123;&#123;create_time&#125;&#125;</span><br><span class=\"line\">    * @Last Modified by:   &#123;&#123;last_modified_by&#125;&#125;</span><br><span class=\"line\">    * @Last Modified time: &#123;&#123;last_modified_time&#125;&#125;</span><br><span class=\"line\">    * @E-mail: &#123;&#123;email&#125;&#125;</span><br><span class=\"line\">    --&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"快捷键配置\"><a href=\"#快捷键配置\" class=\"headerlink\" title=\"快捷键配置\"></a>快捷键配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">    //格式化快捷键配置</span><br><span class=\"line\">    //--codeformatter快捷键配置</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"shift+alt+f\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"code_formatter\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //--htmlprettify快捷键配置</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"alt+shift+h\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"htmlprettify\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //--jsFormat快捷键设置</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"shift+alt+j\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"js_format\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"context\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"attr\">\"key\"</span>: <span class=\"string\">\"selector\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"operator\"</span>: <span class=\"string\">\"equal\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"operand\"</span>: <span class=\"string\">\"source.js,source.json\"</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //chorme 浏览器打开快捷键(浏览器地址需适配本机电脑)    </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"f2\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"side_bar_files_open_with\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"args\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"paths\"</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">\"application\"</span>: <span class=\"string\">\"C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"extensions\"</span>: <span class=\"string\">\".*\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //SublimeLinter快捷键配置</span><br><span class=\"line\">    //--Lint this view</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+k\"</span>, <span class=\"string\">\"ctrl+l\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"sublime_linter_lint\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //--Show all errors</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"ctrl+k\"</span>, <span class=\"string\">\"ctrl+e\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"sublime_linter_panel_toggle\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //Alignment快捷键配置</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"keys\"</span>: [<span class=\"string\">\"alt+shift+e\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"command\"</span>: <span class=\"string\">\"alignment\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置配置\"><a href=\"#设置配置\" class=\"headerlink\" title=\"设置配置\"></a>设置配置</h2><h2 id=\"连体字\"><a href=\"#连体字\" class=\"headerlink\" title=\"连体字\"></a>连体字</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//连体字符设置</span><br><span class=\"line\">\"font_face\": \"Fira Code\"</span><br><span class=\"line\"></span><br><span class=\"line\">## 常用编程字体：</span><br><span class=\"line\">-- Consolas</span><br><span class=\"line\">-- Fira Code</span><br><span class=\"line\">-- Source Code Pro</span><br></pre></td></tr></table></figure>"},{"title":"NodeJS","date":"2019-11-02T00:54:39.000Z","comments":1,"description":"如果说我比别人看得更远些,那是因为我站在了各位大佬的肩上.","_content":"\n\n![pic](https://blog-1257820412.cos.ap-shanghai.myqcloud.com/title/half_year.jpg)\n\n<!-- more -->\n\n## Node.js 概述\n\n- Node.js 是JavaScript运行时环境\n\n- 可以解析执行JavaScript代码\n\n- 没有BOM 、DOM\n\n- 遵循EcmaScript\n\n- 为JavaScript提供了服务器级别的操作API\n\n- 构建与Chrome的V8引擎之上\n\n  - Google Chrome 中的V8引擎世界上公认的解析执行JavaScript代码最快的\n\n  - Node.js作者把Google Chrome 中的V8引擎移出来，开发了独立的JavaScript运行时环境\n\n  \n\n## Node.js 特性\n\n- event-driven 事件驱动\n\n- non-blocking I/O model 非阻塞IO模型（异步）\n\n- lightweight and efficient 轻量和高效\n\n\n\n## Node.js 功能\n\n- WEB服务器后台\n  - B/S编程模型（与语言无关）\n  - 模块化编程 （类似less  @import('文件路径')  引用加载文件）\n  - 异步编程\n    - promise\n    - async\n    - generator \n  \n  - Express Web开发框架\n  - Ecmascript 6\n  \n- 命令行工具\n  \n  - git\t（ C ）\n  - npm（ Node ）\n  - hexo（ Node ）\n\n\n\n## Node.js 基本操作\n\n\n\n### 执行文件\n\n```shell\n\n## 创建编写js脚本文件\n## 打开终端，定位到脚本文件所属目录\n## 输入node '文件名' 执行对应的文件  -- 文件名不能以node.js命名否则会打开这个文件\n\n$node begin.js\n\n```\n\n\n\n### 读取文件\n\n```js\n\n// 执行文件操作必须引入fs这个核心模块（file-system）\n// 使用 require 方法载入fs核心模块\n\nvar fs = require('fs')\n\nfs.readFile('url',function(error,data){   // URL：要读取的文件路径 （统一资源定位符）\n\tif(error){\n\t \tconsole.log('读取错误')\n        return\n    }\n    console.log(data.toString())\n})\n// 读取成功 error 返回 null   ，data 返回 数据\t\t\t\t\t\t\t\t\t\n// 读取失败 error 返回 错误对象，data 返回 undefined\n\n## ps: data 返回的数据是将文件存储的二进制数据 转为 十六进制数据，展现\n##\t   可以用 toString 方法转为 字符串\n\n## readFile 的第二个参数是可选的，传入 utf8 就是告诉他把读取到的文件直接按照 utf8 编码转成字符串\n## 等价于 data.toString()\n```\n\n\n\n### 读取目录\n\n```javascript\n\nvar fs = require('fs')\nfs.readdir('url', function(err, files) {  // files: 返回数组\n  if (err) {\n    res.end(err.message) // err对象 中有一个属性 message \n    return\n  }\n  console.log(files)  \n})\n\n```\n\n\n\n### 写入文件\n\n```js\n\nvar fs = require('fs')\nfs.writeFile('url','content',function(error){ // content: 写入文件内容   error: 形参\n     if(error){\n\t\tconsole.log('写入失败')\n     }else{\n        console.log('写入成功')\n     }\n})\n\n## 写入成功 error 返回 null\n## 写入失败 error 返回 错误对象\n\n```\n\n\n\n### 创建服务器\n\n```javascript\n\n// Node中有一个核心模块 http ,职责创建编写服务器\n\n// 加载http核心模块\nvar http = require('http')\n\n// 使用http.createServer() 方法创建web服务    ## 返回一个Server实例\nvar server = http.createServer()\n\n// 接受请求\n// 处理请求\n// 返回响应\n\n// 注册 request 请求事件\n// 当客户端请求时，自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数 \nserver.on('request', function(request,response){\n    console.log('收到请求,请求路径' + request.url) \n    response.write('hello')\n    response.write(' node.js')\n    response.end()\n  \t// 简化\n  \tresponse.end('hello node.js')\n})\n\n## request  请求事件处理函数，需接收两个参数：\n## Request  请求对象（获取客户端请求信息：如请求路径）\n\t\t\t\t\t\t## req.url 获取端口号以后的路径，所有url都是以 / 开头的 默认为 /\n## Response 响应对象（给客户端发送响应信息）有 writer方法 ：给客户端发送响应数据\n\t\t\t\t\t\t## writer方法 ：给客户端发送响应数据\n            ## write 可以使用多次，但是最后一定要使用end结束响应，否则客户端会一直等待。\n            ## 简化操作 直接end的同时发送响应数据 response.end('str')\n            ## response.end()支持两种数据类型：二进制 字符串\n            \n## response.end()\t一次请求对应一次响应，响应结束这次请求也结束  不执行后续代码  类似return\n## response.end() 必须存在\n\n// 绑定端口号，启动服务器。\n\nserver.listen(3000,function(){\n    console.log('服务器启动成功，可以通过 http://127.0.0.1:3000/，进行访问')\n})\n\n// 此时终端被服务占用，关闭终端即关闭服务器（X掉，或者 Ctrl+c 终止），有响应便返回响应\n\n```\n\n\n\n#### - 创建服务简写\n\n```js\n\nhttp\n\t\t.createServer(function (req, res) {\n  \n\t\t})\n\t\t.listen(3000,function () {\n  \t\tconsole.log('Server is running')\n\t\t})\n```\n\n\n\n### 获取路径\n\n- 采用URL模块，获取\n\n```js\n\nvar url = require('url')\n\nvar obj =url.parse('http://127.0.0.1:3000/post?name=fasdf&mes= asdf', true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// true： 可以让里面的query 将所传入的参数转为对象\nconsole.log(obj)\n\n------------------------------------------\n$\n  protocol: 'http:',\t// 协议\n  slashes: true,\n  auth: null,\n  host: '127.0.0.1:3000',  \n  port: '3000',\t// 端口号\n  hostname: '127.0.0.1',\t// 主机名\n  hash: null,\n  search: '?name=fasdf&mes=%20asdf',\t// 查询字符串（ GET参数 ）\n  query: [Object: null prototype] { name: 'fasdf', mes: ' asdf' },\n  pathname: '/post',\n  path: '/post?name=fasdf&mes=%20asdf',\n  href: 'http://127.0.0.1:3000/post?name=fasdf&mes=%20asdf' }\n```\n\n\n\n\n\n## Node.js 中 的 JavaScript\n\n- EcmaScript\n- 核心模块\n- 第三方模块\n- 用户自定义模块\n\n### 核心模块\n\nNode为JavaScript提供了很多服务器级别的API，而且这些API绝大多数都被包装到了一个具名的核心模块中。他们都有自己特殊的名称标识，若要使用这些模块，必须用  ***require***  加载模块。\n\n- 文件操作的核心模块：fs\n- 服务构建的核心模块：http\n- 路径处理的核心模块：path\n- 路径操作的核心模块：url\n- 操作系统信息的核心模块：os\n- ...\n\n\n\n```javascript\n\nvar path = require('path')\nconsole.log(path.extname('url'))\n\n// 返回扩展名 .txt\n```\n\n\n\n### 用户定义模块\n\n#### require  方法\n\n​\t**用来加载模块，并执行里面的代码**（ 可加载执行多个JavaScript脚本文件 ）\n\n​    **拿到被加载文件模块导出的接口对象**\n\n\n\n- node中模块分三种\n\n  - 具名的核心模块 （ fs 、http ...）\n\n  - 用户编写的文件模块\n\n    ​    相对路径必须加 ./ 或 ../    （ ./ 不能省略，否则报错）\n\n    ​\t可以省略后缀名\n\n  - 第三方模块\n\n    \n\n    ```js\n    console.log('a.js => stat')\n    require('./b')\n    console.log('a.js => end')\n    ```\n\n    \n\n- node中没有全局作用域，只有模块作用域（即文件作用域）\n\n  - 模块是完全封闭的\n    - 文件与文件之间可以完全避免变量命名冲突、污染问题\n    - 外部访问不到内部，内部访问不到外部\n\n\n\n#### exports 对象\n\n**每个文件模块都提供了  *exports*  对象 （ 默认是空对象 ）**\n\n- 由于node只有模块作用域，想要做到模块间通信需要用到  ***exports***\n\n- 把需要被外部访问的成员手动挂载到 ***exports*** 接口对象中\n\n- 多次在 **exports** 添加成员，实现对外导出多个内部成员\n\n- 哪个文件 ***require*** 这个的模块，就可以得到模块内部的   ***exports***  接口对象\n\n  - 即：***require***  的返回值\n  \n  ```javascript\n  \n  ## └─ducument\n  ##    ├─a.js\n  ##    └─b.js\n  \n  ## ----  b.js content\n  \n  var foo = '1231234'\n  exports.foo = foo\n  \n  exports.add = function (x, y) {\n      return x + y\n  }\n  \n  ------------------------------------------\n  \n  ## ----  a.js content\n  \n  var bExports = require('./b')\n  console.log(bExports.foo)\n  console.log(bExports.add(10, 210))\n  \n  ```\n\n- 一个模块需要直接导出某个成员，而非挂载的方式必须使用\n\n  `module.exports = add`\n\n  - add 可为 function，string， array。。都可以\n\n\n## Web 服务端开发\n\n\n\n### IP地址  与  端口号\n\n\n\n- 所有联网的程序都要进行网络通信\n\n- 计算机中只有一个物理网卡，且同一个局域网中的网卡地址必须唯一。\n\n- 网卡是通过唯一的ip地址进行定位\n\n\n\n**IP 地址用来定位计算机**\n\n**端口号用来定位应用程序**\n\n- 所有需要网络通信的软件都必须有端口号\n- 端口号使用范围 0 ~ 65536 之间\n- 计算机中有一些默认端口号 尽量不去使用 ex : 80 ..\n- 一台计算机，同一个端口号在同一时间，只能被一个 \n- Node.js 可以开启多个服务，但是一定确保不同服务占用不同端口号\n\n\n\n### Content-Type\n\n- 服务端发送的数据默认，是utf-8编码的\n\n- 浏览器在不知道服务器响应内容的编码的情况下，会按照当前操作系统默认的编码去解析\n  - 中文操作系统默认编码是 GBK\n  - 在http协议中 Content-Type是用来告知，对方给你发送数据内容的数据类型\n  - 图片不需要指定编码，常说的编码一般指的是：字符编码，一般只为字符数据指定编码\n\n- **通过设置响应头的方式设置Content-Type的方式解决乱码问题**\n\n  ```js\n  \n  server.on('request', function(req, res){\n      res.setHeader('Content-Type','text/plain; charset=utf-8')\n      res.end('hello 世界')\n  })\n  \n  ```\n\n  - 服务器最好把每次响应的数据是什么内容类型 ，正确的告诉客户端\n  - 不同的资源对应的 Content-Type 是不一样，具体参照：http://tool.oschina.net/commons\n  - 对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题\n\n  \n\n- 除了用 Content-Type 指定编码，也可以在HTML页面，通过meta元数据（用来 描述、特征、信息，存储内容的数据）来声明当前文本的编码格式\n\n\n\n### 请求与响应\n\n- 当浏览器收到HTML的响应内容以后，开始从上到下一次解析，\n- 在解析过程中若发现\n  - link\n  - script\n  - img\n  - iframe\n  - video\n  - audio\n\n- 等带有src href属性标签的时候，浏览器会自动对这些资源发起新的请求\n\n  \n\n### 统一资源管理\n\n- 为了方便统一处理静态资源，顾将静态资源存放在同一位置\n- 通过代码灵活控制那些资源能被访问，那些资源不允许访问\n\n```js\n\nvar http = require('http')\nvar fs = require('fs')\nhttp\n  .createServer(function(req, res) {\n    var url = req.url\n    if (url === '/') {\n      fs.readFile('./view/index.html', function(err, data) {\n        if (err) {\n          res.end('404 Not Found')\n          return\n        }\n        res.end(data)\n      })\n    } else if (url.indexOf('/public/') === 0) {   // public 开启访问权限\n      fs.readFile('.' + url, function(err, data) {\n        if (err) {\n          res.end('404 Not Found')\n          return\n        }\n        res.end(data)\n      })\n    }\n  })\n  .listen(3000, function() {\n    console.log('Server is running')\n  })\n\n```\n\n- 上个实例，只有public目录可以提供访问，灵活控制访问资源\n\n  \n\n### 服务器重定向\n\n- 状态码设置 302临时重定向\n\n  - 301为永久重定向 浏览器会记住\n  - a  => b ,下次请求a，不经过a 直接到b\n  - 302为临时重定向 浏览器会记住\n    - a  => b ,下次继续请求a，a  => b\n  - response.statusCode = 302\n- 响应头中通过 Location告诉客户端往哪重定向\n\n  - response.setHeader( 'Location',  '/' )\n- 客户端发现收到的服务器的响应状态码是302，会自动在响应头中找 Location，然后对改地址发起新的请求。\n- 客户端自动跳转\n\n\n\n## Node中的模块系统\n\n\n\n### 前 提\n\n- 使用Node编写应用程序主要是使用\n  - EcamScript 语言\n  - 核心模块\n  - 第三方模块\n  - 用户自定义模块\n\n### 模块化\n\n- 文件作用域\n\n- 通信规则\n\n  - 加载\n\n  - 导出\n\n    \n\n### CommonJS模块规范\n\nJavaScript本身并不支持模块化 在Node中不仅支持，还有一个很重要的概念  **模块系统**\n\n- 模块作用域\n  - 默认模块中任何内容不能被外部访问\n- 使用require方法加载模块\n- 使用exports接口对象导出模块中的成员\n\n#### 加载  `require`\n\n##### 语法：\n\n```js\nvar custom = require('module')\n```\n\n##### 作用：\n\n1. 执行被加载模块中代码\n2. 得到被加载模块中的  `exports`  导出接口对象\n\n##### 加载规则：\n\n模块查找机制：优先从缓存加载\t=>  核心模块  =>  路径形式文件模块  =>  第三方模块\n\n###### 优先从缓存加载\n\n- 优先从缓存加载，不会重复加载，目的是为了避免重复加载，提高模块加载效率\n\n- 可以拿到其中的接口对象，但是不会重复执行里面的代码\n\n  ```js\n  ## └─ducument\n  ##    ├─a.js\n  ##    ├─b.js\n  ##    └─main.js\n  \n  ## ----  main.js content\n  \n  require('./a')\n  var fn = require('./b')\n  console.log(fn)\n  ----------------------------------\n  \n  ## ----  a.js content\n  \n  console.log('a.js 被加载了')\n  var fn = require('./b')\n  console.log(fn)\n  ----------------------------------\n  \n  ## ----  b.js content\n  \n  console.log('b.js 被加载了')\n  module.exports = function () {\n    console.log('hello bbb')\n  }\n  ----------------------------------\n  \n  ## ----\t main.js输出结果\n  a.js 被加载了\n  b.js 被加载了\n  [Function]\n  [Function]\n  ```\n\n  \n\n###### 判断模块模块标识(符)\n\n**require('模块标识')**\n\n- 核心模块\n  - 本质：文件。\n  - 已被编译到了二进制文件中，只需要按名字加载即可\n  - 模块标识 ：模块名\n- 第三方模块\n  - 凡是第三方模块必须通过npm下载，通过require('包名')进行加载使用\n  - 不可能有一个第三方包 与 核心模块 重名\n  - 模块标识 ：模块名\n- 用户模块\n  - 模块标识 ：路径\n\n\n\n**路径形式的模块**：\n\n- .js     后缀名可以省略\n- ./      当前目录 （不可省略）\n- ../     上一级目录 （不可省略）\n- /xxx\t绝对路径 ( 首位的  / 表示当前文件模块所属磁盘根路径)  ==>  几乎不用\n- d:/xxxx  绝对路径   ==>  几乎不用 \n\n**既不是核心模块，也不是路径形式的模块**\n\n1. 模块加载规则\n   - 先找到当前文件所属目录中的 `node_modules` 目录    ( 以art-template 为例 )\n   - == >     node_modules/art-template\n   - == >     node_modules/art-template/package.json 文件\n   - == >     node_modules/art-template/package.json 文件中的 main 属性\n   - main属性记录了art-template的入口模块 \n   - 加载使用art-template\n   - 实际上最终加载的还是文件\n2. 特殊情况\n   - 如果 package.json 文件不存在或者 main指定的入口模块也没有，则 node 会找该目录下的 index.js\n     - index.js 会作为默认备选项\n   - 若所述所有条件均不成立，则会进人上一级目录中的 node_modules 目录执行查找\n   - 若上一级还没有，则继续往上上一级查找\n   - 。。。\n   - 如果直到当前磁盘根目录还找不到，最后报错  `can not find module xxx` \n\n**在项目中有且只有一个 `node_modules` ，不会出现多个**\n\n**位置：放在项目根目录中，这样项目中所有子目录中的代码都可以加载第三方包**\n\n#### 导出 `exports`\n\n- Node中是模块作用域，默认文件中所有成员只在当前文件模块有效\n\n- 想要做到模块间通信需要用到  `exports` ，把需要被外部访问的成员手动挂载到 `exports` 接口对象中\n\n  - 导出多个成员（必须在对象中）：\n\n    - 多次在 `exports` 添加成员，实现对外导出多个内部成员\n\n      ```js\n      exports.a = 123\n      exports.b = 'string'\n      exports.c =\tfunction(){\n        console.log('string')\n      }\n      exports.d = {\n        foo = 'bar'\n      }\n      ```\n\n  - 导出单个成员（拿到的是函数、字符串、数组。。。）：\n\n    - 一个模块需要直接导出单个成员，而非挂载的方式必须使用\n\n      ```js\n      module.exports = 'string'\n      ```\n\n      ```js\n      module.exports = function (x, y) {\n        return x + y\n      }\n      ```\n\n    - 若重复使用，则后者覆盖前者\n\n    - 也可以用 `module.exports =` 的操作导出多个成员\n\n      ```js\n      module.exports = {\n       add: function(x, y){\n         return x + y\n       },\n       str: 'string'\n      }\n      ```\n\n  \n\n##### 原理\n\n- 在Node 中，每一个模块内部都有一个自己的 `module` 对象\n\n- 该 `module` 对象中，有一个成员叫： `exports` 也是一个对象（ 默认为空 ）\n\n- 若需要对外导出成员，只需要把导出的成员挂载到 `module.exports` 中\n\n- 由于每次导出接口成员的时候都通过 `module.exports.xxx = xxx` 比较麻烦，node为了简化操作专门提供一个变量 `exports`  等价于  `module.exports`  \n\n  ```js\n  console.log(exports === module.exports)\t// => true\n  exports.foo = 'bar'\n  //等价于\n  module.exports.add = 'bar'\n  ```\n\n  固（混搭）：\n\n  ```js\n  exports.foo = 'bar'\n  module.exports.add = function (x, y) {\n    return x + y\n  }\n  -------------------\n  // require结果\n  { foo: 'bar', add: [Function] }\n  ```\n\n- 当一个模块需要导出单个成员的时候\n\n  - 不能使用：` exports = 'string' ` \n\n    - `exports` 仅仅只是 `module.exports`  的引用,底层最后的代码是：\n      - `var exports = module.exports`\n      - `return module.exports`\n    - 重新赋值不再指向 `module.exports` , 便丢失了引用关系 \n    - 只是快捷方式，可以忽略\n\n  - 只能使用：`module.exports = 'string'`\n\n    - 重新赋值以后 `exports` 便直接失效。\n\n      1. 底层代码：`return module.exports`\n      2. 将对象赋值给变量，所存放的是地址\n\n      ```js\n      module.exports = 'string'\n      exports.foo = 'bar'\n      -------------\n      // require结果\n      'string'\n      ```\n\n      \n\n##### 底层代码模拟\n\n```js\nvar module = {\n\texports: { \n\t},\n  ...\n}\n// 哪个文件 require 这个的模块，就可以得到 module.exports\n// 在node最底层\n// 还有一句\nvar exports = module.exports\n// 默认在代码的最后 ：\nreturn module.exports\n```\n\n\n\n### npm\n\n**node package manager**\n\n#### npm 网站\n\nnpmjs.com\n\n#### npm 命令行工具\n\n只要安装了node ,就安装了npm\n\nnpm也有版本概念\n\n```shell\nnpm --version     ## 查看版本\n```\n\n```shell\nnpm install --global npm     ## 升级npm\n```\n\n#### npm 常用命令\n\n- npm init [--yes]\n  - npm init -y 跳过向导，快速生成\n- npm install\n  - 一次性把 dependencies 选项中的依赖项全部安装\n  - npm i \n- npm install 包名\n  - 只下载\n  - npm i 包名\n- npm install 包名 --save\n  - 下载并保存依赖项（ package.json 文件中的 dependencies 选项）\n  - npm i -S 包名\n- npm uninstall 包名\n  - 只删除，如果有依赖项会依然保存\n  - npm un 包名\n- npm uninstall --save 包名\n  - 删除的同时也会把依赖信息也去除\n  - npm un -S 包名\n- npm help \n  - 查看使用帮助\n- npm 命令 --help\n  - 查看指定命令的使用帮助\n\n#### 解决npm被墙问题\n\nnpm存储包文件的服务器在国外，有时候会被墙，速度很慢\n\nhttps://npm.taobao.org/ 淘宝的开发团队，把npm在国内做了备份\n\n步骤：\n\n1. 安装淘宝的cnpm：\n\n   ```shell\n   npm install --global cnpm\n   ## --global表示安装到全局，而非当前目录\n   ## 这条命令中 --global不能省略\n   ## 所有需要用 --global 来安装的包都可以在任意目录执行\n   ```\n\n2. 安装时包时将`npm` 替换成 `cnpm`\n\n   ```shell\n   # 这里还是走国外的npm服务器，速度比较慢\n   npm install jquery\n   # 使用 cnpm 通过淘宝的服务器下载\n   cnpm install jquery\n   ```\n\n3. 如果不想安装 cnpm 又想使用淘宝的服务器来下载\n\n   ```shell\n   npm install jquery --registry=https://registry.npm.taobao.org\n   ```\n\n   - 每次手动加参数过于繁琐，可以把这个选项加入配置文件中：\n\n     ```shell\n     npm config set registry https://registry.npm.taobao.org\n     \n     ## 查看npm配置信息\n     npm config list\n     ```\n\n   - 只要经过上面命令配置，以后所有的` npm install` 都会默认通过淘宝服务器来下载\n\n\n\n\n\n### package.json\n\n- 每个项目的根目录下都要有一个 package.json 文件 （包描述文件）\n\n- 执行`npm install` 包名的时候都加上 --save，用来 保存依赖项信息\n\n- package.json 可以通过 `npm init `的方式自动初始化出来\n  - `dependencies` 选项，保存第三方包的依赖信息\n- 若删除了node_modules 文件夹，且package.json 存在\n  -  直接使用 `npm install` 找回\n     - `npm install` 自动把package.json 中的dependencies 中所有的依赖项，都下载回来.\n\n#### package.json 和 package-lock.json\n\nnpm5 以前是不会有 `package-lock.json` 这个文件的\n\nnpm5以后才加入的\n\n当你安装包的时候，npm 都会生成或者更新 `package-lock.json` 这个文件\n\n- npm5以后的版本安装包，不需要加 `--save` 参数，他会自动保存依赖信息\n- 当安装包的时候，会自动创建或者是更新 `package-lock.json` 这个文件\n- `package-lock.json` 会保存 `node_modules` 中所有包的信息（版本、下载地址）\n  - 这样的话重新 `npm install` 的时候速度就可以提升\n- 从文件看来，有一个 `lock` 称之为 锁\n- 这个`lock` 是用来锁定版本的\n- 如果项目依赖1.1.1版本\n- 你重新install 其实会下载最新版本，而不是1.1.1\n- 我们的目的希望可以锁住1.1.1这个版本\n- `package-lock.json`这个文件的另一个作用就是锁定版本号，防止自动升级到最新版本\n\n## path路径操作模块\n\n> 参考文档： https://nodejs.org/dist/latest-v12.x/docs/api/path.html \n\n### 常用API：\n\n- path.basename\n  \n  - 获取一个路径的文件名（默认包含扩展名）\n- path.dirname\n  \n  - 获取一个路径中的目录部分\n- path.extname\n  \n  - 获取一个路径中的扩展名部分\n- path.parse\n  - 把一个路径转为对象\n    - root 根路径\n    - dir 目录\n    - base 包含后缀名的文件名\n    - ext 后缀名\n    - name 不包含后缀名的文件名\n\n- path.isAbsolute \n\n  - 判断一个路径是不是绝对路径\n\n- path.join()\n\n  - 作用：拼接路径\n  - 参数可以为任意，多写或者少写 `/` 不影响\n\n  ```js\n  \n  path.join('c:/a', 'b')\n  -- 'c:\\\\a\\\\b'\n  \n  path.join('c:/a', '/b', 'c/', './f')\n  -- 'c:\\\\a\\\\b\\\\c\\\\f'\n  \n  ```\n\n\n\n\n![Snipaste_2019-10-20_15-29-18](C:\\Users\\answer_zf\\Desktop\\Snipaste_2019-10-20_15-29-18.png)\n\n\n\n## Node 中的其他成员\n\n在每个模块中，出来 `require` 、`exports`等模块相关API之外，还有两个特殊的成员：\n\n-  `__dirname` **动态获取** 当前文件模块所属目录的绝对路径\n-  `__filename` **动态获取** 当前文件的绝对路径\n- `__dirname` 和 `__filename`  不受 node 命令所属路径影响\n\n### 使用前提\n\n在文件操作路径中，相对路径设计的就是相对于执行 node 命令所处的路径\n\n```js\nfs.readFile('./a.txt',function(...){...})\n-- 相对于执行 node 命令所处的终端路径\n```\n\n### 问题\n\n```js\n## ├─app.js\n## └─foo\n##    ├─a.txt\n##    └─index.js\n\nvar fs = require('fs')\nfs.readFile('./a.txt', function(err, data){\n    if (err) { throw err }\n    console.log(data)\n})\n--------------------------- index.js\n\nvar fooIndex = require('./foo/index')\n--------------------------- app.js\n\n// 在app.js 当前目录执行终端 则加载不到 a.txt \n```\n\n在文件操作中，使用相对路径是不可靠的，因为在 Node 中文操作的路径被设计为相对于执行 node 命令所处的路径。（不是 bug ）\n\n为了解决这个问题：把相对路径变为绝对路径即可\n\n### 解决\n\n可以使用 `__dirname` 或者 `__filename` 解决问题\n\n```js\nfs.readFile(__dirname + '/a.txt', function(err, data){\n    if (err) { throw err }   // node 执行中会把 / 转为 \\\n    console.log(data)\n})\n--------------------------- index.js\n```\n\n在拼接路径的过程中，为了避免手动拼接带来的低级错误，推荐多使用, `path.join()`来辅助拼接。\n\n```js\nfs.readFile(path.join(__dirname, './a.txt'), 'utf8', function(err, data){\n    if (err) { throw err }\n    console.log(data)\n})\n--------------------------- index.js\n```\n\n\n\n 为了尽量避免前面所描述的问题，以后文件操作中使用的相对路径都统一转换为 **动态的绝对路径**。\n\n\n\n> 补充： 模块中的路径标识和文件操作中的相对路径标识，不一样\n>\n> ​\t\t\t模块中的路径标识就是相对于当前文件模块就，不受执行 node 命令所处路径影响\n\n\n\n## Node_Express\n\n**原生的http在某些方面不足以应对我们对开发的需求，需要使用框架加快开发效率，框架的目的就是提高效率，让代码更高度统一。**\n\n**在 Node 中有很多web开发框架，Express是其中一种**     http://expressjs.com/\n\n\n\n### 起步\n\n#### 安装：\n\n```js\nnpm install --save express\n\n```\n\n\n\n#### hello world\n\n```js\nvar express = require('express')\n// 创建app   =>相当于 http.creataServer\nvar app = express()\napp.get('/', function(req, res) {\n  res.send('hello world')\n})\napp.listen(5000, function() {\n  console.log('express app is running...')\n})\n\n```\n\n\n\n#### 基本路由 router\n\n路由\n\n- 请求方法\n- 请求路径\n- 请求处理函数\n\nget：\n\n```js\n// 当以 get 方法请求 / 的时候，执行对应的处理函数 => 路由 / 映射关系\napp.get('/', function(req, res) {\n  res.send('hello world')\n})\n\n```\n\npost:\n\n```js\n// 当以 post 方法请求 / 的时候，执行对应的处理函数 => 路由 / 映射关系\napp.post('/', function(req, res) {\n  res.send('Got a POST request')\n})\n\n```\n\n重定向：\n\n```js\nres.redirect('/')\n\n```\n\n#### 静态服务\n\n```js\n## └─Project Directory\n##    └─public\n## \t\t\t └─main.js\n\n// 当以 /public/ 开头的时候 ，去 ./public/ 目录中 查找对应的资源\napp.use('/public/', express.static('./public/'))      ## 推荐\n--------\n## 访问路径：http://127.0.0.1:5000/public/main.js\n\n// 当省略第一个参数的时候，可以通过省略/public的方式来访问\napp.use(express.static('./public/'))\n--------\n## 访问路径：http://127.0.0.1:5000/main.js\n\n// /a 相当于 /public的别名\napp.use('/static/', express.static('./public/'))\n--------\n## 访问路径：http://127.0.0.1:5000/static/main.js\n\n\n```\n\n#### 在Express中获取表单 GET请求参数\n\nExpress内置了一个API，可以直接通过 `req.query` 来获取\n\n```js\nreq.query\n\n```\n\n#### 在Express中获取表单 POST 请求体数据\n\n在Express中没有内置获取表单 POST 请求体的API，需要主要使用第三方包：`body-parser` 中间件（插件，专门用来解析表单 post 请求体）\n\n安装：\n\n```js\nnpm install --save body-parser\n\n```\n\n配置：\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// 配置 body-parser\n// 加入这个配置后,则在 req 请求对象上会多出来一个属性： body\n// 通过 req.body 获取表单 POST 请求体数据\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n// parse application/json\napp.use(bodyParser.json())\n\n\n```\n\n使用：\n\n```js\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  // 可以通过 req.body 来获取表单 POST 请求体数据\n  res.end(JSON.stringify(req.body, null, 2))\n})\n\n```\n\n#### 其他方法\n\n##### Express 中的 json 方法\n\n- 该方法接收一个对象作为参数，自动把对象转为字符串，在发送给浏览器\n\n\n\n### 在Express中配置使用art-template模板引擎\n\n- [art-template - GitHub 仓库](https://github.com/aui/art-template)\n\n- [art-template - 官方文档](https://aui.github.io/art-template/zh-cn/index.html)\n\n#### 安装：\n\n```shell\nnpm install --save art-template\nnpm install --save express-art-template\n\n```\n\n#### 配置：\n\n```js\napp.engine('html', require('express-art-template'))\n\n```\n\n#### 使用：\n\n```js\napp.get('/', function(req, res) {\n  // express 默认会去项目中的 views 目录中找 index.html\n  // render方法 => 渲染文件 详解见说明\n  res.render('index.html', {\n     title: 'hello world'\n  })\n})\n\n```\n\n- 如果希望修改默认的 `views` 视图渲染存储目录\n\n  ```js\n  // 注意第一个参数 views 千万不能错\n  app.set('views', 目录路径)\n  \n  ```\n\n#### 说明:\n\n- **配置art-template 模板引擎**\n\n  ```js\n  app.engine('art', require('express-art-template'))\n  \n  ```\n\n  - 第一个参数表示：当渲染以 .art 结尾的文件的时候，使用 art-template 模板引擎\n    - 个人习惯 `app.engine('html', require('express-art-template'))`\n  - express-art-template 是专门用来在 Express 中 把 art-template 整合到 Express中\n  - 虽然这里不需要加载 art-template 但是也必须安装\n  - 原因是 express-art-template 依赖了 art-template\n\n- **使用art-template 模板引擎**\n\n  - Express 为 Response 相应对象提供了一个方法：render\n  - render 方法默认是不可以使用的，但是如果配置了模板引擎就可以使用了\n\n  ```js\n  res.render('html模板名', {模板数据})\n  \n  ```\n\n  - 第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件\n  - Express有个约定，开发人员把所有的视图文件都放到 views 目录中\n\n  ```js\n  app.get('/', function(req, res) {\n    res.render('index.html')// 若不需要模板引擎渲染，第二个参数不用传，直接渲染文件页面\n  })\n  \n  ```\n\n  - 若要访问 views 下目录中的文件，直接跳过 views/ 即可\n\n  ```js\n  ## └─ views\n  ##    └─ admin\n  ## \t\t\t └─ index.js\n  app.get('/admin', function(req, res) {\n    res.render('admin/index.html', {\n      title: 'index page'\n    })\n  })\n  \n  ```\n\n  \n\n### Express 中配置使用 Express-session\n\nexpress 中默认不支持 session 和 cookie，使用第三方中间件 `express-session`解决\n\n安装： \n\n`npm install express-session`\n\n配置：（必须在 app.use(router)之前）\n\n- 该插件会为 req 请求对象添加一个成员：`req.session`，默认是一个对象。\n\n```js\nvar session = require('express-session')\napp.use(session({\n  // 配置加密字符串，会在原有加密基础之上，和这个字符串拼起来去加密\n  // 目的为了增加安全性，防止客户端恶意伪造\n  secret: 'keyboard cat', \n  resave: false,\n  saveUninitialized: true // 无论是否使用 session ，默认直接分配一把钥匙（空 session ）\n  \t\t\t\t\t\t\t\t\t\t\t\t// false：存数据的时候才会分配钥匙\n}))\n```\n\n使用：\n\n- 可以通过 req.session 来发访问和设置 Session 成员\n  - 添加 session 数据：\n    - req.session.foo = 'bar'\n  - 获取 session 数据：\n    - req.session.foo\n  - 删除 session 数据：\n    - req.session.foo = null\n    - 更严谨的做法使用 `delete` 语法\n      - delete req.session.foo\n\n提示：默认Session 数据是内存存储的，服务器一旦存储就会丢失，真正的生产环境会把 Session 进行持久化存储。\n\n\n\n### 中间件\n\n http://expressjs.com/en/guide/using-middleware.html \n\n![1-130I0234953631](media/NodeJS. assets/1-130I0234953631.png)\n\n中间件的本质就是一个请求处理方法，把用户从请求到响应的整个过程分发到多个中间件中去处理，这样做的目的是提高代码的灵活性，动态可扩展。\n\n- 同一个请求所经过的中间件都是同一个请求对象和响应对象。\n\n#### 中间件匹配机制\n\n当请求进来，会从第一个中间件开始进行匹配\n\n- 如果匹配，则进来\n\n- 如果请求进入中间件之后，没有调用 next 则代码会停在当前中间件\n\n- 如果调用了 next 则继续向后找到第一个匹配的中间件\n\n- 如果不匹配，则继续判断匹配下一个中间件\n- 如果没有能匹配的中间件，则 Express 会默认输出：Cannot GET 路径\n\n#### 中间件类目\n\n##### 应用程序级别中间件\n\n万能匹配（不关心任何请求路径和请求方法）：\n\n```js\n// 中间件本身是一个方法，该方法接收三个参数：\n//    Request 请求对象\n//    Response 响应对象\n//    next     下一个中间件\n// 当一个请求进入一个中间件之后，如果不调用 next 则会停留在当前中间件\n// 所以 next 是一个方法，用来调用下一个中间件的\n// 调用 next 方法也是要匹配的（不是调用紧挨着的那个）\napp.use(function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\n```\n\n只要是以 `/xxx/` 开头的：\n\n```js\napp.use('/a', function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\n```\n\n##### 路由级别中间件\n\nget:\n\n```js\napp.get('/', function (req, res) {\n\tres.send('Hello World!')\n})\n```\n\npost:\n\n```js\napp.post('/', function (req, res) {\n\tres.send('Got a POST request')\n})\n```\n\nput:\n\n```js\napp.put('/user', function (req, res) {\n\tres.send('Got a PUT request at /user')\n})\n```\n\ndelete:\n\n```js\napp.delete('/user', function (req, res) {\n\tres.send('Got a DELETE request at /user')\n})\n```\n\n##### 错误处理中间件\n\n```js\napp.use(function (err, req, res, next) {\n\tconsole.error(err.stack)\n\tres.status(500).send('Something broke!')\n})\n```\n\n##### 内置中间件\n\n- [express.static](http://expressjs.com/en/4x/api.html#express.static) serves static assets such as HTML files, images, and so on.\n- [express.json](http://expressjs.com/en/4x/api.html#express.json) parses incoming requests with JSON payloads. **NOTE: Available with Express 4.16.0+**\n- [express.urlencoded](http://expressjs.com/en/4x/api.html#express.urlencoded) parses incoming requests with URL-encoded payloads. **NOTE: Available with Express 4.16.0+**\n\n##### 第三方中间件\n\n http://expressjs.com/en/guide/using-middleware.html \n\n-  [body-parser](http://expressjs.com/en/resources/middleware/body-parser.html) \n\n-  [compression](http://expressjs.com/en/resources/middleware/compression.html) \n-  [cookie-parser](http://expressjs.com/en/resources/middleware/cookie-parser.html) \n-  [morgan](http://expressjs.com/en/resources/middleware/morgan.html) \n-  [response-time](http://expressjs.com/en/resources/middleware/response-time.html) \n-  [serve-static](http://expressjs.com/en/resources/middleware/serve-static.html) \n-  [session](http://expressjs.com/en/resources/middleware/session.html) \n\n#### 中间件应用\n\n##### 配置处理 404 的中间件\n\n```js\n// 在项目入口文件的最后（app.listen之前）\napp.use(function(req, res) {\n  res.render('404.html')\n})\n```\n\n##### 配置全局处理中间件\n\n- 当调用 next 的时候，如果传递了参数，则直接往后找到带有 四个参数的应用程序级别中间件\n\n  ```js\n  // 在项目入口文件的最后（app.listen之前）\n  app.use(function (err, req, res, next) {\n    res.status(500).send(err.message)\n  })\n  ```\n\n- 当发生错误的时候，我们可以调用 next 传递错误对象\n\n  ```js\n  ···\n  if (err) {\n    return next(err) // 省去大量重复代码\n  }\n  ···\n  ```\n\n- 然后就会被全局错误处理中间件匹配到并处理之\n\n\n\n\n\n## crud案例\n\n### 模块化思想\n\n模块符合划分：\n\n- 模块职责要单一\n\n### 案例\n\n https://github.com/asnwer-zf/nodeText_express_crud \n\n\n\n## 异步编程\n\n### 回调函数：获取异步操作结果\n\n~~不成立情况：~~\n\n```js\nfunction add(x, y){\n    console.log(1)\n    setTimeout(function () {\n        console.log(2)\n        var ret = x + y\n        return ret\n    }, 1000)\n    console.log(3)\n    // 到这里执行结束，不会等到前面的定时器，所以直接返回默认值 undefined\n}\nconsole.log(add(10, 20)) // => undefined\n```\n\n~~不成立情况：~~\n\n```js\nfunction add(x, y){\n    var ret\n    console.log(1)\n    setTimeout(function () {\n        console.log(2)\n        var ret = x + y\n    }, 1000)\n    console.log(3)\n    return ret\n}\nconsole.log(add(10, 20)) // => undefined\n```\n\n**如果需要获取一个函数异步操作的结果，必须使用回调函数来获取**\n\n```js\nfunction add(x, y, callback){\n    // callback 就是回调函数\n    setTimeout(function () {\n        var ret = x + y\n       \tcallback(ret)  // ret -> 实参\n    }, 1000)\n}\nadd(10, 20, function (ret) {  // ret -> 形参\n    console.log(ret)\n}) \n```\n\n基于原生XMLHTTPRequest封装get 方法\n\n```js\nfunction get(url, callback) {\n  var oReq = new XMLHttpRequest()\n  // 当请求加载成功之后要调用指定的函数\n  oReq.onload = function () {\n    callback(oReq.responseText)\n  }\n  oReq.open(\"get\", url, true)\n  oReq.send()\n}\n\nget('data.json', function (data) {\n  console.log(data)\n})\n```\n\n\n\n- 异步API 一般都 伴随着回调函数(上层定义，下层调用)\n  - setTimeout\n  - readFile\n  - writeFile\n  - readdir\n  - ajax\n\n- a 链接默认是同步请求\n\n### Promise\n\n>  参考文档：http://es6.ruanyifeng.com/#docs/promise \n\n#### 前提\n\ncallbackhell：\n\n![callbackhell](media/NodeJS. assets/callbackhell.jpg)\n\n无法保证顺序的代码：\n\n```js\n\nvar fs = require('fs')\n\nfs.readFile('./data/a.txt', 'utf8', function (err, data) {\n  if (err) {\n    // return console.log('读取失败')\n    // 抛出异常（做测试的时候经常使用）\n    //    1. 阻止程序的执行 （程序奔溃直接退出）\n    //    2. 把错误消息打印到控制台\n    throw err\n  }\n  console.log(data)\n})\n\nfs.readFile('./data/b.txt', 'utf8', function (err, data) {\n  if (err) { throw err }\n  console.log(data)\n})\n\nfs.readFile('./data/c.txt', 'utf8', function (err, data) {\n  if (err) { throw err }\n  console.log(data)\n})\n\n```\n\n通过回调嵌套的方式来保证顺序：\n\n```js\n\nvar fs = require('fs')\n\nfs.readFile('./data/a.txt', 'utf8', function (err, data) {\n  if (err) { throw err }\n  console.log(data)\n  fs.readFile('./data/b.txt', 'utf8', function (err, data) {\n    if (err) { throw err }\n    console.log(data)\n    fs.readFile('./data/c.txt', 'utf8', function (err, data) {\n      if (err) { throw err }\n      console.log(data)\n    })\n  })\n})\n\n```\n\n为了解决以上编码方式带来的问题（回调地狱嵌套），在Ecamscript 6 中新增了一个API：`Promise`\n\n#### Promise基本语法\n\n- Promise  -  承诺、保证\n\n```js\n\nvar fs = require('fs')\n// promise是一个构造函数\n// 不是异步，但里面往往封装一个异步任务\n\n// 创建 Promise 容器\n// Promise 容器一旦创建，就开始执行里面的代码\nvar p1 = new Promise(function(resolve, reject) {\n  fs.readFile('./data/a.txt', 'utf8', function(err, data) {  ## 异步任务\n    if (err) {\n      // 承诺容器中的任务失败，\n      // console.log(err)\n      // 把容器中的 Pending 状态变为 rejected\n      // 调用 reject 就相当于调用了 then 方法的第二个参数\n      reject(err)  ## 失败调用\n    } else {\n      // 承诺容器中的任务成功，\n      // console.log(data)\n      // 把容器中的 Pending 状态变为 resolved\n      // 调用 resolve 就相当于调用了 then 方法的传递的那个function\n      resolve(data)  ## 成功调用\n    }\n  })\n})\n\n// 当 p1 成功了 然后（then） 做指定操作\n// then 方法接收的 function 就是容器中的 resolve 函数\np1.then(\n  function(data) {\n    console.log(data)\n  },\n  function(err) {\n    console.log(err)\n  }\n)\n\n```\n\n\n\n#### Promise的封装\n\n实例推导（ readFile ）\n\n- 异步调用链式编程\n\n```js\nvar fs = require('fs')\n\nvar p1 = new Promise(function(resolve, reject) {\n  fs.readFile('./data/a.txt', 'utf8', function(err, data) {\n    if (err) {\n      reject(err)\n    } else {\n      resolve(data)\n    }\n  })\n})\nvar p2 = /...\nvar p3 = /...\np1.then(\n  function(data) {\n    console.log(data)\n    // 当 p1 读取成功的时候\n    // 当前函数中 return 的结果就可以在后面的 then 中 function 接收到，故：\n    // 当 return 123 后面就接收到 123\n    // 没有 return 后面就接收的是 undefined\n    // 同理可以 return 一个 Promise 对象\n    // 当 return 一个Promise 对象的时候，后续的then中的 方法的第一个参数会作为p2 的 resolve\n    return p2\n  },\n  function(err) {\n    console.log(err)\n  }\n)\n  .then(function(data) {\n    console.log(data)\n    return p3\n  })\n  .then(function(data) {\n    console.log(data)\n    console.log('end')\n  })\n```\n\n\n\n![Snipaste_2019-10-19_15-40-57](media/NodeJS. assets/Snipaste_2019-10-19_15-40-57.jpg)\n\n\n\n=>  封装实例\tpromise\n\n```js\n\nvar fs = require('fs')\n\nfunction pReadFile(filePath) {\n  return new Promise(function(resolve, reject) {\n    fs.readFile(filePath, 'utf8', function(err, data) {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(data)\n      }\n    })\n  })\n}\npReadFile('./data/a.txt')\n  .then(function(data) {\n    console.log(data)\n    return pReadFile('./data/b.txt')\n  })\n  .then(function(data) {\n    console.log(data)\n    return pReadFile('./data/c.txt')\n  })\n  .then(function(data) {\n    console.log(data)\n  })\n\n```\n\n \n\n## 其他：\n\n### 修改完成代码自动重启\n\n**第三方命令行工具`nodemon`，可以解决频繁修改代码重启服务器问题**\n\n**`nodemon`是基于node.js开发的第三方命令行工具，需要独立安装**\n\n```shell\n## 所有需要用 --global 来安装的包都可以在任意目录执行\nnpm install --global nodemon\n```\n\n**安装完毕以后，使用**\n\n```shell\nnode app.js\n## 执行 nodemon 替换 node\nnodemon app.js\n```\n\n**通过 `nodemon` 启动的服务，会监视文件变化，当文件发生变化，自动重启服务器**\n\n### 文件操作中的 `/` 与模块标识中的 `/`\n\n- **文件标识中的路径可以省略 `./` **\n- **在模块加载中，相对路径中的 `./` 不能省略**\n\n### 快捷创建服务\n\n#### http-server\n\n##### 安装\n\n```shell\nnpm install -g http-server@0.9.0 ## 新版本报错\n```\n\n##### 启动\n\n```shell\nhs -c-l -o\n```\n\n#### json-server\n\n##### 安装\n\n```shell\nnpm install -g json-server\n```\n\n##### 启动\n\n```shell\njson-server --watch 文件名 \n```","source":"_posts/NodeJS.md","raw":"---\ntitle: NodeJS\ndate: 2019-11-02 08:54:39\ncategories:\n- Server\ntags:\n- NodeJS\ncomments: true\ndescription: 如果说我比别人看得更远些,那是因为我站在了各位大佬的肩上.\n---\n\n\n![pic](https://blog-1257820412.cos.ap-shanghai.myqcloud.com/title/half_year.jpg)\n\n<!-- more -->\n\n## Node.js 概述\n\n- Node.js 是JavaScript运行时环境\n\n- 可以解析执行JavaScript代码\n\n- 没有BOM 、DOM\n\n- 遵循EcmaScript\n\n- 为JavaScript提供了服务器级别的操作API\n\n- 构建与Chrome的V8引擎之上\n\n  - Google Chrome 中的V8引擎世界上公认的解析执行JavaScript代码最快的\n\n  - Node.js作者把Google Chrome 中的V8引擎移出来，开发了独立的JavaScript运行时环境\n\n  \n\n## Node.js 特性\n\n- event-driven 事件驱动\n\n- non-blocking I/O model 非阻塞IO模型（异步）\n\n- lightweight and efficient 轻量和高效\n\n\n\n## Node.js 功能\n\n- WEB服务器后台\n  - B/S编程模型（与语言无关）\n  - 模块化编程 （类似less  @import('文件路径')  引用加载文件）\n  - 异步编程\n    - promise\n    - async\n    - generator \n  \n  - Express Web开发框架\n  - Ecmascript 6\n  \n- 命令行工具\n  \n  - git\t（ C ）\n  - npm（ Node ）\n  - hexo（ Node ）\n\n\n\n## Node.js 基本操作\n\n\n\n### 执行文件\n\n```shell\n\n## 创建编写js脚本文件\n## 打开终端，定位到脚本文件所属目录\n## 输入node '文件名' 执行对应的文件  -- 文件名不能以node.js命名否则会打开这个文件\n\n$node begin.js\n\n```\n\n\n\n### 读取文件\n\n```js\n\n// 执行文件操作必须引入fs这个核心模块（file-system）\n// 使用 require 方法载入fs核心模块\n\nvar fs = require('fs')\n\nfs.readFile('url',function(error,data){   // URL：要读取的文件路径 （统一资源定位符）\n\tif(error){\n\t \tconsole.log('读取错误')\n        return\n    }\n    console.log(data.toString())\n})\n// 读取成功 error 返回 null   ，data 返回 数据\t\t\t\t\t\t\t\t\t\n// 读取失败 error 返回 错误对象，data 返回 undefined\n\n## ps: data 返回的数据是将文件存储的二进制数据 转为 十六进制数据，展现\n##\t   可以用 toString 方法转为 字符串\n\n## readFile 的第二个参数是可选的，传入 utf8 就是告诉他把读取到的文件直接按照 utf8 编码转成字符串\n## 等价于 data.toString()\n```\n\n\n\n### 读取目录\n\n```javascript\n\nvar fs = require('fs')\nfs.readdir('url', function(err, files) {  // files: 返回数组\n  if (err) {\n    res.end(err.message) // err对象 中有一个属性 message \n    return\n  }\n  console.log(files)  \n})\n\n```\n\n\n\n### 写入文件\n\n```js\n\nvar fs = require('fs')\nfs.writeFile('url','content',function(error){ // content: 写入文件内容   error: 形参\n     if(error){\n\t\tconsole.log('写入失败')\n     }else{\n        console.log('写入成功')\n     }\n})\n\n## 写入成功 error 返回 null\n## 写入失败 error 返回 错误对象\n\n```\n\n\n\n### 创建服务器\n\n```javascript\n\n// Node中有一个核心模块 http ,职责创建编写服务器\n\n// 加载http核心模块\nvar http = require('http')\n\n// 使用http.createServer() 方法创建web服务    ## 返回一个Server实例\nvar server = http.createServer()\n\n// 接受请求\n// 处理请求\n// 返回响应\n\n// 注册 request 请求事件\n// 当客户端请求时，自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数 \nserver.on('request', function(request,response){\n    console.log('收到请求,请求路径' + request.url) \n    response.write('hello')\n    response.write(' node.js')\n    response.end()\n  \t// 简化\n  \tresponse.end('hello node.js')\n})\n\n## request  请求事件处理函数，需接收两个参数：\n## Request  请求对象（获取客户端请求信息：如请求路径）\n\t\t\t\t\t\t## req.url 获取端口号以后的路径，所有url都是以 / 开头的 默认为 /\n## Response 响应对象（给客户端发送响应信息）有 writer方法 ：给客户端发送响应数据\n\t\t\t\t\t\t## writer方法 ：给客户端发送响应数据\n            ## write 可以使用多次，但是最后一定要使用end结束响应，否则客户端会一直等待。\n            ## 简化操作 直接end的同时发送响应数据 response.end('str')\n            ## response.end()支持两种数据类型：二进制 字符串\n            \n## response.end()\t一次请求对应一次响应，响应结束这次请求也结束  不执行后续代码  类似return\n## response.end() 必须存在\n\n// 绑定端口号，启动服务器。\n\nserver.listen(3000,function(){\n    console.log('服务器启动成功，可以通过 http://127.0.0.1:3000/，进行访问')\n})\n\n// 此时终端被服务占用，关闭终端即关闭服务器（X掉，或者 Ctrl+c 终止），有响应便返回响应\n\n```\n\n\n\n#### - 创建服务简写\n\n```js\n\nhttp\n\t\t.createServer(function (req, res) {\n  \n\t\t})\n\t\t.listen(3000,function () {\n  \t\tconsole.log('Server is running')\n\t\t})\n```\n\n\n\n### 获取路径\n\n- 采用URL模块，获取\n\n```js\n\nvar url = require('url')\n\nvar obj =url.parse('http://127.0.0.1:3000/post?name=fasdf&mes= asdf', true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// true： 可以让里面的query 将所传入的参数转为对象\nconsole.log(obj)\n\n------------------------------------------\n$\n  protocol: 'http:',\t// 协议\n  slashes: true,\n  auth: null,\n  host: '127.0.0.1:3000',  \n  port: '3000',\t// 端口号\n  hostname: '127.0.0.1',\t// 主机名\n  hash: null,\n  search: '?name=fasdf&mes=%20asdf',\t// 查询字符串（ GET参数 ）\n  query: [Object: null prototype] { name: 'fasdf', mes: ' asdf' },\n  pathname: '/post',\n  path: '/post?name=fasdf&mes=%20asdf',\n  href: 'http://127.0.0.1:3000/post?name=fasdf&mes=%20asdf' }\n```\n\n\n\n\n\n## Node.js 中 的 JavaScript\n\n- EcmaScript\n- 核心模块\n- 第三方模块\n- 用户自定义模块\n\n### 核心模块\n\nNode为JavaScript提供了很多服务器级别的API，而且这些API绝大多数都被包装到了一个具名的核心模块中。他们都有自己特殊的名称标识，若要使用这些模块，必须用  ***require***  加载模块。\n\n- 文件操作的核心模块：fs\n- 服务构建的核心模块：http\n- 路径处理的核心模块：path\n- 路径操作的核心模块：url\n- 操作系统信息的核心模块：os\n- ...\n\n\n\n```javascript\n\nvar path = require('path')\nconsole.log(path.extname('url'))\n\n// 返回扩展名 .txt\n```\n\n\n\n### 用户定义模块\n\n#### require  方法\n\n​\t**用来加载模块，并执行里面的代码**（ 可加载执行多个JavaScript脚本文件 ）\n\n​    **拿到被加载文件模块导出的接口对象**\n\n\n\n- node中模块分三种\n\n  - 具名的核心模块 （ fs 、http ...）\n\n  - 用户编写的文件模块\n\n    ​    相对路径必须加 ./ 或 ../    （ ./ 不能省略，否则报错）\n\n    ​\t可以省略后缀名\n\n  - 第三方模块\n\n    \n\n    ```js\n    console.log('a.js => stat')\n    require('./b')\n    console.log('a.js => end')\n    ```\n\n    \n\n- node中没有全局作用域，只有模块作用域（即文件作用域）\n\n  - 模块是完全封闭的\n    - 文件与文件之间可以完全避免变量命名冲突、污染问题\n    - 外部访问不到内部，内部访问不到外部\n\n\n\n#### exports 对象\n\n**每个文件模块都提供了  *exports*  对象 （ 默认是空对象 ）**\n\n- 由于node只有模块作用域，想要做到模块间通信需要用到  ***exports***\n\n- 把需要被外部访问的成员手动挂载到 ***exports*** 接口对象中\n\n- 多次在 **exports** 添加成员，实现对外导出多个内部成员\n\n- 哪个文件 ***require*** 这个的模块，就可以得到模块内部的   ***exports***  接口对象\n\n  - 即：***require***  的返回值\n  \n  ```javascript\n  \n  ## └─ducument\n  ##    ├─a.js\n  ##    └─b.js\n  \n  ## ----  b.js content\n  \n  var foo = '1231234'\n  exports.foo = foo\n  \n  exports.add = function (x, y) {\n      return x + y\n  }\n  \n  ------------------------------------------\n  \n  ## ----  a.js content\n  \n  var bExports = require('./b')\n  console.log(bExports.foo)\n  console.log(bExports.add(10, 210))\n  \n  ```\n\n- 一个模块需要直接导出某个成员，而非挂载的方式必须使用\n\n  `module.exports = add`\n\n  - add 可为 function，string， array。。都可以\n\n\n## Web 服务端开发\n\n\n\n### IP地址  与  端口号\n\n\n\n- 所有联网的程序都要进行网络通信\n\n- 计算机中只有一个物理网卡，且同一个局域网中的网卡地址必须唯一。\n\n- 网卡是通过唯一的ip地址进行定位\n\n\n\n**IP 地址用来定位计算机**\n\n**端口号用来定位应用程序**\n\n- 所有需要网络通信的软件都必须有端口号\n- 端口号使用范围 0 ~ 65536 之间\n- 计算机中有一些默认端口号 尽量不去使用 ex : 80 ..\n- 一台计算机，同一个端口号在同一时间，只能被一个 \n- Node.js 可以开启多个服务，但是一定确保不同服务占用不同端口号\n\n\n\n### Content-Type\n\n- 服务端发送的数据默认，是utf-8编码的\n\n- 浏览器在不知道服务器响应内容的编码的情况下，会按照当前操作系统默认的编码去解析\n  - 中文操作系统默认编码是 GBK\n  - 在http协议中 Content-Type是用来告知，对方给你发送数据内容的数据类型\n  - 图片不需要指定编码，常说的编码一般指的是：字符编码，一般只为字符数据指定编码\n\n- **通过设置响应头的方式设置Content-Type的方式解决乱码问题**\n\n  ```js\n  \n  server.on('request', function(req, res){\n      res.setHeader('Content-Type','text/plain; charset=utf-8')\n      res.end('hello 世界')\n  })\n  \n  ```\n\n  - 服务器最好把每次响应的数据是什么内容类型 ，正确的告诉客户端\n  - 不同的资源对应的 Content-Type 是不一样，具体参照：http://tool.oschina.net/commons\n  - 对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题\n\n  \n\n- 除了用 Content-Type 指定编码，也可以在HTML页面，通过meta元数据（用来 描述、特征、信息，存储内容的数据）来声明当前文本的编码格式\n\n\n\n### 请求与响应\n\n- 当浏览器收到HTML的响应内容以后，开始从上到下一次解析，\n- 在解析过程中若发现\n  - link\n  - script\n  - img\n  - iframe\n  - video\n  - audio\n\n- 等带有src href属性标签的时候，浏览器会自动对这些资源发起新的请求\n\n  \n\n### 统一资源管理\n\n- 为了方便统一处理静态资源，顾将静态资源存放在同一位置\n- 通过代码灵活控制那些资源能被访问，那些资源不允许访问\n\n```js\n\nvar http = require('http')\nvar fs = require('fs')\nhttp\n  .createServer(function(req, res) {\n    var url = req.url\n    if (url === '/') {\n      fs.readFile('./view/index.html', function(err, data) {\n        if (err) {\n          res.end('404 Not Found')\n          return\n        }\n        res.end(data)\n      })\n    } else if (url.indexOf('/public/') === 0) {   // public 开启访问权限\n      fs.readFile('.' + url, function(err, data) {\n        if (err) {\n          res.end('404 Not Found')\n          return\n        }\n        res.end(data)\n      })\n    }\n  })\n  .listen(3000, function() {\n    console.log('Server is running')\n  })\n\n```\n\n- 上个实例，只有public目录可以提供访问，灵活控制访问资源\n\n  \n\n### 服务器重定向\n\n- 状态码设置 302临时重定向\n\n  - 301为永久重定向 浏览器会记住\n  - a  => b ,下次请求a，不经过a 直接到b\n  - 302为临时重定向 浏览器会记住\n    - a  => b ,下次继续请求a，a  => b\n  - response.statusCode = 302\n- 响应头中通过 Location告诉客户端往哪重定向\n\n  - response.setHeader( 'Location',  '/' )\n- 客户端发现收到的服务器的响应状态码是302，会自动在响应头中找 Location，然后对改地址发起新的请求。\n- 客户端自动跳转\n\n\n\n## Node中的模块系统\n\n\n\n### 前 提\n\n- 使用Node编写应用程序主要是使用\n  - EcamScript 语言\n  - 核心模块\n  - 第三方模块\n  - 用户自定义模块\n\n### 模块化\n\n- 文件作用域\n\n- 通信规则\n\n  - 加载\n\n  - 导出\n\n    \n\n### CommonJS模块规范\n\nJavaScript本身并不支持模块化 在Node中不仅支持，还有一个很重要的概念  **模块系统**\n\n- 模块作用域\n  - 默认模块中任何内容不能被外部访问\n- 使用require方法加载模块\n- 使用exports接口对象导出模块中的成员\n\n#### 加载  `require`\n\n##### 语法：\n\n```js\nvar custom = require('module')\n```\n\n##### 作用：\n\n1. 执行被加载模块中代码\n2. 得到被加载模块中的  `exports`  导出接口对象\n\n##### 加载规则：\n\n模块查找机制：优先从缓存加载\t=>  核心模块  =>  路径形式文件模块  =>  第三方模块\n\n###### 优先从缓存加载\n\n- 优先从缓存加载，不会重复加载，目的是为了避免重复加载，提高模块加载效率\n\n- 可以拿到其中的接口对象，但是不会重复执行里面的代码\n\n  ```js\n  ## └─ducument\n  ##    ├─a.js\n  ##    ├─b.js\n  ##    └─main.js\n  \n  ## ----  main.js content\n  \n  require('./a')\n  var fn = require('./b')\n  console.log(fn)\n  ----------------------------------\n  \n  ## ----  a.js content\n  \n  console.log('a.js 被加载了')\n  var fn = require('./b')\n  console.log(fn)\n  ----------------------------------\n  \n  ## ----  b.js content\n  \n  console.log('b.js 被加载了')\n  module.exports = function () {\n    console.log('hello bbb')\n  }\n  ----------------------------------\n  \n  ## ----\t main.js输出结果\n  a.js 被加载了\n  b.js 被加载了\n  [Function]\n  [Function]\n  ```\n\n  \n\n###### 判断模块模块标识(符)\n\n**require('模块标识')**\n\n- 核心模块\n  - 本质：文件。\n  - 已被编译到了二进制文件中，只需要按名字加载即可\n  - 模块标识 ：模块名\n- 第三方模块\n  - 凡是第三方模块必须通过npm下载，通过require('包名')进行加载使用\n  - 不可能有一个第三方包 与 核心模块 重名\n  - 模块标识 ：模块名\n- 用户模块\n  - 模块标识 ：路径\n\n\n\n**路径形式的模块**：\n\n- .js     后缀名可以省略\n- ./      当前目录 （不可省略）\n- ../     上一级目录 （不可省略）\n- /xxx\t绝对路径 ( 首位的  / 表示当前文件模块所属磁盘根路径)  ==>  几乎不用\n- d:/xxxx  绝对路径   ==>  几乎不用 \n\n**既不是核心模块，也不是路径形式的模块**\n\n1. 模块加载规则\n   - 先找到当前文件所属目录中的 `node_modules` 目录    ( 以art-template 为例 )\n   - == >     node_modules/art-template\n   - == >     node_modules/art-template/package.json 文件\n   - == >     node_modules/art-template/package.json 文件中的 main 属性\n   - main属性记录了art-template的入口模块 \n   - 加载使用art-template\n   - 实际上最终加载的还是文件\n2. 特殊情况\n   - 如果 package.json 文件不存在或者 main指定的入口模块也没有，则 node 会找该目录下的 index.js\n     - index.js 会作为默认备选项\n   - 若所述所有条件均不成立，则会进人上一级目录中的 node_modules 目录执行查找\n   - 若上一级还没有，则继续往上上一级查找\n   - 。。。\n   - 如果直到当前磁盘根目录还找不到，最后报错  `can not find module xxx` \n\n**在项目中有且只有一个 `node_modules` ，不会出现多个**\n\n**位置：放在项目根目录中，这样项目中所有子目录中的代码都可以加载第三方包**\n\n#### 导出 `exports`\n\n- Node中是模块作用域，默认文件中所有成员只在当前文件模块有效\n\n- 想要做到模块间通信需要用到  `exports` ，把需要被外部访问的成员手动挂载到 `exports` 接口对象中\n\n  - 导出多个成员（必须在对象中）：\n\n    - 多次在 `exports` 添加成员，实现对外导出多个内部成员\n\n      ```js\n      exports.a = 123\n      exports.b = 'string'\n      exports.c =\tfunction(){\n        console.log('string')\n      }\n      exports.d = {\n        foo = 'bar'\n      }\n      ```\n\n  - 导出单个成员（拿到的是函数、字符串、数组。。。）：\n\n    - 一个模块需要直接导出单个成员，而非挂载的方式必须使用\n\n      ```js\n      module.exports = 'string'\n      ```\n\n      ```js\n      module.exports = function (x, y) {\n        return x + y\n      }\n      ```\n\n    - 若重复使用，则后者覆盖前者\n\n    - 也可以用 `module.exports =` 的操作导出多个成员\n\n      ```js\n      module.exports = {\n       add: function(x, y){\n         return x + y\n       },\n       str: 'string'\n      }\n      ```\n\n  \n\n##### 原理\n\n- 在Node 中，每一个模块内部都有一个自己的 `module` 对象\n\n- 该 `module` 对象中，有一个成员叫： `exports` 也是一个对象（ 默认为空 ）\n\n- 若需要对外导出成员，只需要把导出的成员挂载到 `module.exports` 中\n\n- 由于每次导出接口成员的时候都通过 `module.exports.xxx = xxx` 比较麻烦，node为了简化操作专门提供一个变量 `exports`  等价于  `module.exports`  \n\n  ```js\n  console.log(exports === module.exports)\t// => true\n  exports.foo = 'bar'\n  //等价于\n  module.exports.add = 'bar'\n  ```\n\n  固（混搭）：\n\n  ```js\n  exports.foo = 'bar'\n  module.exports.add = function (x, y) {\n    return x + y\n  }\n  -------------------\n  // require结果\n  { foo: 'bar', add: [Function] }\n  ```\n\n- 当一个模块需要导出单个成员的时候\n\n  - 不能使用：` exports = 'string' ` \n\n    - `exports` 仅仅只是 `module.exports`  的引用,底层最后的代码是：\n      - `var exports = module.exports`\n      - `return module.exports`\n    - 重新赋值不再指向 `module.exports` , 便丢失了引用关系 \n    - 只是快捷方式，可以忽略\n\n  - 只能使用：`module.exports = 'string'`\n\n    - 重新赋值以后 `exports` 便直接失效。\n\n      1. 底层代码：`return module.exports`\n      2. 将对象赋值给变量，所存放的是地址\n\n      ```js\n      module.exports = 'string'\n      exports.foo = 'bar'\n      -------------\n      // require结果\n      'string'\n      ```\n\n      \n\n##### 底层代码模拟\n\n```js\nvar module = {\n\texports: { \n\t},\n  ...\n}\n// 哪个文件 require 这个的模块，就可以得到 module.exports\n// 在node最底层\n// 还有一句\nvar exports = module.exports\n// 默认在代码的最后 ：\nreturn module.exports\n```\n\n\n\n### npm\n\n**node package manager**\n\n#### npm 网站\n\nnpmjs.com\n\n#### npm 命令行工具\n\n只要安装了node ,就安装了npm\n\nnpm也有版本概念\n\n```shell\nnpm --version     ## 查看版本\n```\n\n```shell\nnpm install --global npm     ## 升级npm\n```\n\n#### npm 常用命令\n\n- npm init [--yes]\n  - npm init -y 跳过向导，快速生成\n- npm install\n  - 一次性把 dependencies 选项中的依赖项全部安装\n  - npm i \n- npm install 包名\n  - 只下载\n  - npm i 包名\n- npm install 包名 --save\n  - 下载并保存依赖项（ package.json 文件中的 dependencies 选项）\n  - npm i -S 包名\n- npm uninstall 包名\n  - 只删除，如果有依赖项会依然保存\n  - npm un 包名\n- npm uninstall --save 包名\n  - 删除的同时也会把依赖信息也去除\n  - npm un -S 包名\n- npm help \n  - 查看使用帮助\n- npm 命令 --help\n  - 查看指定命令的使用帮助\n\n#### 解决npm被墙问题\n\nnpm存储包文件的服务器在国外，有时候会被墙，速度很慢\n\nhttps://npm.taobao.org/ 淘宝的开发团队，把npm在国内做了备份\n\n步骤：\n\n1. 安装淘宝的cnpm：\n\n   ```shell\n   npm install --global cnpm\n   ## --global表示安装到全局，而非当前目录\n   ## 这条命令中 --global不能省略\n   ## 所有需要用 --global 来安装的包都可以在任意目录执行\n   ```\n\n2. 安装时包时将`npm` 替换成 `cnpm`\n\n   ```shell\n   # 这里还是走国外的npm服务器，速度比较慢\n   npm install jquery\n   # 使用 cnpm 通过淘宝的服务器下载\n   cnpm install jquery\n   ```\n\n3. 如果不想安装 cnpm 又想使用淘宝的服务器来下载\n\n   ```shell\n   npm install jquery --registry=https://registry.npm.taobao.org\n   ```\n\n   - 每次手动加参数过于繁琐，可以把这个选项加入配置文件中：\n\n     ```shell\n     npm config set registry https://registry.npm.taobao.org\n     \n     ## 查看npm配置信息\n     npm config list\n     ```\n\n   - 只要经过上面命令配置，以后所有的` npm install` 都会默认通过淘宝服务器来下载\n\n\n\n\n\n### package.json\n\n- 每个项目的根目录下都要有一个 package.json 文件 （包描述文件）\n\n- 执行`npm install` 包名的时候都加上 --save，用来 保存依赖项信息\n\n- package.json 可以通过 `npm init `的方式自动初始化出来\n  - `dependencies` 选项，保存第三方包的依赖信息\n- 若删除了node_modules 文件夹，且package.json 存在\n  -  直接使用 `npm install` 找回\n     - `npm install` 自动把package.json 中的dependencies 中所有的依赖项，都下载回来.\n\n#### package.json 和 package-lock.json\n\nnpm5 以前是不会有 `package-lock.json` 这个文件的\n\nnpm5以后才加入的\n\n当你安装包的时候，npm 都会生成或者更新 `package-lock.json` 这个文件\n\n- npm5以后的版本安装包，不需要加 `--save` 参数，他会自动保存依赖信息\n- 当安装包的时候，会自动创建或者是更新 `package-lock.json` 这个文件\n- `package-lock.json` 会保存 `node_modules` 中所有包的信息（版本、下载地址）\n  - 这样的话重新 `npm install` 的时候速度就可以提升\n- 从文件看来，有一个 `lock` 称之为 锁\n- 这个`lock` 是用来锁定版本的\n- 如果项目依赖1.1.1版本\n- 你重新install 其实会下载最新版本，而不是1.1.1\n- 我们的目的希望可以锁住1.1.1这个版本\n- `package-lock.json`这个文件的另一个作用就是锁定版本号，防止自动升级到最新版本\n\n## path路径操作模块\n\n> 参考文档： https://nodejs.org/dist/latest-v12.x/docs/api/path.html \n\n### 常用API：\n\n- path.basename\n  \n  - 获取一个路径的文件名（默认包含扩展名）\n- path.dirname\n  \n  - 获取一个路径中的目录部分\n- path.extname\n  \n  - 获取一个路径中的扩展名部分\n- path.parse\n  - 把一个路径转为对象\n    - root 根路径\n    - dir 目录\n    - base 包含后缀名的文件名\n    - ext 后缀名\n    - name 不包含后缀名的文件名\n\n- path.isAbsolute \n\n  - 判断一个路径是不是绝对路径\n\n- path.join()\n\n  - 作用：拼接路径\n  - 参数可以为任意，多写或者少写 `/` 不影响\n\n  ```js\n  \n  path.join('c:/a', 'b')\n  -- 'c:\\\\a\\\\b'\n  \n  path.join('c:/a', '/b', 'c/', './f')\n  -- 'c:\\\\a\\\\b\\\\c\\\\f'\n  \n  ```\n\n\n\n\n![Snipaste_2019-10-20_15-29-18](C:\\Users\\answer_zf\\Desktop\\Snipaste_2019-10-20_15-29-18.png)\n\n\n\n## Node 中的其他成员\n\n在每个模块中，出来 `require` 、`exports`等模块相关API之外，还有两个特殊的成员：\n\n-  `__dirname` **动态获取** 当前文件模块所属目录的绝对路径\n-  `__filename` **动态获取** 当前文件的绝对路径\n- `__dirname` 和 `__filename`  不受 node 命令所属路径影响\n\n### 使用前提\n\n在文件操作路径中，相对路径设计的就是相对于执行 node 命令所处的路径\n\n```js\nfs.readFile('./a.txt',function(...){...})\n-- 相对于执行 node 命令所处的终端路径\n```\n\n### 问题\n\n```js\n## ├─app.js\n## └─foo\n##    ├─a.txt\n##    └─index.js\n\nvar fs = require('fs')\nfs.readFile('./a.txt', function(err, data){\n    if (err) { throw err }\n    console.log(data)\n})\n--------------------------- index.js\n\nvar fooIndex = require('./foo/index')\n--------------------------- app.js\n\n// 在app.js 当前目录执行终端 则加载不到 a.txt \n```\n\n在文件操作中，使用相对路径是不可靠的，因为在 Node 中文操作的路径被设计为相对于执行 node 命令所处的路径。（不是 bug ）\n\n为了解决这个问题：把相对路径变为绝对路径即可\n\n### 解决\n\n可以使用 `__dirname` 或者 `__filename` 解决问题\n\n```js\nfs.readFile(__dirname + '/a.txt', function(err, data){\n    if (err) { throw err }   // node 执行中会把 / 转为 \\\n    console.log(data)\n})\n--------------------------- index.js\n```\n\n在拼接路径的过程中，为了避免手动拼接带来的低级错误，推荐多使用, `path.join()`来辅助拼接。\n\n```js\nfs.readFile(path.join(__dirname, './a.txt'), 'utf8', function(err, data){\n    if (err) { throw err }\n    console.log(data)\n})\n--------------------------- index.js\n```\n\n\n\n 为了尽量避免前面所描述的问题，以后文件操作中使用的相对路径都统一转换为 **动态的绝对路径**。\n\n\n\n> 补充： 模块中的路径标识和文件操作中的相对路径标识，不一样\n>\n> ​\t\t\t模块中的路径标识就是相对于当前文件模块就，不受执行 node 命令所处路径影响\n\n\n\n## Node_Express\n\n**原生的http在某些方面不足以应对我们对开发的需求，需要使用框架加快开发效率，框架的目的就是提高效率，让代码更高度统一。**\n\n**在 Node 中有很多web开发框架，Express是其中一种**     http://expressjs.com/\n\n\n\n### 起步\n\n#### 安装：\n\n```js\nnpm install --save express\n\n```\n\n\n\n#### hello world\n\n```js\nvar express = require('express')\n// 创建app   =>相当于 http.creataServer\nvar app = express()\napp.get('/', function(req, res) {\n  res.send('hello world')\n})\napp.listen(5000, function() {\n  console.log('express app is running...')\n})\n\n```\n\n\n\n#### 基本路由 router\n\n路由\n\n- 请求方法\n- 请求路径\n- 请求处理函数\n\nget：\n\n```js\n// 当以 get 方法请求 / 的时候，执行对应的处理函数 => 路由 / 映射关系\napp.get('/', function(req, res) {\n  res.send('hello world')\n})\n\n```\n\npost:\n\n```js\n// 当以 post 方法请求 / 的时候，执行对应的处理函数 => 路由 / 映射关系\napp.post('/', function(req, res) {\n  res.send('Got a POST request')\n})\n\n```\n\n重定向：\n\n```js\nres.redirect('/')\n\n```\n\n#### 静态服务\n\n```js\n## └─Project Directory\n##    └─public\n## \t\t\t └─main.js\n\n// 当以 /public/ 开头的时候 ，去 ./public/ 目录中 查找对应的资源\napp.use('/public/', express.static('./public/'))      ## 推荐\n--------\n## 访问路径：http://127.0.0.1:5000/public/main.js\n\n// 当省略第一个参数的时候，可以通过省略/public的方式来访问\napp.use(express.static('./public/'))\n--------\n## 访问路径：http://127.0.0.1:5000/main.js\n\n// /a 相当于 /public的别名\napp.use('/static/', express.static('./public/'))\n--------\n## 访问路径：http://127.0.0.1:5000/static/main.js\n\n\n```\n\n#### 在Express中获取表单 GET请求参数\n\nExpress内置了一个API，可以直接通过 `req.query` 来获取\n\n```js\nreq.query\n\n```\n\n#### 在Express中获取表单 POST 请求体数据\n\n在Express中没有内置获取表单 POST 请求体的API，需要主要使用第三方包：`body-parser` 中间件（插件，专门用来解析表单 post 请求体）\n\n安装：\n\n```js\nnpm install --save body-parser\n\n```\n\n配置：\n\n```js\nvar express = require('express')\nvar bodyParser = require('body-parser')\n\nvar app = express()\n\n// 配置 body-parser\n// 加入这个配置后,则在 req 请求对象上会多出来一个属性： body\n// 通过 req.body 获取表单 POST 请求体数据\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n// parse application/json\napp.use(bodyParser.json())\n\n\n```\n\n使用：\n\n```js\napp.use(function (req, res) {\n  res.setHeader('Content-Type', 'text/plain')\n  res.write('you posted:\\n')\n  // 可以通过 req.body 来获取表单 POST 请求体数据\n  res.end(JSON.stringify(req.body, null, 2))\n})\n\n```\n\n#### 其他方法\n\n##### Express 中的 json 方法\n\n- 该方法接收一个对象作为参数，自动把对象转为字符串，在发送给浏览器\n\n\n\n### 在Express中配置使用art-template模板引擎\n\n- [art-template - GitHub 仓库](https://github.com/aui/art-template)\n\n- [art-template - 官方文档](https://aui.github.io/art-template/zh-cn/index.html)\n\n#### 安装：\n\n```shell\nnpm install --save art-template\nnpm install --save express-art-template\n\n```\n\n#### 配置：\n\n```js\napp.engine('html', require('express-art-template'))\n\n```\n\n#### 使用：\n\n```js\napp.get('/', function(req, res) {\n  // express 默认会去项目中的 views 目录中找 index.html\n  // render方法 => 渲染文件 详解见说明\n  res.render('index.html', {\n     title: 'hello world'\n  })\n})\n\n```\n\n- 如果希望修改默认的 `views` 视图渲染存储目录\n\n  ```js\n  // 注意第一个参数 views 千万不能错\n  app.set('views', 目录路径)\n  \n  ```\n\n#### 说明:\n\n- **配置art-template 模板引擎**\n\n  ```js\n  app.engine('art', require('express-art-template'))\n  \n  ```\n\n  - 第一个参数表示：当渲染以 .art 结尾的文件的时候，使用 art-template 模板引擎\n    - 个人习惯 `app.engine('html', require('express-art-template'))`\n  - express-art-template 是专门用来在 Express 中 把 art-template 整合到 Express中\n  - 虽然这里不需要加载 art-template 但是也必须安装\n  - 原因是 express-art-template 依赖了 art-template\n\n- **使用art-template 模板引擎**\n\n  - Express 为 Response 相应对象提供了一个方法：render\n  - render 方法默认是不可以使用的，但是如果配置了模板引擎就可以使用了\n\n  ```js\n  res.render('html模板名', {模板数据})\n  \n  ```\n\n  - 第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件\n  - Express有个约定，开发人员把所有的视图文件都放到 views 目录中\n\n  ```js\n  app.get('/', function(req, res) {\n    res.render('index.html')// 若不需要模板引擎渲染，第二个参数不用传，直接渲染文件页面\n  })\n  \n  ```\n\n  - 若要访问 views 下目录中的文件，直接跳过 views/ 即可\n\n  ```js\n  ## └─ views\n  ##    └─ admin\n  ## \t\t\t └─ index.js\n  app.get('/admin', function(req, res) {\n    res.render('admin/index.html', {\n      title: 'index page'\n    })\n  })\n  \n  ```\n\n  \n\n### Express 中配置使用 Express-session\n\nexpress 中默认不支持 session 和 cookie，使用第三方中间件 `express-session`解决\n\n安装： \n\n`npm install express-session`\n\n配置：（必须在 app.use(router)之前）\n\n- 该插件会为 req 请求对象添加一个成员：`req.session`，默认是一个对象。\n\n```js\nvar session = require('express-session')\napp.use(session({\n  // 配置加密字符串，会在原有加密基础之上，和这个字符串拼起来去加密\n  // 目的为了增加安全性，防止客户端恶意伪造\n  secret: 'keyboard cat', \n  resave: false,\n  saveUninitialized: true // 无论是否使用 session ，默认直接分配一把钥匙（空 session ）\n  \t\t\t\t\t\t\t\t\t\t\t\t// false：存数据的时候才会分配钥匙\n}))\n```\n\n使用：\n\n- 可以通过 req.session 来发访问和设置 Session 成员\n  - 添加 session 数据：\n    - req.session.foo = 'bar'\n  - 获取 session 数据：\n    - req.session.foo\n  - 删除 session 数据：\n    - req.session.foo = null\n    - 更严谨的做法使用 `delete` 语法\n      - delete req.session.foo\n\n提示：默认Session 数据是内存存储的，服务器一旦存储就会丢失，真正的生产环境会把 Session 进行持久化存储。\n\n\n\n### 中间件\n\n http://expressjs.com/en/guide/using-middleware.html \n\n![1-130I0234953631](media/NodeJS. assets/1-130I0234953631.png)\n\n中间件的本质就是一个请求处理方法，把用户从请求到响应的整个过程分发到多个中间件中去处理，这样做的目的是提高代码的灵活性，动态可扩展。\n\n- 同一个请求所经过的中间件都是同一个请求对象和响应对象。\n\n#### 中间件匹配机制\n\n当请求进来，会从第一个中间件开始进行匹配\n\n- 如果匹配，则进来\n\n- 如果请求进入中间件之后，没有调用 next 则代码会停在当前中间件\n\n- 如果调用了 next 则继续向后找到第一个匹配的中间件\n\n- 如果不匹配，则继续判断匹配下一个中间件\n- 如果没有能匹配的中间件，则 Express 会默认输出：Cannot GET 路径\n\n#### 中间件类目\n\n##### 应用程序级别中间件\n\n万能匹配（不关心任何请求路径和请求方法）：\n\n```js\n// 中间件本身是一个方法，该方法接收三个参数：\n//    Request 请求对象\n//    Response 响应对象\n//    next     下一个中间件\n// 当一个请求进入一个中间件之后，如果不调用 next 则会停留在当前中间件\n// 所以 next 是一个方法，用来调用下一个中间件的\n// 调用 next 方法也是要匹配的（不是调用紧挨着的那个）\napp.use(function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\n```\n\n只要是以 `/xxx/` 开头的：\n\n```js\napp.use('/a', function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\n```\n\n##### 路由级别中间件\n\nget:\n\n```js\napp.get('/', function (req, res) {\n\tres.send('Hello World!')\n})\n```\n\npost:\n\n```js\napp.post('/', function (req, res) {\n\tres.send('Got a POST request')\n})\n```\n\nput:\n\n```js\napp.put('/user', function (req, res) {\n\tres.send('Got a PUT request at /user')\n})\n```\n\ndelete:\n\n```js\napp.delete('/user', function (req, res) {\n\tres.send('Got a DELETE request at /user')\n})\n```\n\n##### 错误处理中间件\n\n```js\napp.use(function (err, req, res, next) {\n\tconsole.error(err.stack)\n\tres.status(500).send('Something broke!')\n})\n```\n\n##### 内置中间件\n\n- [express.static](http://expressjs.com/en/4x/api.html#express.static) serves static assets such as HTML files, images, and so on.\n- [express.json](http://expressjs.com/en/4x/api.html#express.json) parses incoming requests with JSON payloads. **NOTE: Available with Express 4.16.0+**\n- [express.urlencoded](http://expressjs.com/en/4x/api.html#express.urlencoded) parses incoming requests with URL-encoded payloads. **NOTE: Available with Express 4.16.0+**\n\n##### 第三方中间件\n\n http://expressjs.com/en/guide/using-middleware.html \n\n-  [body-parser](http://expressjs.com/en/resources/middleware/body-parser.html) \n\n-  [compression](http://expressjs.com/en/resources/middleware/compression.html) \n-  [cookie-parser](http://expressjs.com/en/resources/middleware/cookie-parser.html) \n-  [morgan](http://expressjs.com/en/resources/middleware/morgan.html) \n-  [response-time](http://expressjs.com/en/resources/middleware/response-time.html) \n-  [serve-static](http://expressjs.com/en/resources/middleware/serve-static.html) \n-  [session](http://expressjs.com/en/resources/middleware/session.html) \n\n#### 中间件应用\n\n##### 配置处理 404 的中间件\n\n```js\n// 在项目入口文件的最后（app.listen之前）\napp.use(function(req, res) {\n  res.render('404.html')\n})\n```\n\n##### 配置全局处理中间件\n\n- 当调用 next 的时候，如果传递了参数，则直接往后找到带有 四个参数的应用程序级别中间件\n\n  ```js\n  // 在项目入口文件的最后（app.listen之前）\n  app.use(function (err, req, res, next) {\n    res.status(500).send(err.message)\n  })\n  ```\n\n- 当发生错误的时候，我们可以调用 next 传递错误对象\n\n  ```js\n  ···\n  if (err) {\n    return next(err) // 省去大量重复代码\n  }\n  ···\n  ```\n\n- 然后就会被全局错误处理中间件匹配到并处理之\n\n\n\n\n\n## crud案例\n\n### 模块化思想\n\n模块符合划分：\n\n- 模块职责要单一\n\n### 案例\n\n https://github.com/asnwer-zf/nodeText_express_crud \n\n\n\n## 异步编程\n\n### 回调函数：获取异步操作结果\n\n~~不成立情况：~~\n\n```js\nfunction add(x, y){\n    console.log(1)\n    setTimeout(function () {\n        console.log(2)\n        var ret = x + y\n        return ret\n    }, 1000)\n    console.log(3)\n    // 到这里执行结束，不会等到前面的定时器，所以直接返回默认值 undefined\n}\nconsole.log(add(10, 20)) // => undefined\n```\n\n~~不成立情况：~~\n\n```js\nfunction add(x, y){\n    var ret\n    console.log(1)\n    setTimeout(function () {\n        console.log(2)\n        var ret = x + y\n    }, 1000)\n    console.log(3)\n    return ret\n}\nconsole.log(add(10, 20)) // => undefined\n```\n\n**如果需要获取一个函数异步操作的结果，必须使用回调函数来获取**\n\n```js\nfunction add(x, y, callback){\n    // callback 就是回调函数\n    setTimeout(function () {\n        var ret = x + y\n       \tcallback(ret)  // ret -> 实参\n    }, 1000)\n}\nadd(10, 20, function (ret) {  // ret -> 形参\n    console.log(ret)\n}) \n```\n\n基于原生XMLHTTPRequest封装get 方法\n\n```js\nfunction get(url, callback) {\n  var oReq = new XMLHttpRequest()\n  // 当请求加载成功之后要调用指定的函数\n  oReq.onload = function () {\n    callback(oReq.responseText)\n  }\n  oReq.open(\"get\", url, true)\n  oReq.send()\n}\n\nget('data.json', function (data) {\n  console.log(data)\n})\n```\n\n\n\n- 异步API 一般都 伴随着回调函数(上层定义，下层调用)\n  - setTimeout\n  - readFile\n  - writeFile\n  - readdir\n  - ajax\n\n- a 链接默认是同步请求\n\n### Promise\n\n>  参考文档：http://es6.ruanyifeng.com/#docs/promise \n\n#### 前提\n\ncallbackhell：\n\n![callbackhell](media/NodeJS. assets/callbackhell.jpg)\n\n无法保证顺序的代码：\n\n```js\n\nvar fs = require('fs')\n\nfs.readFile('./data/a.txt', 'utf8', function (err, data) {\n  if (err) {\n    // return console.log('读取失败')\n    // 抛出异常（做测试的时候经常使用）\n    //    1. 阻止程序的执行 （程序奔溃直接退出）\n    //    2. 把错误消息打印到控制台\n    throw err\n  }\n  console.log(data)\n})\n\nfs.readFile('./data/b.txt', 'utf8', function (err, data) {\n  if (err) { throw err }\n  console.log(data)\n})\n\nfs.readFile('./data/c.txt', 'utf8', function (err, data) {\n  if (err) { throw err }\n  console.log(data)\n})\n\n```\n\n通过回调嵌套的方式来保证顺序：\n\n```js\n\nvar fs = require('fs')\n\nfs.readFile('./data/a.txt', 'utf8', function (err, data) {\n  if (err) { throw err }\n  console.log(data)\n  fs.readFile('./data/b.txt', 'utf8', function (err, data) {\n    if (err) { throw err }\n    console.log(data)\n    fs.readFile('./data/c.txt', 'utf8', function (err, data) {\n      if (err) { throw err }\n      console.log(data)\n    })\n  })\n})\n\n```\n\n为了解决以上编码方式带来的问题（回调地狱嵌套），在Ecamscript 6 中新增了一个API：`Promise`\n\n#### Promise基本语法\n\n- Promise  -  承诺、保证\n\n```js\n\nvar fs = require('fs')\n// promise是一个构造函数\n// 不是异步，但里面往往封装一个异步任务\n\n// 创建 Promise 容器\n// Promise 容器一旦创建，就开始执行里面的代码\nvar p1 = new Promise(function(resolve, reject) {\n  fs.readFile('./data/a.txt', 'utf8', function(err, data) {  ## 异步任务\n    if (err) {\n      // 承诺容器中的任务失败，\n      // console.log(err)\n      // 把容器中的 Pending 状态变为 rejected\n      // 调用 reject 就相当于调用了 then 方法的第二个参数\n      reject(err)  ## 失败调用\n    } else {\n      // 承诺容器中的任务成功，\n      // console.log(data)\n      // 把容器中的 Pending 状态变为 resolved\n      // 调用 resolve 就相当于调用了 then 方法的传递的那个function\n      resolve(data)  ## 成功调用\n    }\n  })\n})\n\n// 当 p1 成功了 然后（then） 做指定操作\n// then 方法接收的 function 就是容器中的 resolve 函数\np1.then(\n  function(data) {\n    console.log(data)\n  },\n  function(err) {\n    console.log(err)\n  }\n)\n\n```\n\n\n\n#### Promise的封装\n\n实例推导（ readFile ）\n\n- 异步调用链式编程\n\n```js\nvar fs = require('fs')\n\nvar p1 = new Promise(function(resolve, reject) {\n  fs.readFile('./data/a.txt', 'utf8', function(err, data) {\n    if (err) {\n      reject(err)\n    } else {\n      resolve(data)\n    }\n  })\n})\nvar p2 = /...\nvar p3 = /...\np1.then(\n  function(data) {\n    console.log(data)\n    // 当 p1 读取成功的时候\n    // 当前函数中 return 的结果就可以在后面的 then 中 function 接收到，故：\n    // 当 return 123 后面就接收到 123\n    // 没有 return 后面就接收的是 undefined\n    // 同理可以 return 一个 Promise 对象\n    // 当 return 一个Promise 对象的时候，后续的then中的 方法的第一个参数会作为p2 的 resolve\n    return p2\n  },\n  function(err) {\n    console.log(err)\n  }\n)\n  .then(function(data) {\n    console.log(data)\n    return p3\n  })\n  .then(function(data) {\n    console.log(data)\n    console.log('end')\n  })\n```\n\n\n\n![Snipaste_2019-10-19_15-40-57](media/NodeJS. assets/Snipaste_2019-10-19_15-40-57.jpg)\n\n\n\n=>  封装实例\tpromise\n\n```js\n\nvar fs = require('fs')\n\nfunction pReadFile(filePath) {\n  return new Promise(function(resolve, reject) {\n    fs.readFile(filePath, 'utf8', function(err, data) {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(data)\n      }\n    })\n  })\n}\npReadFile('./data/a.txt')\n  .then(function(data) {\n    console.log(data)\n    return pReadFile('./data/b.txt')\n  })\n  .then(function(data) {\n    console.log(data)\n    return pReadFile('./data/c.txt')\n  })\n  .then(function(data) {\n    console.log(data)\n  })\n\n```\n\n \n\n## 其他：\n\n### 修改完成代码自动重启\n\n**第三方命令行工具`nodemon`，可以解决频繁修改代码重启服务器问题**\n\n**`nodemon`是基于node.js开发的第三方命令行工具，需要独立安装**\n\n```shell\n## 所有需要用 --global 来安装的包都可以在任意目录执行\nnpm install --global nodemon\n```\n\n**安装完毕以后，使用**\n\n```shell\nnode app.js\n## 执行 nodemon 替换 node\nnodemon app.js\n```\n\n**通过 `nodemon` 启动的服务，会监视文件变化，当文件发生变化，自动重启服务器**\n\n### 文件操作中的 `/` 与模块标识中的 `/`\n\n- **文件标识中的路径可以省略 `./` **\n- **在模块加载中，相对路径中的 `./` 不能省略**\n\n### 快捷创建服务\n\n#### http-server\n\n##### 安装\n\n```shell\nnpm install -g http-server@0.9.0 ## 新版本报错\n```\n\n##### 启动\n\n```shell\nhs -c-l -o\n```\n\n#### json-server\n\n##### 安装\n\n```shell\nnpm install -g json-server\n```\n\n##### 启动\n\n```shell\njson-server --watch 文件名 \n```","slug":"NodeJS","published":1,"updated":"2019-11-02T01:34:45.616Z","_id":"ck2gutpc00000swq15c7i5o64","layout":"post","photos":[],"link":"","content":"<p><img src=\"https://blog-1257820412.cos.ap-shanghai.myqcloud.com/title/half_year.jpg\" alt=\"pic\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Node-js-概述\"><a href=\"#Node-js-概述\" class=\"headerlink\" title=\"Node.js 概述\"></a>Node.js 概述</h2><ul>\n<li><p>Node.js 是JavaScript运行时环境</p>\n</li>\n<li><p>可以解析执行JavaScript代码</p>\n</li>\n<li><p>没有BOM 、DOM</p>\n</li>\n<li><p>遵循EcmaScript</p>\n</li>\n<li><p>为JavaScript提供了服务器级别的操作API</p>\n</li>\n<li><p>构建与Chrome的V8引擎之上</p>\n<ul>\n<li><p>Google Chrome 中的V8引擎世界上公认的解析执行JavaScript代码最快的</p>\n</li>\n<li><p>Node.js作者把Google Chrome 中的V8引擎移出来，开发了独立的JavaScript运行时环境</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node-js-特性\"><a href=\"#Node-js-特性\" class=\"headerlink\" title=\"Node.js 特性\"></a>Node.js 特性</h2><ul>\n<li><p>event-driven 事件驱动</p>\n</li>\n<li><p>non-blocking I/O model 非阻塞IO模型（异步）</p>\n</li>\n<li><p>lightweight and efficient 轻量和高效</p>\n</li>\n</ul>\n<h2 id=\"Node-js-功能\"><a href=\"#Node-js-功能\" class=\"headerlink\" title=\"Node.js 功能\"></a>Node.js 功能</h2><ul>\n<li><p>WEB服务器后台</p>\n<ul>\n<li><p>B/S编程模型（与语言无关）</p>\n</li>\n<li><p>模块化编程 （类似less  @import(‘文件路径’)  引用加载文件）</p>\n</li>\n<li><p>异步编程</p>\n<ul>\n<li>promise</li>\n<li>async</li>\n<li>generator </li>\n</ul>\n</li>\n<li><p>Express Web开发框架</p>\n</li>\n<li><p>Ecmascript 6</p>\n</li>\n</ul>\n</li>\n<li><p>命令行工具</p>\n<ul>\n<li>git    （ C ）</li>\n<li>npm（ Node ）</li>\n<li>hexo（ Node ）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node-js-基本操作\"><a href=\"#Node-js-基本操作\" class=\"headerlink\" title=\"Node.js 基本操作\"></a>Node.js 基本操作</h2><h3 id=\"执行文件\"><a href=\"#执行文件\" class=\"headerlink\" title=\"执行文件\"></a>执行文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 创建编写js脚本文件</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 打开终端，定位到脚本文件所属目录</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 输入node '文件名' 执行对应的文件  -- 文件名不能以node.js命名否则会打开这个文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">node begin.js</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行文件操作必须引入fs这个核心模块（file-system）</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 require 方法载入fs核心模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'url'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error,data</span>)</span>&#123;   <span class=\"comment\">// URL：要读取的文件路径 （统一资源定位符）</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'读取错误'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 读取成功 error 返回 null   ，data 返回 数据\t\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">// 读取失败 error 返回 错误对象，data 返回 undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">## ps: data 返回的数据是将文件存储的二进制数据 转为 十六进制数据，展现</span><br><span class=\"line\">##\t   可以用 toString 方法转为 字符串</span><br><span class=\"line\"></span><br><span class=\"line\">## readFile 的第二个参数是可选的，传入 utf8 就是告诉他把读取到的文件直接按照 utf8 编码转成字符串</span><br><span class=\"line\">## 等价于 data.toString()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取目录\"><a href=\"#读取目录\" class=\"headerlink\" title=\"读取目录\"></a>读取目录</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">fs.readdir(<span class=\"string\">'url'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files</span>) </span>&#123;  <span class=\"comment\">// files: 返回数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    res.end(err.message) <span class=\"comment\">// err对象 中有一个属性 message </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(files)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'url'</span>,<span class=\"string\">'content'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123; <span class=\"comment\">// content: 写入文件内容   error: 形参</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'写入失败'</span>)</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'写入成功'</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">## 写入成功 error 返回 null</span><br><span class=\"line\">## 写入失败 error 返回 错误对象</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建服务器\"><a href=\"#创建服务器\" class=\"headerlink\" title=\"创建服务器\"></a>创建服务器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Node中有一个核心模块 http ,职责创建编写服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载http核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用http.createServer() 方法创建web服务    ## 返回一个Server实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接受请求</span></span><br><span class=\"line\"><span class=\"comment\">// 处理请求</span></span><br><span class=\"line\"><span class=\"comment\">// 返回响应</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册 request 请求事件</span></span><br><span class=\"line\"><span class=\"comment\">// 当客户端请求时，自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数 </span></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'收到请求,请求路径'</span> + request.url) </span><br><span class=\"line\">    response.write(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">    response.write(<span class=\"string\">' node.js'</span>)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  \t<span class=\"comment\">// 简化</span></span><br><span class=\"line\">  \tresponse.end(<span class=\"string\">'hello node.js'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">## request  请求事件处理函数，需接收两个参数：</span><br><span class=\"line\">## Request  请求对象（获取客户端请求信息：如请求路径）</span><br><span class=\"line\">\t\t\t\t\t\t## req.url 获取端口号以后的路径，所有url都是以 / 开头的 默认为 /</span><br><span class=\"line\">## Response 响应对象（给客户端发送响应信息）有 writer方法 ：给客户端发送响应数据</span><br><span class=\"line\">\t\t\t\t\t\t## writer方法 ：给客户端发送响应数据</span><br><span class=\"line\">            ## write 可以使用多次，但是最后一定要使用end结束响应，否则客户端会一直等待。</span><br><span class=\"line\">            ## 简化操作 直接end的同时发送响应数据 response.end('str')</span><br><span class=\"line\">            ## response.end()支持两种数据类型：二进制 字符串</span><br><span class=\"line\">            </span><br><span class=\"line\">## response.end()\t一次请求对应一次响应，响应结束这次请求也结束  不执行后续代码  类似return</span><br><span class=\"line\">## response.end() 必须存在</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定端口号，启动服务器。</span></span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器启动成功，可以通过 http://127.0.0.1:3000/，进行访问'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时终端被服务占用，关闭终端即关闭服务器（X掉，或者 Ctrl+c 终止），有响应便返回响应</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建服务简写\"><a href=\"#创建服务简写\" class=\"headerlink\" title=\"- 创建服务简写\"></a>- 创建服务简写</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">\t\t.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running'</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"获取路径\"><a href=\"#获取路径\" class=\"headerlink\" title=\"获取路径\"></a>获取路径</h3><ul>\n<li>采用URL模块，获取</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj =url.parse(<span class=\"string\">'http://127.0.0.1:3000/post?name=fasdf&amp;mes= asdf'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// true： 可以让里面的query 将所传入的参数转为对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\">$</span><br><span class=\"line\">  protocol: <span class=\"string\">'http:'</span>,\t<span class=\"comment\">// 协议</span></span><br><span class=\"line\">  slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  auth: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  host: <span class=\"string\">'127.0.0.1:3000'</span>,  </span><br><span class=\"line\">  port: <span class=\"string\">'3000'</span>,\t<span class=\"comment\">// 端口号</span></span><br><span class=\"line\">  hostname: <span class=\"string\">'127.0.0.1'</span>,\t<span class=\"comment\">// 主机名</span></span><br><span class=\"line\">  hash: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  search: <span class=\"string\">'?name=fasdf&amp;mes=%20asdf'</span>,\t<span class=\"comment\">// 查询字符串（ GET参数 ）</span></span><br><span class=\"line\">  query: [<span class=\"built_in\">Object</span>: <span class=\"literal\">null</span> prototype] &#123; <span class=\"attr\">name</span>: <span class=\"string\">'fasdf'</span>, <span class=\"attr\">mes</span>: <span class=\"string\">' asdf'</span> &#125;,</span><br><span class=\"line\">  pathname: <span class=\"string\">'/post'</span>,</span><br><span class=\"line\">  path: <span class=\"string\">'/post?name=fasdf&amp;mes=%20asdf'</span>,</span><br><span class=\"line\">  href: <span class=\"string\">'http://127.0.0.1:3000/post?name=fasdf&amp;mes=%20asdf'</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Node-js-中-的-JavaScript\"><a href=\"#Node-js-中-的-JavaScript\" class=\"headerlink\" title=\"Node.js 中 的 JavaScript\"></a>Node.js 中 的 JavaScript</h2><ul>\n<li>EcmaScript</li>\n<li>核心模块</li>\n<li>第三方模块</li>\n<li>用户自定义模块</li>\n</ul>\n<h3 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h3><p>Node为JavaScript提供了很多服务器级别的API，而且这些API绝大多数都被包装到了一个具名的核心模块中。他们都有自己特殊的名称标识，若要使用这些模块，必须用  <strong><em>require</em></strong>  加载模块。</p>\n<ul>\n<li>文件操作的核心模块：fs</li>\n<li>服务构建的核心模块：http</li>\n<li>路径处理的核心模块：path</li>\n<li>路径操作的核心模块：url</li>\n<li>操作系统信息的核心模块：os</li>\n<li>…</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.extname(<span class=\"string\">'url'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回扩展名 .txt</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"用户定义模块\"><a href=\"#用户定义模块\" class=\"headerlink\" title=\"用户定义模块\"></a>用户定义模块</h3><h4 id=\"require-方法\"><a href=\"#require-方法\" class=\"headerlink\" title=\"require  方法\"></a>require  方法</h4><p>​    <strong>用来加载模块，并执行里面的代码</strong>（ 可加载执行多个JavaScript脚本文件 ）</p>\n<p>​    <strong>拿到被加载文件模块导出的接口对象</strong></p>\n<ul>\n<li><p>node中模块分三种</p>\n<ul>\n<li><p>具名的核心模块 （ fs 、http …）</p>\n</li>\n<li><p>用户编写的文件模块</p>\n<p>​    相对路径必须加 ./ 或 ../    （ ./ 不能省略，否则报错）</p>\n<p>​    可以省略后缀名</p>\n</li>\n<li><p>第三方模块</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js =&gt; stat'</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js =&gt; end'</span>)</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li><p>node中没有全局作用域，只有模块作用域（即文件作用域）</p>\n<ul>\n<li>模块是完全封闭的<ul>\n<li>文件与文件之间可以完全避免变量命名冲突、污染问题</li>\n<li>外部访问不到内部，内部访问不到外部</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"exports-对象\"><a href=\"#exports-对象\" class=\"headerlink\" title=\"exports 对象\"></a>exports 对象</h4><p><strong>每个文件模块都提供了  <em>exports</em>  对象 （ 默认是空对象 ）</strong></p>\n<ul>\n<li><p>由于node只有模块作用域，想要做到模块间通信需要用到  <strong><em>exports</em></strong></p>\n</li>\n<li><p>把需要被外部访问的成员手动挂载到 <strong><em>exports</em></strong> 接口对象中</p>\n</li>\n<li><p>多次在 <strong>exports</strong> 添加成员，实现对外导出多个内部成员</p>\n</li>\n<li><p>哪个文件 <strong><em>require</em></strong> 这个的模块，就可以得到模块内部的   <strong><em>exports</em></strong>  接口对象</p>\n<ul>\n<li>即：<strong><em>require</em></strong>  的返回值</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## └─ducument</span><br><span class=\"line\">##    ├─a.js</span><br><span class=\"line\">##    └─b.js</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  b.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'1231234'</span></span><br><span class=\"line\">exports.foo = foo</span><br><span class=\"line\"></span><br><span class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  a.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bExports = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.foo)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.add(<span class=\"number\">10</span>, <span class=\"number\">210</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一个模块需要直接导出某个成员，而非挂载的方式必须使用</p>\n<p><code>module.exports = add</code></p>\n<ul>\n<li>add 可为 function，string， array。。都可以</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Web-服务端开发\"><a href=\"#Web-服务端开发\" class=\"headerlink\" title=\"Web 服务端开发\"></a>Web 服务端开发</h2><h3 id=\"IP地址-与-端口号\"><a href=\"#IP地址-与-端口号\" class=\"headerlink\" title=\"IP地址  与  端口号\"></a>IP地址  与  端口号</h3><ul>\n<li><p>所有联网的程序都要进行网络通信</p>\n</li>\n<li><p>计算机中只有一个物理网卡，且同一个局域网中的网卡地址必须唯一。</p>\n</li>\n<li><p>网卡是通过唯一的ip地址进行定位</p>\n</li>\n</ul>\n<p><strong>IP 地址用来定位计算机</strong></p>\n<p><strong>端口号用来定位应用程序</strong></p>\n<ul>\n<li>所有需要网络通信的软件都必须有端口号</li>\n<li>端口号使用范围 0 ~ 65536 之间</li>\n<li>计算机中有一些默认端口号 尽量不去使用 ex : 80 ..</li>\n<li>一台计算机，同一个端口号在同一时间，只能被一个 </li>\n<li>Node.js 可以开启多个服务，但是一定确保不同服务占用不同端口号</li>\n</ul>\n<h3 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h3><ul>\n<li><p>服务端发送的数据默认，是utf-8编码的</p>\n</li>\n<li><p>浏览器在不知道服务器响应内容的编码的情况下，会按照当前操作系统默认的编码去解析</p>\n<ul>\n<li>中文操作系统默认编码是 GBK</li>\n<li>在http协议中 Content-Type是用来告知，对方给你发送数据内容的数据类型</li>\n<li>图片不需要指定编码，常说的编码一般指的是：字符编码，一般只为字符数据指定编码</li>\n</ul>\n</li>\n<li><p><strong>通过设置响应头的方式设置Content-Type的方式解决乱码问题</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">'Content-Type'</span>,<span class=\"string\">'text/plain; charset=utf-8'</span>)</span><br><span class=\"line\">    res.end(<span class=\"string\">'hello 世界'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>服务器最好把每次响应的数据是什么内容类型 ，正确的告诉客户端</li>\n<li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></li>\n<li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>除了用 Content-Type 指定编码，也可以在HTML页面，通过meta元数据（用来 描述、特征、信息，存储内容的数据）来声明当前文本的编码格式</li>\n</ul>\n<h3 id=\"请求与响应\"><a href=\"#请求与响应\" class=\"headerlink\" title=\"请求与响应\"></a>请求与响应</h3><ul>\n<li><p>当浏览器收到HTML的响应内容以后，开始从上到下一次解析，</p>\n</li>\n<li><p>在解析过程中若发现</p>\n<ul>\n<li>link</li>\n<li>script</li>\n<li>img</li>\n<li>iframe</li>\n<li>video</li>\n<li>audio</li>\n</ul>\n</li>\n<li><p>等带有src href属性标签的时候，浏览器会自动对这些资源发起新的请求</p>\n</li>\n</ul>\n<h3 id=\"统一资源管理\"><a href=\"#统一资源管理\" class=\"headerlink\" title=\"统一资源管理\"></a>统一资源管理</h3><ul>\n<li>为了方便统一处理静态资源，顾将静态资源存放在同一位置</li>\n<li>通过代码灵活控制那些资源能被访问，那些资源不允许访问</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = req.url</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">      fs.readFile(<span class=\"string\">'./view/index.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          res.end(<span class=\"string\">'404 Not Found'</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.end(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url.indexOf(<span class=\"string\">'/public/'</span>) === <span class=\"number\">0</span>) &#123;   <span class=\"comment\">// public 开启访问权限</span></span><br><span class=\"line\">      fs.readFile(<span class=\"string\">'.'</span> + url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          res.end(<span class=\"string\">'404 Not Found'</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.end(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running'</span>)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上个实例，只有public目录可以提供访问，灵活控制访问资源</li>\n</ul>\n<h3 id=\"服务器重定向\"><a href=\"#服务器重定向\" class=\"headerlink\" title=\"服务器重定向\"></a>服务器重定向</h3><ul>\n<li><p>状态码设置 302临时重定向</p>\n<ul>\n<li>301为永久重定向 浏览器会记住</li>\n<li>a  =&gt; b ,下次请求a，不经过a 直接到b</li>\n<li>302为临时重定向 浏览器会记住<ul>\n<li>a  =&gt; b ,下次继续请求a，a  =&gt; b</li>\n</ul>\n</li>\n<li>response.statusCode = 302</li>\n</ul>\n</li>\n<li><p>响应头中通过 Location告诉客户端往哪重定向</p>\n<ul>\n<li>response.setHeader( ‘Location’,  ‘/‘ )</li>\n</ul>\n</li>\n<li><p>客户端发现收到的服务器的响应状态码是302，会自动在响应头中找 Location，然后对改地址发起新的请求。</p>\n</li>\n<li><p>客户端自动跳转</p>\n</li>\n</ul>\n<h2 id=\"Node中的模块系统\"><a href=\"#Node中的模块系统\" class=\"headerlink\" title=\"Node中的模块系统\"></a>Node中的模块系统</h2><h3 id=\"前-提\"><a href=\"#前-提\" class=\"headerlink\" title=\"前 提\"></a>前 提</h3><ul>\n<li>使用Node编写应用程序主要是使用<ul>\n<li>EcamScript 语言</li>\n<li>核心模块</li>\n<li>第三方模块</li>\n<li>用户自定义模块</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h3><ul>\n<li><p>文件作用域</p>\n</li>\n<li><p>通信规则</p>\n<ul>\n<li><p>加载</p>\n</li>\n<li><p>导出</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CommonJS模块规范\"><a href=\"#CommonJS模块规范\" class=\"headerlink\" title=\"CommonJS模块规范\"></a>CommonJS模块规范</h3><p>JavaScript本身并不支持模块化 在Node中不仅支持，还有一个很重要的概念  <strong>模块系统</strong></p>\n<ul>\n<li>模块作用域<ul>\n<li>默认模块中任何内容不能被外部访问</li>\n</ul>\n</li>\n<li>使用require方法加载模块</li>\n<li>使用exports接口对象导出模块中的成员</li>\n</ul>\n<h4 id=\"加载-require\"><a href=\"#加载-require\" class=\"headerlink\" title=\"加载  require\"></a>加载  <code>require</code></h4><h5 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> custom = <span class=\"built_in\">require</span>(<span class=\"string\">'module'</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h5><ol>\n<li>执行被加载模块中代码</li>\n<li>得到被加载模块中的  <code>exports</code>  导出接口对象</li>\n</ol>\n<h5 id=\"加载规则：\"><a href=\"#加载规则：\" class=\"headerlink\" title=\"加载规则：\"></a>加载规则：</h5><p>模块查找机制：优先从缓存加载    =&gt;  核心模块  =&gt;  路径形式文件模块  =&gt;  第三方模块</p>\n<h6 id=\"优先从缓存加载\"><a href=\"#优先从缓存加载\" class=\"headerlink\" title=\"优先从缓存加载\"></a>优先从缓存加载</h6><ul>\n<li><p>优先从缓存加载，不会重复加载，目的是为了避免重复加载，提高模块加载效率</p>\n</li>\n<li><p>可以拿到其中的接口对象，但是不会重复执行里面的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## └─ducument</span><br><span class=\"line\">##    ├─a.js</span><br><span class=\"line\">##    ├─b.js</span><br><span class=\"line\">##    └─main.js</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  main.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn)</span><br><span class=\"line\">----------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  a.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js 被加载了'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn)</span><br><span class=\"line\">----------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  b.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js 被加载了'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello bbb'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">## ----\t main.js输出结果</span><br><span class=\"line\">a.js 被加载了</span><br><span class=\"line\">b.js 被加载了</span><br><span class=\"line\">[<span class=\"built_in\">Function</span>]</span><br><span class=\"line\">[<span class=\"built_in\">Function</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h6 id=\"判断模块模块标识-符\"><a href=\"#判断模块模块标识-符\" class=\"headerlink\" title=\"判断模块模块标识(符)\"></a>判断模块模块标识(符)</h6><p><strong>require(‘模块标识’)</strong></p>\n<ul>\n<li>核心模块<ul>\n<li>本质：文件。</li>\n<li>已被编译到了二进制文件中，只需要按名字加载即可</li>\n<li>模块标识 ：模块名</li>\n</ul>\n</li>\n<li>第三方模块<ul>\n<li>凡是第三方模块必须通过npm下载，通过require(‘包名’)进行加载使用</li>\n<li>不可能有一个第三方包 与 核心模块 重名</li>\n<li>模块标识 ：模块名</li>\n</ul>\n</li>\n<li>用户模块<ul>\n<li>模块标识 ：路径</li>\n</ul>\n</li>\n</ul>\n<p><strong>路径形式的模块</strong>：</p>\n<ul>\n<li>.js     后缀名可以省略</li>\n<li>./      当前目录 （不可省略）</li>\n<li>../     上一级目录 （不可省略）</li>\n<li>/xxx    绝对路径 ( 首位的  / 表示当前文件模块所属磁盘根路径)  ==&gt;  几乎不用</li>\n<li>d:/xxxx  绝对路径   ==&gt;  几乎不用 </li>\n</ul>\n<p><strong>既不是核心模块，也不是路径形式的模块</strong></p>\n<ol>\n<li>模块加载规则<ul>\n<li>先找到当前文件所属目录中的 <code>node_modules</code> 目录    ( 以art-template 为例 )</li>\n<li>== &gt;     node_modules/art-template</li>\n<li>== &gt;     node_modules/art-template/package.json 文件</li>\n<li>== &gt;     node_modules/art-template/package.json 文件中的 main 属性</li>\n<li>main属性记录了art-template的入口模块 </li>\n<li>加载使用art-template</li>\n<li>实际上最终加载的还是文件</li>\n</ul>\n</li>\n<li>特殊情况<ul>\n<li>如果 package.json 文件不存在或者 main指定的入口模块也没有，则 node 会找该目录下的 index.js<ul>\n<li>index.js 会作为默认备选项</li>\n</ul>\n</li>\n<li>若所述所有条件均不成立，则会进人上一级目录中的 node_modules 目录执行查找</li>\n<li>若上一级还没有，则继续往上上一级查找</li>\n<li>。。。</li>\n<li>如果直到当前磁盘根目录还找不到，最后报错  <code>can not find module xxx</code> </li>\n</ul>\n</li>\n</ol>\n<p><strong>在项目中有且只有一个 <code>node_modules</code> ，不会出现多个</strong></p>\n<p><strong>位置：放在项目根目录中，这样项目中所有子目录中的代码都可以加载第三方包</strong></p>\n<h4 id=\"导出-exports\"><a href=\"#导出-exports\" class=\"headerlink\" title=\"导出 exports\"></a>导出 <code>exports</code></h4><ul>\n<li><p>Node中是模块作用域，默认文件中所有成员只在当前文件模块有效</p>\n</li>\n<li><p>想要做到模块间通信需要用到  <code>exports</code> ，把需要被外部访问的成员手动挂载到 <code>exports</code> 接口对象中</p>\n<ul>\n<li><p>导出多个成员（必须在对象中）：</p>\n<ul>\n<li><p>多次在 <code>exports</code> 添加成员，实现对外导出多个内部成员</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.a = <span class=\"number\">123</span></span><br><span class=\"line\">exports.b = <span class=\"string\">'string'</span></span><br><span class=\"line\">exports.c =\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'string'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.d = &#123;</span><br><span class=\"line\">  foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>导出单个成员（拿到的是函数、字符串、数组。。。）：</p>\n<ul>\n<li><p>一个模块需要直接导出单个成员，而非挂载的方式必须使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'string'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若重复使用，则后者覆盖前者</p>\n</li>\n<li><p>也可以用 <code>module.exports =</code> 的操作导出多个成员</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> str: <span class=\"string\">'string'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li><p>在Node 中，每一个模块内部都有一个自己的 <code>module</code> 对象</p>\n</li>\n<li><p>该 <code>module</code> 对象中，有一个成员叫： <code>exports</code> 也是一个对象（ 默认为空 ）</p>\n</li>\n<li><p>若需要对外导出成员，只需要把导出的成员挂载到 <code>module.exports</code> 中</p>\n</li>\n<li><p>由于每次导出接口成员的时候都通过 <code>module.exports.xxx = xxx</code> 比较麻烦，node为了简化操作专门提供一个变量 <code>exports</code>  等价于  <code>module.exports</code>  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(exports === <span class=\"built_in\">module</span>.exports)\t<span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">exports.foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.add = <span class=\"string\">'bar'</span></span><br></pre></td></tr></table></figure>\n\n<p>固（混搭）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-------------------</span><br><span class=\"line\"><span class=\"comment\">// require结果</span></span><br><span class=\"line\">&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">add</span>: [<span class=\"built_in\">Function</span>] &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当一个模块需要导出单个成员的时候</p>\n<ul>\n<li><p>不能使用：<code>exports = &#39;string&#39;</code> </p>\n<ul>\n<li><code>exports</code> 仅仅只是 <code>module.exports</code>  的引用,底层最后的代码是：<ul>\n<li><code>var exports = module.exports</code></li>\n<li><code>return module.exports</code></li>\n</ul>\n</li>\n<li>重新赋值不再指向 <code>module.exports</code> , 便丢失了引用关系 </li>\n<li>只是快捷方式，可以忽略</li>\n</ul>\n</li>\n<li><p>只能使用：<code>module.exports = &#39;string&#39;</code></p>\n<ul>\n<li><p>重新赋值以后 <code>exports</code> 便直接失效。</p>\n<ol>\n<li>底层代码：<code>return module.exports</code></li>\n<li>将对象赋值给变量，所存放的是地址</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'string'</span></span><br><span class=\"line\">exports.foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\">-------------</span><br><span class=\"line\"><span class=\"comment\">// require结果</span></span><br><span class=\"line\"><span class=\"string\">'string'</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"底层代码模拟\"><a href=\"#底层代码模拟\" class=\"headerlink\" title=\"底层代码模拟\"></a>底层代码模拟</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</span><br><span class=\"line\">\texports: &#123; </span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 哪个文件 require 这个的模块，就可以得到 module.exports</span></span><br><span class=\"line\"><span class=\"comment\">// 在node最底层</span></span><br><span class=\"line\"><span class=\"comment\">// 还有一句</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> exports = <span class=\"built_in\">module</span>.exports</span><br><span class=\"line\"><span class=\"comment\">// 默认在代码的最后 ：</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h3><p><strong>node package manager</strong></p>\n<h4 id=\"npm-网站\"><a href=\"#npm-网站\" class=\"headerlink\" title=\"npm 网站\"></a>npm 网站</h4><p>npmjs.com</p>\n<h4 id=\"npm-命令行工具\"><a href=\"#npm-命令行工具\" class=\"headerlink\" title=\"npm 命令行工具\"></a>npm 命令行工具</h4><p>只要安装了node ,就安装了npm</p>\n<p>npm也有版本概念</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --version     ## 查看版本</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global npm     ## 升级npm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"npm-常用命令\"><a href=\"#npm-常用命令\" class=\"headerlink\" title=\"npm 常用命令\"></a>npm 常用命令</h4><ul>\n<li>npm init [–yes]<ul>\n<li>npm init -y 跳过向导，快速生成</li>\n</ul>\n</li>\n<li>npm install<ul>\n<li>一次性把 dependencies 选项中的依赖项全部安装</li>\n<li>npm i </li>\n</ul>\n</li>\n<li>npm install 包名<ul>\n<li>只下载</li>\n<li>npm i 包名</li>\n</ul>\n</li>\n<li>npm install 包名 –save<ul>\n<li>下载并保存依赖项（ package.json 文件中的 dependencies 选项）</li>\n<li>npm i -S 包名</li>\n</ul>\n</li>\n<li>npm uninstall 包名<ul>\n<li>只删除，如果有依赖项会依然保存</li>\n<li>npm un 包名</li>\n</ul>\n</li>\n<li>npm uninstall –save 包名<ul>\n<li>删除的同时也会把依赖信息也去除</li>\n<li>npm un -S 包名</li>\n</ul>\n</li>\n<li>npm help <ul>\n<li>查看使用帮助</li>\n</ul>\n</li>\n<li>npm 命令 –help<ul>\n<li>查看指定命令的使用帮助</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"解决npm被墙问题\"><a href=\"#解决npm被墙问题\" class=\"headerlink\" title=\"解决npm被墙问题\"></a>解决npm被墙问题</h4><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢</p>\n<p><a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/</a> 淘宝的开发团队，把npm在国内做了备份</p>\n<p>步骤：</p>\n<ol>\n<li><p>安装淘宝的cnpm：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global cnpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># --global表示安装到全局，而非当前目录</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 这条命令中 --global不能省略</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 所有需要用 --global 来安装的包都可以在任意目录执行</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装时包时将<code>npm</code> 替换成 <code>cnpm</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里还是走国外的npm服务器，速度比较慢</span></span><br><span class=\"line\">npm install jquery</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用 cnpm 通过淘宝的服务器下载</span></span><br><span class=\"line\">cnpm install jquery</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果不想安装 cnpm 又想使用淘宝的服务器来下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>每次手动加参数过于繁琐，可以把这个选项加入配置文件中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 查看npm配置信息</span></span></span><br><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只要经过上面命令配置，以后所有的<code>npm install</code> 都会默认通过淘宝服务器来下载</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><ul>\n<li><p>每个项目的根目录下都要有一个 package.json 文件 （包描述文件）</p>\n</li>\n<li><p>执行<code>npm install</code> 包名的时候都加上 –save，用来 保存依赖项信息</p>\n</li>\n<li><p>package.json 可以通过 <code>npm init</code>的方式自动初始化出来</p>\n<ul>\n<li><code>dependencies</code> 选项，保存第三方包的依赖信息</li>\n</ul>\n</li>\n<li><p>若删除了node_modules 文件夹，且package.json 存在</p>\n<ul>\n<li>直接使用 <code>npm install</code> 找回<ul>\n<li><code>npm install</code> 自动把package.json 中的dependencies 中所有的依赖项，都下载回来.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"package-json-和-package-lock-json\"><a href=\"#package-json-和-package-lock-json\" class=\"headerlink\" title=\"package.json 和 package-lock.json\"></a>package.json 和 package-lock.json</h4><p>npm5 以前是不会有 <code>package-lock.json</code> 这个文件的</p>\n<p>npm5以后才加入的</p>\n<p>当你安装包的时候，npm 都会生成或者更新 <code>package-lock.json</code> 这个文件</p>\n<ul>\n<li>npm5以后的版本安装包，不需要加 <code>--save</code> 参数，他会自动保存依赖信息</li>\n<li>当安装包的时候，会自动创建或者是更新 <code>package-lock.json</code> 这个文件</li>\n<li><code>package-lock.json</code> 会保存 <code>node_modules</code> 中所有包的信息（版本、下载地址）<ul>\n<li>这样的话重新 <code>npm install</code> 的时候速度就可以提升</li>\n</ul>\n</li>\n<li>从文件看来，有一个 <code>lock</code> 称之为 锁</li>\n<li>这个<code>lock</code> 是用来锁定版本的</li>\n<li>如果项目依赖1.1.1版本</li>\n<li>你重新install 其实会下载最新版本，而不是1.1.1</li>\n<li>我们的目的希望可以锁住1.1.1这个版本</li>\n<li><code>package-lock.json</code>这个文件的另一个作用就是锁定版本号，防止自动升级到最新版本</li>\n</ul>\n<h2 id=\"path路径操作模块\"><a href=\"#path路径操作模块\" class=\"headerlink\" title=\"path路径操作模块\"></a>path路径操作模块</h2><blockquote>\n<p>参考文档： <a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/path.html\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/latest-v12.x/docs/api/path.html</a> </p>\n</blockquote>\n<h3 id=\"常用API：\"><a href=\"#常用API：\" class=\"headerlink\" title=\"常用API：\"></a>常用API：</h3><ul>\n<li><p>path.basename</p>\n<ul>\n<li>获取一个路径的文件名（默认包含扩展名）</li>\n</ul>\n</li>\n<li><p>path.dirname</p>\n<ul>\n<li>获取一个路径中的目录部分</li>\n</ul>\n</li>\n<li><p>path.extname</p>\n<ul>\n<li>获取一个路径中的扩展名部分</li>\n</ul>\n</li>\n<li><p>path.parse</p>\n<ul>\n<li>把一个路径转为对象<ul>\n<li>root 根路径</li>\n<li>dir 目录</li>\n<li>base 包含后缀名的文件名</li>\n<li>ext 后缀名</li>\n<li>name 不包含后缀名的文件名</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>path.isAbsolute </p>\n<ul>\n<li>判断一个路径是不是绝对路径</li>\n</ul>\n</li>\n<li><p>path.join()</p>\n<ul>\n<li>作用：拼接路径</li>\n<li>参数可以为任意，多写或者少写 <code>/</code> 不影响</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">path.join(<span class=\"string\">'c:/a'</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">-- <span class=\"string\">'c:\\\\a\\\\b'</span></span><br><span class=\"line\"></span><br><span class=\"line\">path.join(<span class=\"string\">'c:/a'</span>, <span class=\"string\">'/b'</span>, <span class=\"string\">'c/'</span>, <span class=\"string\">'./f'</span>)</span><br><span class=\"line\">-- <span class=\"string\">'c:\\\\a\\\\b\\\\c\\\\f'</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Canswer_zf%5CDesktop%5CSnipaste_2019-10-20_15-29-18.png\" alt=\"Snipaste_2019-10-20_15-29-18\"></p>\n<h2 id=\"Node-中的其他成员\"><a href=\"#Node-中的其他成员\" class=\"headerlink\" title=\"Node 中的其他成员\"></a>Node 中的其他成员</h2><p>在每个模块中，出来 <code>require</code> 、<code>exports</code>等模块相关API之外，还有两个特殊的成员：</p>\n<ul>\n<li><code>__dirname</code> <strong>动态获取</strong> 当前文件模块所属目录的绝对路径</li>\n<li><code>__filename</code> <strong>动态获取</strong> 当前文件的绝对路径</li>\n<li><code>__dirname</code> 和 <code>__filename</code>  不受 node 命令所属路径影响</li>\n</ul>\n<h3 id=\"使用前提\"><a href=\"#使用前提\" class=\"headerlink\" title=\"使用前提\"></a>使用前提</h3><p>在文件操作路径中，相对路径设计的就是相对于执行 node 命令所处的路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'./a.txt'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...</span>)</span>&#123;...&#125;)</span><br><span class=\"line\">-- 相对于执行 node 命令所处的终端路径</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## ├─app.js</span><br><span class=\"line\">## └─foo</span><br><span class=\"line\">##    ├─a.txt</span><br><span class=\"line\">##    └─index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./a.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">--------------------------- index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fooIndex = <span class=\"built_in\">require</span>(<span class=\"string\">'./foo/index'</span>)</span><br><span class=\"line\">--------------------------- app.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在app.js 当前目录执行终端 则加载不到 a.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>在文件操作中，使用相对路径是不可靠的，因为在 Node 中文操作的路径被设计为相对于执行 node 命令所处的路径。（不是 bug ）</p>\n<p>为了解决这个问题：把相对路径变为绝对路径即可</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>可以使用 <code>__dirname</code> 或者 <code>__filename</code> 解决问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(__dirname + <span class=\"string\">'/a.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;   <span class=\"comment\">// node 执行中会把 / 转为 \\</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">--------------------------- index.js</span><br></pre></td></tr></table></figure>\n\n<p>在拼接路径的过程中，为了避免手动拼接带来的低级错误，推荐多使用, <code>path.join()</code>来辅助拼接。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(path.join(__dirname, <span class=\"string\">'./a.txt'</span>), <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">--------------------------- index.js</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 为了尽量避免前面所描述的问题，以后文件操作中使用的相对路径都统一转换为 <strong>动态的绝对路径</strong>。</p>\n<blockquote>\n<p>补充： 模块中的路径标识和文件操作中的相对路径标识，不一样</p>\n<p>​            模块中的路径标识就是相对于当前文件模块就，不受执行 node 命令所处路径影响</p>\n</blockquote>\n<h2 id=\"Node-Express\"><a href=\"#Node-Express\" class=\"headerlink\" title=\"Node_Express\"></a>Node_Express</h2><p><strong>原生的http在某些方面不足以应对我们对开发的需求，需要使用框架加快开发效率，框架的目的就是提高效率，让代码更高度统一。</strong></p>\n<p><strong>在 Node 中有很多web开发框架，Express是其中一种</strong>     <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/</a></p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><h4 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save express</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建app   =&gt;相当于 http.creataServer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'express app is running...'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"基本路由-router\"><a href=\"#基本路由-router\" class=\"headerlink\" title=\"基本路由 router\"></a>基本路由 router</h4><p>路由</p>\n<ul>\n<li>请求方法</li>\n<li>请求路径</li>\n<li>请求处理函数</li>\n</ul>\n<p>get：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当以 get 方法请求 / 的时候，执行对应的处理函数 =&gt; 路由 / 映射关系</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>post:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当以 post 方法请求 / 的时候，执行对应的处理函数 =&gt; 路由 / 映射关系</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Got a POST request'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>重定向：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.redirect(<span class=\"string\">'/'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态服务\"><a href=\"#静态服务\" class=\"headerlink\" title=\"静态服务\"></a>静态服务</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## └─Project Directory</span><br><span class=\"line\">##    └─public</span><br><span class=\"line\">## \t\t\t └─main.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当以 /public/ 开头的时候 ，去 ./public/ 目录中 查找对应的资源</span></span><br><span class=\"line\">app.use('/public/', express.static('./public/'))      ## 推荐</span><br><span class=\"line\">--------</span><br><span class=\"line\">## 访问路径：http://127.0.0.1:5000/public/main.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当省略第一个参数的时候，可以通过省略/public的方式来访问</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'./public/'</span>))</span><br><span class=\"line\">--------</span><br><span class=\"line\">## 访问路径：http://127.0.0.1:5000/main.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /a 相当于 /public的别名</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/static/'</span>, express.static(<span class=\"string\">'./public/'</span>))</span><br><span class=\"line\">--------</span><br><span class=\"line\">## 访问路径：http://127.0.0.1:5000/static/main.js</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在Express中获取表单-GET请求参数\"><a href=\"#在Express中获取表单-GET请求参数\" class=\"headerlink\" title=\"在Express中获取表单 GET请求参数\"></a>在Express中获取表单 GET请求参数</h4><p>Express内置了一个API，可以直接通过 <code>req.query</code> 来获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req.query</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在Express中获取表单-POST-请求体数据\"><a href=\"#在Express中获取表单-POST-请求体数据\" class=\"headerlink\" title=\"在Express中获取表单 POST 请求体数据\"></a>在Express中获取表单 POST 请求体数据</h4><p>在Express中没有内置获取表单 POST 请求体的API，需要主要使用第三方包：<code>body-parser</code> 中间件（插件，专门用来解析表单 post 请求体）</p>\n<p>安装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save body-parser</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置 body-parser</span></span><br><span class=\"line\"><span class=\"comment\">// 加入这个配置后,则在 req 请求对象上会多出来一个属性： body</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 req.body 获取表单 POST 请求体数据</span></span><br><span class=\"line\"><span class=\"comment\">// parse application/x-www-form-urlencoded</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;))</span><br><span class=\"line\"><span class=\"comment\">// parse application/json</span></span><br><span class=\"line\">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)</span><br><span class=\"line\">  res.write(<span class=\"string\">'you posted:\\n'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 可以通过 req.body 来获取表单 POST 请求体数据</span></span><br><span class=\"line\">  res.end(<span class=\"built_in\">JSON</span>.stringify(req.body, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><h5 id=\"Express-中的-json-方法\"><a href=\"#Express-中的-json-方法\" class=\"headerlink\" title=\"Express 中的 json 方法\"></a>Express 中的 json 方法</h5><ul>\n<li>该方法接收一个对象作为参数，自动把对象转为字符串，在发送给浏览器</li>\n</ul>\n<h3 id=\"在Express中配置使用art-template模板引擎\"><a href=\"#在Express中配置使用art-template模板引擎\" class=\"headerlink\" title=\"在Express中配置使用art-template模板引擎\"></a>在Express中配置使用art-template模板引擎</h3><ul>\n<li><p><a href=\"https://github.com/aui/art-template\" target=\"_blank\" rel=\"noopener\">art-template - GitHub 仓库</a></p>\n</li>\n<li><p><a href=\"https://aui.github.io/art-template/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">art-template - 官方文档</a></p>\n</li>\n</ul>\n<h4 id=\"安装：-1\"><a href=\"#安装：-1\" class=\"headerlink\" title=\"安装：\"></a>安装：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save art-template</span><br><span class=\"line\">npm install --save express-art-template</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置：\"><a href=\"#配置：\" class=\"headerlink\" title=\"配置：\"></a>配置：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'html'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'express-art-template'</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// express 默认会去项目中的 views 目录中找 index.html</span></span><br><span class=\"line\">  <span class=\"comment\">// render方法 =&gt; 渲染文件 详解见说明</span></span><br><span class=\"line\">  res.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">     title: <span class=\"string\">'hello world'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果希望修改默认的 <code>views</code> 视图渲染存储目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意第一个参数 views 千万不能错</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, 目录路径)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h4><ul>\n<li><p><strong>配置art-template 模板引擎</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'art'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'express-art-template'</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个参数表示：当渲染以 .art 结尾的文件的时候，使用 art-template 模板引擎<ul>\n<li>个人习惯 <code>app.engine(&#39;html&#39;, require(&#39;express-art-template&#39;))</code></li>\n</ul>\n</li>\n<li>express-art-template 是专门用来在 Express 中 把 art-template 整合到 Express中</li>\n<li>虽然这里不需要加载 art-template 但是也必须安装</li>\n<li>原因是 express-art-template 依赖了 art-template</li>\n</ul>\n</li>\n<li><p><strong>使用art-template 模板引擎</strong></p>\n<ul>\n<li>Express 为 Response 相应对象提供了一个方法：render</li>\n<li>render 方法默认是不可以使用的，但是如果配置了模板引擎就可以使用了</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">'html模板名'</span>, &#123;模板数据&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件</li>\n<li>Express有个约定，开发人员把所有的视图文件都放到 views 目录中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index.html'</span>)<span class=\"comment\">// 若不需要模板引擎渲染，第二个参数不用传，直接渲染文件页面</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>若要访问 views 下目录中的文件，直接跳过 views/ 即可</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## └─ views</span><br><span class=\"line\">##    └─ admin</span><br><span class=\"line\">## \t\t\t └─ index.js</span><br><span class=\"line\">app.get(<span class=\"string\">'/admin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'admin/index.html'</span>, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'index page'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"Express-中配置使用-Express-session\"><a href=\"#Express-中配置使用-Express-session\" class=\"headerlink\" title=\"Express 中配置使用 Express-session\"></a>Express 中配置使用 Express-session</h3><p>express 中默认不支持 session 和 cookie，使用第三方中间件 <code>express-session</code>解决</p>\n<p>安装： </p>\n<p><code>npm install express-session</code></p>\n<p>配置：（必须在 app.use(router)之前）</p>\n<ul>\n<li>该插件会为 req 请求对象添加一个成员：<code>req.session</code>，默认是一个对象。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>)</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置加密字符串，会在原有加密基础之上，和这个字符串拼起来去加密</span></span><br><span class=\"line\">  <span class=\"comment\">// 目的为了增加安全性，防止客户端恶意伪造</span></span><br><span class=\"line\">  secret: <span class=\"string\">'keyboard cat'</span>, </span><br><span class=\"line\">  resave: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  saveUninitialized: <span class=\"literal\">true</span> <span class=\"comment\">// 无论是否使用 session ，默认直接分配一把钥匙（空 session ）</span></span><br><span class=\"line\">  \t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// false：存数据的时候才会分配钥匙</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<ul>\n<li>可以通过 req.session 来发访问和设置 Session 成员<ul>\n<li>添加 session 数据：<ul>\n<li>req.session.foo = ‘bar’</li>\n</ul>\n</li>\n<li>获取 session 数据：<ul>\n<li>req.session.foo</li>\n</ul>\n</li>\n<li>删除 session 数据：<ul>\n<li>req.session.foo = null</li>\n<li>更严谨的做法使用 <code>delete</code> 语法<ul>\n<li>delete req.session.foo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>提示：默认Session 数据是内存存储的，服务器一旦存储就会丢失，真正的生产环境会把 Session 进行持久化存储。</p>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><p> <a href=\"http://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/guide/using-middleware.html</a> </p>\n<p>![1-130I0234953631](media/NodeJS. assets/1-130I0234953631.png)</p>\n<p>中间件的本质就是一个请求处理方法，把用户从请求到响应的整个过程分发到多个中间件中去处理，这样做的目的是提高代码的灵活性，动态可扩展。</p>\n<ul>\n<li>同一个请求所经过的中间件都是同一个请求对象和响应对象。</li>\n</ul>\n<h4 id=\"中间件匹配机制\"><a href=\"#中间件匹配机制\" class=\"headerlink\" title=\"中间件匹配机制\"></a>中间件匹配机制</h4><p>当请求进来，会从第一个中间件开始进行匹配</p>\n<ul>\n<li><p>如果匹配，则进来</p>\n</li>\n<li><p>如果请求进入中间件之后，没有调用 next 则代码会停在当前中间件</p>\n</li>\n<li><p>如果调用了 next 则继续向后找到第一个匹配的中间件</p>\n</li>\n<li><p>如果不匹配，则继续判断匹配下一个中间件</p>\n</li>\n<li><p>如果没有能匹配的中间件，则 Express 会默认输出：Cannot GET 路径</p>\n</li>\n</ul>\n<h4 id=\"中间件类目\"><a href=\"#中间件类目\" class=\"headerlink\" title=\"中间件类目\"></a>中间件类目</h4><h5 id=\"应用程序级别中间件\"><a href=\"#应用程序级别中间件\" class=\"headerlink\" title=\"应用程序级别中间件\"></a>应用程序级别中间件</h5><p>万能匹配（不关心任何请求路径和请求方法）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中间件本身是一个方法，该方法接收三个参数：</span></span><br><span class=\"line\"><span class=\"comment\">//    Request 请求对象</span></span><br><span class=\"line\"><span class=\"comment\">//    Response 响应对象</span></span><br><span class=\"line\"><span class=\"comment\">//    next     下一个中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 当一个请求进入一个中间件之后，如果不调用 next 则会停留在当前中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 所以 next 是一个方法，用来调用下一个中间件的</span></span><br><span class=\"line\"><span class=\"comment\">// 调用 next 方法也是要匹配的（不是调用紧挨着的那个）</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>只要是以 <code>/xxx/</code> 开头的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"路由级别中间件\"><a href=\"#路由级别中间件\" class=\"headerlink\" title=\"路由级别中间件\"></a>路由级别中间件</h5><p>get:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'Hello World!'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>post:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'Got a POST request'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>put:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.put(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'Got a PUT request at /user'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>delete:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.delete(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'Got a DELETE request at /user'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"错误处理中间件\"><a href=\"#错误处理中间件\" class=\"headerlink\" title=\"错误处理中间件\"></a>错误处理中间件</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.error(err.stack)</span><br><span class=\"line\">\tres.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Something broke!'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内置中间件\"><a href=\"#内置中间件\" class=\"headerlink\" title=\"内置中间件\"></a>内置中间件</h5><ul>\n<li><a href=\"http://expressjs.com/en/4x/api.html#express.static\" target=\"_blank\" rel=\"noopener\">express.static</a> serves static assets such as HTML files, images, and so on.</li>\n<li><a href=\"http://expressjs.com/en/4x/api.html#express.json\" target=\"_blank\" rel=\"noopener\">express.json</a> parses incoming requests with JSON payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li>\n<li><a href=\"http://expressjs.com/en/4x/api.html#express.urlencoded\" target=\"_blank\" rel=\"noopener\">express.urlencoded</a> parses incoming requests with URL-encoded payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li>\n</ul>\n<h5 id=\"第三方中间件\"><a href=\"#第三方中间件\" class=\"headerlink\" title=\"第三方中间件\"></a>第三方中间件</h5><p> <a href=\"http://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/guide/using-middleware.html</a> </p>\n<ul>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/body-parser.html\" target=\"_blank\" rel=\"noopener\">body-parser</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/compression.html\" target=\"_blank\" rel=\"noopener\">compression</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/cookie-parser.html\" target=\"_blank\" rel=\"noopener\">cookie-parser</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/morgan.html\" target=\"_blank\" rel=\"noopener\">morgan</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/response-time.html\" target=\"_blank\" rel=\"noopener\">response-time</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/serve-static.html\" target=\"_blank\" rel=\"noopener\">serve-static</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/session.html\" target=\"_blank\" rel=\"noopener\">session</a> </p>\n</li>\n</ul>\n<h4 id=\"中间件应用\"><a href=\"#中间件应用\" class=\"headerlink\" title=\"中间件应用\"></a>中间件应用</h4><h5 id=\"配置处理-404-的中间件\"><a href=\"#配置处理-404-的中间件\" class=\"headerlink\" title=\"配置处理 404 的中间件\"></a>配置处理 404 的中间件</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在项目入口文件的最后（app.listen之前）</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'404.html'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置全局处理中间件\"><a href=\"#配置全局处理中间件\" class=\"headerlink\" title=\"配置全局处理中间件\"></a>配置全局处理中间件</h5><ul>\n<li><p>当调用 next 的时候，如果传递了参数，则直接往后找到带有 四个参数的应用程序级别中间件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在项目入口文件的最后（app.listen之前）</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.status(<span class=\"number\">500</span>).send(err.message)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当发生错误的时候，我们可以调用 next 传递错误对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> next(err) <span class=\"comment\">// 省去大量重复代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就会被全局错误处理中间件匹配到并处理之</p>\n</li>\n</ul>\n<h2 id=\"crud案例\"><a href=\"#crud案例\" class=\"headerlink\" title=\"crud案例\"></a>crud案例</h2><h3 id=\"模块化思想\"><a href=\"#模块化思想\" class=\"headerlink\" title=\"模块化思想\"></a>模块化思想</h3><p>模块符合划分：</p>\n<ul>\n<li>模块职责要单一</li>\n</ul>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p> <a href=\"https://github.com/asnwer-zf/nodeText_express_crud\" target=\"_blank\" rel=\"noopener\">https://github.com/asnwer-zf/nodeText_express_crud</a> </p>\n<h2 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h2><h3 id=\"回调函数：获取异步操作结果\"><a href=\"#回调函数：获取异步操作结果\" class=\"headerlink\" title=\"回调函数：获取异步操作结果\"></a>回调函数：获取异步操作结果</h3><p><del>不成立情况：</del></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 到这里执行结束，不会等到前面的定时器，所以直接返回默认值 undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">10</span>, <span class=\"number\">20</span>)) <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><del>不成立情况：</del></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">10</span>, <span class=\"number\">20</span>)) <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果需要获取一个函数异步操作的结果，必须使用回调函数来获取</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// callback 就是回调函数</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y</span><br><span class=\"line\">       \tcallback(ret)  <span class=\"comment\">// ret -&gt; 实参</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ret</span>) </span>&#123;  <span class=\"comment\">// ret -&gt; 形参</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>基于原生XMLHTTPRequest封装get 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oReq = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">  <span class=\"comment\">// 当请求加载成功之后要调用指定的函数</span></span><br><span class=\"line\">  oReq.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    callback(oReq.responseText)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  oReq.open(<span class=\"string\">\"get\"</span>, url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  oReq.send()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span>('data.json', function (data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>异步API 一般都 伴随着回调函数(上层定义，下层调用)</p>\n<ul>\n<li>setTimeout</li>\n<li>readFile</li>\n<li>writeFile</li>\n<li>readdir</li>\n<li>ajax</li>\n</ul>\n</li>\n<li><p>a 链接默认是同步请求</p>\n</li>\n</ul>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><blockquote>\n<p> 参考文档：<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/promise</a> </p>\n</blockquote>\n<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><p>callbackhell：</p>\n<p>![callbackhell](media/NodeJS. assets/callbackhell.jpg)</p>\n<p>无法保证顺序的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return console.log('读取失败')</span></span><br><span class=\"line\">    <span class=\"comment\">// 抛出异常（做测试的时候经常使用）</span></span><br><span class=\"line\">    <span class=\"comment\">//    1. 阻止程序的执行 （程序奔溃直接退出）</span></span><br><span class=\"line\">    <span class=\"comment\">//    2. 把错误消息打印到控制台</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/b.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/c.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>通过回调嵌套的方式来保证顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'./data/b.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./data/c.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>为了解决以上编码方式带来的问题（回调地狱嵌套），在Ecamscript 6 中新增了一个API：<code>Promise</code></p>\n<h4 id=\"Promise基本语法\"><a href=\"#Promise基本语法\" class=\"headerlink\" title=\"Promise基本语法\"></a>Promise基本语法</h4><ul>\n<li>Promise  -  承诺、保证</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"comment\">// promise是一个构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 不是异步，但里面往往封装一个异步任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 Promise 容器</span></span><br><span class=\"line\"><span class=\"comment\">// Promise 容器一旦创建，就开始执行里面的代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  fs.readFile('./data/a.txt', 'utf8', function(err, data) &#123;  ## 异步任务</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 承诺容器中的任务失败，</span></span><br><span class=\"line\">      <span class=\"comment\">// console.log(err)</span></span><br><span class=\"line\">      <span class=\"comment\">// 把容器中的 Pending 状态变为 rejected</span></span><br><span class=\"line\">      <span class=\"comment\">// 调用 reject 就相当于调用了 then 方法的第二个参数</span></span><br><span class=\"line\">      reject(err)  ## 失败调用</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 承诺容器中的任务成功，</span></span><br><span class=\"line\">      <span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\">      <span class=\"comment\">// 把容器中的 Pending 状态变为 resolved</span></span><br><span class=\"line\">      <span class=\"comment\">// 调用 resolve 就相当于调用了 then 方法的传递的那个function</span></span><br><span class=\"line\">      resolve(data)  ## 成功调用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当 p1 成功了 然后（then） 做指定操作</span></span><br><span class=\"line\"><span class=\"comment\">// then 方法接收的 function 就是容器中的 resolve 函数</span></span><br><span class=\"line\">p1.then(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Promise的封装\"><a href=\"#Promise的封装\" class=\"headerlink\" title=\"Promise的封装\"></a>Promise的封装</h4><p>实例推导（ readFile ）</p>\n<ul>\n<li>异步调用链式编程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'./data/a.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"regexp\">/...</span></span><br><span class=\"line\"><span class=\"regexp\">var p3 = /</span>...</span><br><span class=\"line\">p1.then(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"comment\">// 当 p1 读取成功的时候</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前函数中 return 的结果就可以在后面的 then 中 function 接收到，故：</span></span><br><span class=\"line\">    <span class=\"comment\">// 当 return 123 后面就接收到 123</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有 return 后面就接收的是 undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 同理可以 return 一个 Promise 对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 当 return 一个Promise 对象的时候，后续的then中的 方法的第一个参数会作为p2 的 resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p2</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p3</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>![Snipaste_2019-10-19_15-40-57](media/NodeJS. assets/Snipaste_2019-10-19_15-40-57.jpg)</p>\n<p>=&gt;  封装实例    promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filePath, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pReadFile(<span class=\"string\">'./data/a.txt'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/b.txt'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/c.txt'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a>其他：</h2><h3 id=\"修改完成代码自动重启\"><a href=\"#修改完成代码自动重启\" class=\"headerlink\" title=\"修改完成代码自动重启\"></a>修改完成代码自动重启</h3><p><strong>第三方命令行工具<code>nodemon</code>，可以解决频繁修改代码重启服务器问题</strong></p>\n<p><strong><code>nodemon</code>是基于node.js开发的第三方命令行工具，需要独立安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 所有需要用 --global 来安装的包都可以在任意目录执行</span></span></span><br><span class=\"line\">npm install --global nodemon</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装完毕以后，使用</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app.js</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 执行 nodemon 替换 node</span></span></span><br><span class=\"line\">nodemon app.js</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过 <code>nodemon</code> 启动的服务，会监视文件变化，当文件发生变化，自动重启服务器</strong></p>\n<h3 id=\"文件操作中的-与模块标识中的\"><a href=\"#文件操作中的-与模块标识中的\" class=\"headerlink\" title=\"文件操作中的 / 与模块标识中的 /\"></a>文件操作中的 <code>/</code> 与模块标识中的 <code>/</code></h3><ul>\n<li>*<em>文件标识中的路径可以省略 <code>./</code> *</em></li>\n<li><strong>在模块加载中，相对路径中的 <code>./</code> 不能省略</strong></li>\n</ul>\n<h3 id=\"快捷创建服务\"><a href=\"#快捷创建服务\" class=\"headerlink\" title=\"快捷创建服务\"></a>快捷创建服务</h3><h4 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http-server\"></a>http-server</h4><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g http-server@0.9.0 ## 新版本报错</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs -c-l -o</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"json-server\"><a href=\"#json-server\" class=\"headerlink\" title=\"json-server\"></a>json-server</h4><h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server --watch 文件名</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"https://blog-1257820412.cos.ap-shanghai.myqcloud.com/title/half_year.jpg\" alt=\"pic\"></p>","more":"<h2 id=\"Node-js-概述\"><a href=\"#Node-js-概述\" class=\"headerlink\" title=\"Node.js 概述\"></a>Node.js 概述</h2><ul>\n<li><p>Node.js 是JavaScript运行时环境</p>\n</li>\n<li><p>可以解析执行JavaScript代码</p>\n</li>\n<li><p>没有BOM 、DOM</p>\n</li>\n<li><p>遵循EcmaScript</p>\n</li>\n<li><p>为JavaScript提供了服务器级别的操作API</p>\n</li>\n<li><p>构建与Chrome的V8引擎之上</p>\n<ul>\n<li><p>Google Chrome 中的V8引擎世界上公认的解析执行JavaScript代码最快的</p>\n</li>\n<li><p>Node.js作者把Google Chrome 中的V8引擎移出来，开发了独立的JavaScript运行时环境</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node-js-特性\"><a href=\"#Node-js-特性\" class=\"headerlink\" title=\"Node.js 特性\"></a>Node.js 特性</h2><ul>\n<li><p>event-driven 事件驱动</p>\n</li>\n<li><p>non-blocking I/O model 非阻塞IO模型（异步）</p>\n</li>\n<li><p>lightweight and efficient 轻量和高效</p>\n</li>\n</ul>\n<h2 id=\"Node-js-功能\"><a href=\"#Node-js-功能\" class=\"headerlink\" title=\"Node.js 功能\"></a>Node.js 功能</h2><ul>\n<li><p>WEB服务器后台</p>\n<ul>\n<li><p>B/S编程模型（与语言无关）</p>\n</li>\n<li><p>模块化编程 （类似less  @import(‘文件路径’)  引用加载文件）</p>\n</li>\n<li><p>异步编程</p>\n<ul>\n<li>promise</li>\n<li>async</li>\n<li>generator </li>\n</ul>\n</li>\n<li><p>Express Web开发框架</p>\n</li>\n<li><p>Ecmascript 6</p>\n</li>\n</ul>\n</li>\n<li><p>命令行工具</p>\n<ul>\n<li>git    （ C ）</li>\n<li>npm（ Node ）</li>\n<li>hexo（ Node ）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node-js-基本操作\"><a href=\"#Node-js-基本操作\" class=\"headerlink\" title=\"Node.js 基本操作\"></a>Node.js 基本操作</h2><h3 id=\"执行文件\"><a href=\"#执行文件\" class=\"headerlink\" title=\"执行文件\"></a>执行文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 创建编写js脚本文件</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 打开终端，定位到脚本文件所属目录</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 输入node '文件名' 执行对应的文件  -- 文件名不能以node.js命名否则会打开这个文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">node begin.js</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行文件操作必须引入fs这个核心模块（file-system）</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 require 方法载入fs核心模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'url'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error,data</span>)</span>&#123;   <span class=\"comment\">// URL：要读取的文件路径 （统一资源定位符）</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'读取错误'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.toString())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 读取成功 error 返回 null   ，data 返回 数据\t\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">// 读取失败 error 返回 错误对象，data 返回 undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">## ps: data 返回的数据是将文件存储的二进制数据 转为 十六进制数据，展现</span><br><span class=\"line\">##\t   可以用 toString 方法转为 字符串</span><br><span class=\"line\"></span><br><span class=\"line\">## readFile 的第二个参数是可选的，传入 utf8 就是告诉他把读取到的文件直接按照 utf8 编码转成字符串</span><br><span class=\"line\">## 等价于 data.toString()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取目录\"><a href=\"#读取目录\" class=\"headerlink\" title=\"读取目录\"></a>读取目录</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">fs.readdir(<span class=\"string\">'url'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, files</span>) </span>&#123;  <span class=\"comment\">// files: 返回数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    res.end(err.message) <span class=\"comment\">// err对象 中有一个属性 message </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(files)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">fs.writeFile(<span class=\"string\">'url'</span>,<span class=\"string\">'content'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123; <span class=\"comment\">// content: 写入文件内容   error: 形参</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'写入失败'</span>)</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'写入成功'</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">## 写入成功 error 返回 null</span><br><span class=\"line\">## 写入失败 error 返回 错误对象</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建服务器\"><a href=\"#创建服务器\" class=\"headerlink\" title=\"创建服务器\"></a>创建服务器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Node中有一个核心模块 http ,职责创建编写服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载http核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用http.createServer() 方法创建web服务    ## 返回一个Server实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接受请求</span></span><br><span class=\"line\"><span class=\"comment\">// 处理请求</span></span><br><span class=\"line\"><span class=\"comment\">// 返回响应</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册 request 请求事件</span></span><br><span class=\"line\"><span class=\"comment\">// 当客户端请求时，自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数 </span></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'收到请求,请求路径'</span> + request.url) </span><br><span class=\"line\">    response.write(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">    response.write(<span class=\"string\">' node.js'</span>)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  \t<span class=\"comment\">// 简化</span></span><br><span class=\"line\">  \tresponse.end(<span class=\"string\">'hello node.js'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">## request  请求事件处理函数，需接收两个参数：</span><br><span class=\"line\">## Request  请求对象（获取客户端请求信息：如请求路径）</span><br><span class=\"line\">\t\t\t\t\t\t## req.url 获取端口号以后的路径，所有url都是以 / 开头的 默认为 /</span><br><span class=\"line\">## Response 响应对象（给客户端发送响应信息）有 writer方法 ：给客户端发送响应数据</span><br><span class=\"line\">\t\t\t\t\t\t## writer方法 ：给客户端发送响应数据</span><br><span class=\"line\">            ## write 可以使用多次，但是最后一定要使用end结束响应，否则客户端会一直等待。</span><br><span class=\"line\">            ## 简化操作 直接end的同时发送响应数据 response.end('str')</span><br><span class=\"line\">            ## response.end()支持两种数据类型：二进制 字符串</span><br><span class=\"line\">            </span><br><span class=\"line\">## response.end()\t一次请求对应一次响应，响应结束这次请求也结束  不执行后续代码  类似return</span><br><span class=\"line\">## response.end() 必须存在</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定端口号，启动服务器。</span></span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器启动成功，可以通过 http://127.0.0.1:3000/，进行访问'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时终端被服务占用，关闭终端即关闭服务器（X掉，或者 Ctrl+c 终止），有响应便返回响应</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建服务简写\"><a href=\"#创建服务简写\" class=\"headerlink\" title=\"- 创建服务简写\"></a>- 创建服务简写</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">http</span><br><span class=\"line\">\t\t.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running'</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"获取路径\"><a href=\"#获取路径\" class=\"headerlink\" title=\"获取路径\"></a>获取路径</h3><ul>\n<li>采用URL模块，获取</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj =url.parse(<span class=\"string\">'http://127.0.0.1:3000/post?name=fasdf&amp;mes= asdf'</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// true： 可以让里面的query 将所传入的参数转为对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\">$</span><br><span class=\"line\">  protocol: <span class=\"string\">'http:'</span>,\t<span class=\"comment\">// 协议</span></span><br><span class=\"line\">  slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  auth: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  host: <span class=\"string\">'127.0.0.1:3000'</span>,  </span><br><span class=\"line\">  port: <span class=\"string\">'3000'</span>,\t<span class=\"comment\">// 端口号</span></span><br><span class=\"line\">  hostname: <span class=\"string\">'127.0.0.1'</span>,\t<span class=\"comment\">// 主机名</span></span><br><span class=\"line\">  hash: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  search: <span class=\"string\">'?name=fasdf&amp;mes=%20asdf'</span>,\t<span class=\"comment\">// 查询字符串（ GET参数 ）</span></span><br><span class=\"line\">  query: [<span class=\"built_in\">Object</span>: <span class=\"literal\">null</span> prototype] &#123; <span class=\"attr\">name</span>: <span class=\"string\">'fasdf'</span>, <span class=\"attr\">mes</span>: <span class=\"string\">' asdf'</span> &#125;,</span><br><span class=\"line\">  pathname: <span class=\"string\">'/post'</span>,</span><br><span class=\"line\">  path: <span class=\"string\">'/post?name=fasdf&amp;mes=%20asdf'</span>,</span><br><span class=\"line\">  href: <span class=\"string\">'http://127.0.0.1:3000/post?name=fasdf&amp;mes=%20asdf'</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Node-js-中-的-JavaScript\"><a href=\"#Node-js-中-的-JavaScript\" class=\"headerlink\" title=\"Node.js 中 的 JavaScript\"></a>Node.js 中 的 JavaScript</h2><ul>\n<li>EcmaScript</li>\n<li>核心模块</li>\n<li>第三方模块</li>\n<li>用户自定义模块</li>\n</ul>\n<h3 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h3><p>Node为JavaScript提供了很多服务器级别的API，而且这些API绝大多数都被包装到了一个具名的核心模块中。他们都有自己特殊的名称标识，若要使用这些模块，必须用  <strong><em>require</em></strong>  加载模块。</p>\n<ul>\n<li>文件操作的核心模块：fs</li>\n<li>服务构建的核心模块：http</li>\n<li>路径处理的核心模块：path</li>\n<li>路径操作的核心模块：url</li>\n<li>操作系统信息的核心模块：os</li>\n<li>…</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.extname(<span class=\"string\">'url'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回扩展名 .txt</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"用户定义模块\"><a href=\"#用户定义模块\" class=\"headerlink\" title=\"用户定义模块\"></a>用户定义模块</h3><h4 id=\"require-方法\"><a href=\"#require-方法\" class=\"headerlink\" title=\"require  方法\"></a>require  方法</h4><p>​    <strong>用来加载模块，并执行里面的代码</strong>（ 可加载执行多个JavaScript脚本文件 ）</p>\n<p>​    <strong>拿到被加载文件模块导出的接口对象</strong></p>\n<ul>\n<li><p>node中模块分三种</p>\n<ul>\n<li><p>具名的核心模块 （ fs 、http …）</p>\n</li>\n<li><p>用户编写的文件模块</p>\n<p>​    相对路径必须加 ./ 或 ../    （ ./ 不能省略，否则报错）</p>\n<p>​    可以省略后缀名</p>\n</li>\n<li><p>第三方模块</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js =&gt; stat'</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js =&gt; end'</span>)</span><br></pre></td></tr></table></figure></code></pre><ul>\n<li><p>node中没有全局作用域，只有模块作用域（即文件作用域）</p>\n<ul>\n<li>模块是完全封闭的<ul>\n<li>文件与文件之间可以完全避免变量命名冲突、污染问题</li>\n<li>外部访问不到内部，内部访问不到外部</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"exports-对象\"><a href=\"#exports-对象\" class=\"headerlink\" title=\"exports 对象\"></a>exports 对象</h4><p><strong>每个文件模块都提供了  <em>exports</em>  对象 （ 默认是空对象 ）</strong></p>\n<ul>\n<li><p>由于node只有模块作用域，想要做到模块间通信需要用到  <strong><em>exports</em></strong></p>\n</li>\n<li><p>把需要被外部访问的成员手动挂载到 <strong><em>exports</em></strong> 接口对象中</p>\n</li>\n<li><p>多次在 <strong>exports</strong> 添加成员，实现对外导出多个内部成员</p>\n</li>\n<li><p>哪个文件 <strong><em>require</em></strong> 这个的模块，就可以得到模块内部的   <strong><em>exports</em></strong>  接口对象</p>\n<ul>\n<li>即：<strong><em>require</em></strong>  的返回值</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## └─ducument</span><br><span class=\"line\">##    ├─a.js</span><br><span class=\"line\">##    └─b.js</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  b.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'1231234'</span></span><br><span class=\"line\">exports.foo = foo</span><br><span class=\"line\"></span><br><span class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  a.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bExports = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.foo)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bExports.add(<span class=\"number\">10</span>, <span class=\"number\">210</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一个模块需要直接导出某个成员，而非挂载的方式必须使用</p>\n<p><code>module.exports = add</code></p>\n<ul>\n<li>add 可为 function，string， array。。都可以</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Web-服务端开发\"><a href=\"#Web-服务端开发\" class=\"headerlink\" title=\"Web 服务端开发\"></a>Web 服务端开发</h2><h3 id=\"IP地址-与-端口号\"><a href=\"#IP地址-与-端口号\" class=\"headerlink\" title=\"IP地址  与  端口号\"></a>IP地址  与  端口号</h3><ul>\n<li><p>所有联网的程序都要进行网络通信</p>\n</li>\n<li><p>计算机中只有一个物理网卡，且同一个局域网中的网卡地址必须唯一。</p>\n</li>\n<li><p>网卡是通过唯一的ip地址进行定位</p>\n</li>\n</ul>\n<p><strong>IP 地址用来定位计算机</strong></p>\n<p><strong>端口号用来定位应用程序</strong></p>\n<ul>\n<li>所有需要网络通信的软件都必须有端口号</li>\n<li>端口号使用范围 0 ~ 65536 之间</li>\n<li>计算机中有一些默认端口号 尽量不去使用 ex : 80 ..</li>\n<li>一台计算机，同一个端口号在同一时间，只能被一个 </li>\n<li>Node.js 可以开启多个服务，但是一定确保不同服务占用不同端口号</li>\n</ul>\n<h3 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h3><ul>\n<li><p>服务端发送的数据默认，是utf-8编码的</p>\n</li>\n<li><p>浏览器在不知道服务器响应内容的编码的情况下，会按照当前操作系统默认的编码去解析</p>\n<ul>\n<li>中文操作系统默认编码是 GBK</li>\n<li>在http协议中 Content-Type是用来告知，对方给你发送数据内容的数据类型</li>\n<li>图片不需要指定编码，常说的编码一般指的是：字符编码，一般只为字符数据指定编码</li>\n</ul>\n</li>\n<li><p><strong>通过设置响应头的方式设置Content-Type的方式解决乱码问题</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">'Content-Type'</span>,<span class=\"string\">'text/plain; charset=utf-8'</span>)</span><br><span class=\"line\">    res.end(<span class=\"string\">'hello 世界'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>服务器最好把每次响应的数据是什么内容类型 ，正确的告诉客户端</li>\n<li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></li>\n<li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>除了用 Content-Type 指定编码，也可以在HTML页面，通过meta元数据（用来 描述、特征、信息，存储内容的数据）来声明当前文本的编码格式</li>\n</ul>\n<h3 id=\"请求与响应\"><a href=\"#请求与响应\" class=\"headerlink\" title=\"请求与响应\"></a>请求与响应</h3><ul>\n<li><p>当浏览器收到HTML的响应内容以后，开始从上到下一次解析，</p>\n</li>\n<li><p>在解析过程中若发现</p>\n<ul>\n<li>link</li>\n<li>script</li>\n<li>img</li>\n<li>iframe</li>\n<li>video</li>\n<li>audio</li>\n</ul>\n</li>\n<li><p>等带有src href属性标签的时候，浏览器会自动对这些资源发起新的请求</p>\n</li>\n</ul>\n<h3 id=\"统一资源管理\"><a href=\"#统一资源管理\" class=\"headerlink\" title=\"统一资源管理\"></a>统一资源管理</h3><ul>\n<li>为了方便统一处理静态资源，顾将静态资源存放在同一位置</li>\n<li>通过代码灵活控制那些资源能被访问，那些资源不允许访问</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = req.url</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">      fs.readFile(<span class=\"string\">'./view/index.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          res.end(<span class=\"string\">'404 Not Found'</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.end(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (url.indexOf(<span class=\"string\">'/public/'</span>) === <span class=\"number\">0</span>) &#123;   <span class=\"comment\">// public 开启访问权限</span></span><br><span class=\"line\">      fs.readFile(<span class=\"string\">'.'</span> + url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          res.end(<span class=\"string\">'404 Not Found'</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.end(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is running'</span>)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上个实例，只有public目录可以提供访问，灵活控制访问资源</li>\n</ul>\n<h3 id=\"服务器重定向\"><a href=\"#服务器重定向\" class=\"headerlink\" title=\"服务器重定向\"></a>服务器重定向</h3><ul>\n<li><p>状态码设置 302临时重定向</p>\n<ul>\n<li>301为永久重定向 浏览器会记住</li>\n<li>a  =&gt; b ,下次请求a，不经过a 直接到b</li>\n<li>302为临时重定向 浏览器会记住<ul>\n<li>a  =&gt; b ,下次继续请求a，a  =&gt; b</li>\n</ul>\n</li>\n<li>response.statusCode = 302</li>\n</ul>\n</li>\n<li><p>响应头中通过 Location告诉客户端往哪重定向</p>\n<ul>\n<li>response.setHeader( ‘Location’,  ‘/‘ )</li>\n</ul>\n</li>\n<li><p>客户端发现收到的服务器的响应状态码是302，会自动在响应头中找 Location，然后对改地址发起新的请求。</p>\n</li>\n<li><p>客户端自动跳转</p>\n</li>\n</ul>\n<h2 id=\"Node中的模块系统\"><a href=\"#Node中的模块系统\" class=\"headerlink\" title=\"Node中的模块系统\"></a>Node中的模块系统</h2><h3 id=\"前-提\"><a href=\"#前-提\" class=\"headerlink\" title=\"前 提\"></a>前 提</h3><ul>\n<li>使用Node编写应用程序主要是使用<ul>\n<li>EcamScript 语言</li>\n<li>核心模块</li>\n<li>第三方模块</li>\n<li>用户自定义模块</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h3><ul>\n<li><p>文件作用域</p>\n</li>\n<li><p>通信规则</p>\n<ul>\n<li><p>加载</p>\n</li>\n<li><p>导出</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CommonJS模块规范\"><a href=\"#CommonJS模块规范\" class=\"headerlink\" title=\"CommonJS模块规范\"></a>CommonJS模块规范</h3><p>JavaScript本身并不支持模块化 在Node中不仅支持，还有一个很重要的概念  <strong>模块系统</strong></p>\n<ul>\n<li>模块作用域<ul>\n<li>默认模块中任何内容不能被外部访问</li>\n</ul>\n</li>\n<li>使用require方法加载模块</li>\n<li>使用exports接口对象导出模块中的成员</li>\n</ul>\n<h4 id=\"加载-require\"><a href=\"#加载-require\" class=\"headerlink\" title=\"加载  require\"></a>加载  <code>require</code></h4><h5 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> custom = <span class=\"built_in\">require</span>(<span class=\"string\">'module'</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h5><ol>\n<li>执行被加载模块中代码</li>\n<li>得到被加载模块中的  <code>exports</code>  导出接口对象</li>\n</ol>\n<h5 id=\"加载规则：\"><a href=\"#加载规则：\" class=\"headerlink\" title=\"加载规则：\"></a>加载规则：</h5><p>模块查找机制：优先从缓存加载    =&gt;  核心模块  =&gt;  路径形式文件模块  =&gt;  第三方模块</p>\n<h6 id=\"优先从缓存加载\"><a href=\"#优先从缓存加载\" class=\"headerlink\" title=\"优先从缓存加载\"></a>优先从缓存加载</h6><ul>\n<li><p>优先从缓存加载，不会重复加载，目的是为了避免重复加载，提高模块加载效率</p>\n</li>\n<li><p>可以拿到其中的接口对象，但是不会重复执行里面的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## └─ducument</span><br><span class=\"line\">##    ├─a.js</span><br><span class=\"line\">##    ├─b.js</span><br><span class=\"line\">##    └─main.js</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  main.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn)</span><br><span class=\"line\">----------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  a.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.js 被加载了'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn)</span><br><span class=\"line\">----------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">## ----  b.js content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b.js 被加载了'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello bbb'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">## ----\t main.js输出结果</span><br><span class=\"line\">a.js 被加载了</span><br><span class=\"line\">b.js 被加载了</span><br><span class=\"line\">[<span class=\"built_in\">Function</span>]</span><br><span class=\"line\">[<span class=\"built_in\">Function</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h6 id=\"判断模块模块标识-符\"><a href=\"#判断模块模块标识-符\" class=\"headerlink\" title=\"判断模块模块标识(符)\"></a>判断模块模块标识(符)</h6><p><strong>require(‘模块标识’)</strong></p>\n<ul>\n<li>核心模块<ul>\n<li>本质：文件。</li>\n<li>已被编译到了二进制文件中，只需要按名字加载即可</li>\n<li>模块标识 ：模块名</li>\n</ul>\n</li>\n<li>第三方模块<ul>\n<li>凡是第三方模块必须通过npm下载，通过require(‘包名’)进行加载使用</li>\n<li>不可能有一个第三方包 与 核心模块 重名</li>\n<li>模块标识 ：模块名</li>\n</ul>\n</li>\n<li>用户模块<ul>\n<li>模块标识 ：路径</li>\n</ul>\n</li>\n</ul>\n<p><strong>路径形式的模块</strong>：</p>\n<ul>\n<li>.js     后缀名可以省略</li>\n<li>./      当前目录 （不可省略）</li>\n<li>../     上一级目录 （不可省略）</li>\n<li>/xxx    绝对路径 ( 首位的  / 表示当前文件模块所属磁盘根路径)  ==&gt;  几乎不用</li>\n<li>d:/xxxx  绝对路径   ==&gt;  几乎不用 </li>\n</ul>\n<p><strong>既不是核心模块，也不是路径形式的模块</strong></p>\n<ol>\n<li>模块加载规则<ul>\n<li>先找到当前文件所属目录中的 <code>node_modules</code> 目录    ( 以art-template 为例 )</li>\n<li>== &gt;     node_modules/art-template</li>\n<li>== &gt;     node_modules/art-template/package.json 文件</li>\n<li>== &gt;     node_modules/art-template/package.json 文件中的 main 属性</li>\n<li>main属性记录了art-template的入口模块 </li>\n<li>加载使用art-template</li>\n<li>实际上最终加载的还是文件</li>\n</ul>\n</li>\n<li>特殊情况<ul>\n<li>如果 package.json 文件不存在或者 main指定的入口模块也没有，则 node 会找该目录下的 index.js<ul>\n<li>index.js 会作为默认备选项</li>\n</ul>\n</li>\n<li>若所述所有条件均不成立，则会进人上一级目录中的 node_modules 目录执行查找</li>\n<li>若上一级还没有，则继续往上上一级查找</li>\n<li>。。。</li>\n<li>如果直到当前磁盘根目录还找不到，最后报错  <code>can not find module xxx</code> </li>\n</ul>\n</li>\n</ol>\n<p><strong>在项目中有且只有一个 <code>node_modules</code> ，不会出现多个</strong></p>\n<p><strong>位置：放在项目根目录中，这样项目中所有子目录中的代码都可以加载第三方包</strong></p>\n<h4 id=\"导出-exports\"><a href=\"#导出-exports\" class=\"headerlink\" title=\"导出 exports\"></a>导出 <code>exports</code></h4><ul>\n<li><p>Node中是模块作用域，默认文件中所有成员只在当前文件模块有效</p>\n</li>\n<li><p>想要做到模块间通信需要用到  <code>exports</code> ，把需要被外部访问的成员手动挂载到 <code>exports</code> 接口对象中</p>\n<ul>\n<li><p>导出多个成员（必须在对象中）：</p>\n<ul>\n<li><p>多次在 <code>exports</code> 添加成员，实现对外导出多个内部成员</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.a = <span class=\"number\">123</span></span><br><span class=\"line\">exports.b = <span class=\"string\">'string'</span></span><br><span class=\"line\">exports.c =\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'string'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.d = &#123;</span><br><span class=\"line\">  foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>导出单个成员（拿到的是函数、字符串、数组。。。）：</p>\n<ul>\n<li><p>一个模块需要直接导出单个成员，而非挂载的方式必须使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'string'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若重复使用，则后者覆盖前者</p>\n</li>\n<li><p>也可以用 <code>module.exports =</code> 的操作导出多个成员</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> str: <span class=\"string\">'string'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><ul>\n<li><p>在Node 中，每一个模块内部都有一个自己的 <code>module</code> 对象</p>\n</li>\n<li><p>该 <code>module</code> 对象中，有一个成员叫： <code>exports</code> 也是一个对象（ 默认为空 ）</p>\n</li>\n<li><p>若需要对外导出成员，只需要把导出的成员挂载到 <code>module.exports</code> 中</p>\n</li>\n<li><p>由于每次导出接口成员的时候都通过 <code>module.exports.xxx = xxx</code> 比较麻烦，node为了简化操作专门提供一个变量 <code>exports</code>  等价于  <code>module.exports</code>  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(exports === <span class=\"built_in\">module</span>.exports)\t<span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\">exports.foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.add = <span class=\"string\">'bar'</span></span><br></pre></td></tr></table></figure>\n\n<p>固（混搭）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-------------------</span><br><span class=\"line\"><span class=\"comment\">// require结果</span></span><br><span class=\"line\">&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">add</span>: [<span class=\"built_in\">Function</span>] &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当一个模块需要导出单个成员的时候</p>\n<ul>\n<li><p>不能使用：<code>exports = &#39;string&#39;</code> </p>\n<ul>\n<li><code>exports</code> 仅仅只是 <code>module.exports</code>  的引用,底层最后的代码是：<ul>\n<li><code>var exports = module.exports</code></li>\n<li><code>return module.exports</code></li>\n</ul>\n</li>\n<li>重新赋值不再指向 <code>module.exports</code> , 便丢失了引用关系 </li>\n<li>只是快捷方式，可以忽略</li>\n</ul>\n</li>\n<li><p>只能使用：<code>module.exports = &#39;string&#39;</code></p>\n<ul>\n<li><p>重新赋值以后 <code>exports</code> 便直接失效。</p>\n<ol>\n<li>底层代码：<code>return module.exports</code></li>\n<li>将对象赋值给变量，所存放的是地址</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'string'</span></span><br><span class=\"line\">exports.foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\">-------------</span><br><span class=\"line\"><span class=\"comment\">// require结果</span></span><br><span class=\"line\"><span class=\"string\">'string'</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"底层代码模拟\"><a href=\"#底层代码模拟\" class=\"headerlink\" title=\"底层代码模拟\"></a>底层代码模拟</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</span><br><span class=\"line\">\texports: &#123; </span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 哪个文件 require 这个的模块，就可以得到 module.exports</span></span><br><span class=\"line\"><span class=\"comment\">// 在node最底层</span></span><br><span class=\"line\"><span class=\"comment\">// 还有一句</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> exports = <span class=\"built_in\">module</span>.exports</span><br><span class=\"line\"><span class=\"comment\">// 默认在代码的最后 ：</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h3><p><strong>node package manager</strong></p>\n<h4 id=\"npm-网站\"><a href=\"#npm-网站\" class=\"headerlink\" title=\"npm 网站\"></a>npm 网站</h4><p>npmjs.com</p>\n<h4 id=\"npm-命令行工具\"><a href=\"#npm-命令行工具\" class=\"headerlink\" title=\"npm 命令行工具\"></a>npm 命令行工具</h4><p>只要安装了node ,就安装了npm</p>\n<p>npm也有版本概念</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --version     ## 查看版本</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global npm     ## 升级npm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"npm-常用命令\"><a href=\"#npm-常用命令\" class=\"headerlink\" title=\"npm 常用命令\"></a>npm 常用命令</h4><ul>\n<li>npm init [–yes]<ul>\n<li>npm init -y 跳过向导，快速生成</li>\n</ul>\n</li>\n<li>npm install<ul>\n<li>一次性把 dependencies 选项中的依赖项全部安装</li>\n<li>npm i </li>\n</ul>\n</li>\n<li>npm install 包名<ul>\n<li>只下载</li>\n<li>npm i 包名</li>\n</ul>\n</li>\n<li>npm install 包名 –save<ul>\n<li>下载并保存依赖项（ package.json 文件中的 dependencies 选项）</li>\n<li>npm i -S 包名</li>\n</ul>\n</li>\n<li>npm uninstall 包名<ul>\n<li>只删除，如果有依赖项会依然保存</li>\n<li>npm un 包名</li>\n</ul>\n</li>\n<li>npm uninstall –save 包名<ul>\n<li>删除的同时也会把依赖信息也去除</li>\n<li>npm un -S 包名</li>\n</ul>\n</li>\n<li>npm help <ul>\n<li>查看使用帮助</li>\n</ul>\n</li>\n<li>npm 命令 –help<ul>\n<li>查看指定命令的使用帮助</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"解决npm被墙问题\"><a href=\"#解决npm被墙问题\" class=\"headerlink\" title=\"解决npm被墙问题\"></a>解决npm被墙问题</h4><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢</p>\n<p><a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/</a> 淘宝的开发团队，把npm在国内做了备份</p>\n<p>步骤：</p>\n<ol>\n<li><p>安装淘宝的cnpm：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global cnpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># --global表示安装到全局，而非当前目录</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 这条命令中 --global不能省略</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 所有需要用 --global 来安装的包都可以在任意目录执行</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装时包时将<code>npm</code> 替换成 <code>cnpm</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 这里还是走国外的npm服务器，速度比较慢</span></span><br><span class=\"line\">npm install jquery</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用 cnpm 通过淘宝的服务器下载</span></span><br><span class=\"line\">cnpm install jquery</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果不想安装 cnpm 又想使用淘宝的服务器来下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>每次手动加参数过于繁琐，可以把这个选项加入配置文件中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 查看npm配置信息</span></span></span><br><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只要经过上面命令配置，以后所有的<code>npm install</code> 都会默认通过淘宝服务器来下载</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><ul>\n<li><p>每个项目的根目录下都要有一个 package.json 文件 （包描述文件）</p>\n</li>\n<li><p>执行<code>npm install</code> 包名的时候都加上 –save，用来 保存依赖项信息</p>\n</li>\n<li><p>package.json 可以通过 <code>npm init</code>的方式自动初始化出来</p>\n<ul>\n<li><code>dependencies</code> 选项，保存第三方包的依赖信息</li>\n</ul>\n</li>\n<li><p>若删除了node_modules 文件夹，且package.json 存在</p>\n<ul>\n<li>直接使用 <code>npm install</code> 找回<ul>\n<li><code>npm install</code> 自动把package.json 中的dependencies 中所有的依赖项，都下载回来.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"package-json-和-package-lock-json\"><a href=\"#package-json-和-package-lock-json\" class=\"headerlink\" title=\"package.json 和 package-lock.json\"></a>package.json 和 package-lock.json</h4><p>npm5 以前是不会有 <code>package-lock.json</code> 这个文件的</p>\n<p>npm5以后才加入的</p>\n<p>当你安装包的时候，npm 都会生成或者更新 <code>package-lock.json</code> 这个文件</p>\n<ul>\n<li>npm5以后的版本安装包，不需要加 <code>--save</code> 参数，他会自动保存依赖信息</li>\n<li>当安装包的时候，会自动创建或者是更新 <code>package-lock.json</code> 这个文件</li>\n<li><code>package-lock.json</code> 会保存 <code>node_modules</code> 中所有包的信息（版本、下载地址）<ul>\n<li>这样的话重新 <code>npm install</code> 的时候速度就可以提升</li>\n</ul>\n</li>\n<li>从文件看来，有一个 <code>lock</code> 称之为 锁</li>\n<li>这个<code>lock</code> 是用来锁定版本的</li>\n<li>如果项目依赖1.1.1版本</li>\n<li>你重新install 其实会下载最新版本，而不是1.1.1</li>\n<li>我们的目的希望可以锁住1.1.1这个版本</li>\n<li><code>package-lock.json</code>这个文件的另一个作用就是锁定版本号，防止自动升级到最新版本</li>\n</ul>\n<h2 id=\"path路径操作模块\"><a href=\"#path路径操作模块\" class=\"headerlink\" title=\"path路径操作模块\"></a>path路径操作模块</h2><blockquote>\n<p>参考文档： <a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/path.html\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/latest-v12.x/docs/api/path.html</a> </p>\n</blockquote>\n<h3 id=\"常用API：\"><a href=\"#常用API：\" class=\"headerlink\" title=\"常用API：\"></a>常用API：</h3><ul>\n<li><p>path.basename</p>\n<ul>\n<li>获取一个路径的文件名（默认包含扩展名）</li>\n</ul>\n</li>\n<li><p>path.dirname</p>\n<ul>\n<li>获取一个路径中的目录部分</li>\n</ul>\n</li>\n<li><p>path.extname</p>\n<ul>\n<li>获取一个路径中的扩展名部分</li>\n</ul>\n</li>\n<li><p>path.parse</p>\n<ul>\n<li>把一个路径转为对象<ul>\n<li>root 根路径</li>\n<li>dir 目录</li>\n<li>base 包含后缀名的文件名</li>\n<li>ext 后缀名</li>\n<li>name 不包含后缀名的文件名</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>path.isAbsolute </p>\n<ul>\n<li>判断一个路径是不是绝对路径</li>\n</ul>\n</li>\n<li><p>path.join()</p>\n<ul>\n<li>作用：拼接路径</li>\n<li>参数可以为任意，多写或者少写 <code>/</code> 不影响</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">path.join(<span class=\"string\">'c:/a'</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">-- <span class=\"string\">'c:\\\\a\\\\b'</span></span><br><span class=\"line\"></span><br><span class=\"line\">path.join(<span class=\"string\">'c:/a'</span>, <span class=\"string\">'/b'</span>, <span class=\"string\">'c/'</span>, <span class=\"string\">'./f'</span>)</span><br><span class=\"line\">-- <span class=\"string\">'c:\\\\a\\\\b\\\\c\\\\f'</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Canswer_zf%5CDesktop%5CSnipaste_2019-10-20_15-29-18.png\" alt=\"Snipaste_2019-10-20_15-29-18\"></p>\n<h2 id=\"Node-中的其他成员\"><a href=\"#Node-中的其他成员\" class=\"headerlink\" title=\"Node 中的其他成员\"></a>Node 中的其他成员</h2><p>在每个模块中，出来 <code>require</code> 、<code>exports</code>等模块相关API之外，还有两个特殊的成员：</p>\n<ul>\n<li><code>__dirname</code> <strong>动态获取</strong> 当前文件模块所属目录的绝对路径</li>\n<li><code>__filename</code> <strong>动态获取</strong> 当前文件的绝对路径</li>\n<li><code>__dirname</code> 和 <code>__filename</code>  不受 node 命令所属路径影响</li>\n</ul>\n<h3 id=\"使用前提\"><a href=\"#使用前提\" class=\"headerlink\" title=\"使用前提\"></a>使用前提</h3><p>在文件操作路径中，相对路径设计的就是相对于执行 node 命令所处的路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'./a.txt'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...</span>)</span>&#123;...&#125;)</span><br><span class=\"line\">-- 相对于执行 node 命令所处的终端路径</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## ├─app.js</span><br><span class=\"line\">## └─foo</span><br><span class=\"line\">##    ├─a.txt</span><br><span class=\"line\">##    └─index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./a.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">--------------------------- index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fooIndex = <span class=\"built_in\">require</span>(<span class=\"string\">'./foo/index'</span>)</span><br><span class=\"line\">--------------------------- app.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在app.js 当前目录执行终端 则加载不到 a.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>在文件操作中，使用相对路径是不可靠的，因为在 Node 中文操作的路径被设计为相对于执行 node 命令所处的路径。（不是 bug ）</p>\n<p>为了解决这个问题：把相对路径变为绝对路径即可</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>可以使用 <code>__dirname</code> 或者 <code>__filename</code> 解决问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(__dirname + <span class=\"string\">'/a.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;   <span class=\"comment\">// node 执行中会把 / 转为 \\</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">--------------------------- index.js</span><br></pre></td></tr></table></figure>\n\n<p>在拼接路径的过程中，为了避免手动拼接带来的低级错误，推荐多使用, <code>path.join()</code>来辅助拼接。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(path.join(__dirname, <span class=\"string\">'./a.txt'</span>), <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">--------------------------- index.js</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 为了尽量避免前面所描述的问题，以后文件操作中使用的相对路径都统一转换为 <strong>动态的绝对路径</strong>。</p>\n<blockquote>\n<p>补充： 模块中的路径标识和文件操作中的相对路径标识，不一样</p>\n<p>​            模块中的路径标识就是相对于当前文件模块就，不受执行 node 命令所处路径影响</p>\n</blockquote>\n<h2 id=\"Node-Express\"><a href=\"#Node-Express\" class=\"headerlink\" title=\"Node_Express\"></a>Node_Express</h2><p><strong>原生的http在某些方面不足以应对我们对开发的需求，需要使用框架加快开发效率，框架的目的就是提高效率，让代码更高度统一。</strong></p>\n<p><strong>在 Node 中有很多web开发框架，Express是其中一种</strong>     <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/</a></p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><h4 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save express</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建app   =&gt;相当于 http.creataServer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'express app is running...'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"基本路由-router\"><a href=\"#基本路由-router\" class=\"headerlink\" title=\"基本路由 router\"></a>基本路由 router</h4><p>路由</p>\n<ul>\n<li>请求方法</li>\n<li>请求路径</li>\n<li>请求处理函数</li>\n</ul>\n<p>get：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当以 get 方法请求 / 的时候，执行对应的处理函数 =&gt; 路由 / 映射关系</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>post:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当以 post 方法请求 / 的时候，执行对应的处理函数 =&gt; 路由 / 映射关系</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Got a POST request'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>重定向：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.redirect(<span class=\"string\">'/'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态服务\"><a href=\"#静态服务\" class=\"headerlink\" title=\"静态服务\"></a>静态服务</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## └─Project Directory</span><br><span class=\"line\">##    └─public</span><br><span class=\"line\">## \t\t\t └─main.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当以 /public/ 开头的时候 ，去 ./public/ 目录中 查找对应的资源</span></span><br><span class=\"line\">app.use('/public/', express.static('./public/'))      ## 推荐</span><br><span class=\"line\">--------</span><br><span class=\"line\">## 访问路径：http://127.0.0.1:5000/public/main.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当省略第一个参数的时候，可以通过省略/public的方式来访问</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'./public/'</span>))</span><br><span class=\"line\">--------</span><br><span class=\"line\">## 访问路径：http://127.0.0.1:5000/main.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /a 相当于 /public的别名</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/static/'</span>, express.static(<span class=\"string\">'./public/'</span>))</span><br><span class=\"line\">--------</span><br><span class=\"line\">## 访问路径：http://127.0.0.1:5000/static/main.js</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在Express中获取表单-GET请求参数\"><a href=\"#在Express中获取表单-GET请求参数\" class=\"headerlink\" title=\"在Express中获取表单 GET请求参数\"></a>在Express中获取表单 GET请求参数</h4><p>Express内置了一个API，可以直接通过 <code>req.query</code> 来获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">req.query</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在Express中获取表单-POST-请求体数据\"><a href=\"#在Express中获取表单-POST-请求体数据\" class=\"headerlink\" title=\"在Express中获取表单 POST 请求体数据\"></a>在Express中获取表单 POST 请求体数据</h4><p>在Express中没有内置获取表单 POST 请求体的API，需要主要使用第三方包：<code>body-parser</code> 中间件（插件，专门用来解析表单 post 请求体）</p>\n<p>安装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save body-parser</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置 body-parser</span></span><br><span class=\"line\"><span class=\"comment\">// 加入这个配置后,则在 req 请求对象上会多出来一个属性： body</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 req.body 获取表单 POST 请求体数据</span></span><br><span class=\"line\"><span class=\"comment\">// parse application/x-www-form-urlencoded</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;))</span><br><span class=\"line\"><span class=\"comment\">// parse application/json</span></span><br><span class=\"line\">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)</span><br><span class=\"line\">  res.write(<span class=\"string\">'you posted:\\n'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 可以通过 req.body 来获取表单 POST 请求体数据</span></span><br><span class=\"line\">  res.end(<span class=\"built_in\">JSON</span>.stringify(req.body, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><h5 id=\"Express-中的-json-方法\"><a href=\"#Express-中的-json-方法\" class=\"headerlink\" title=\"Express 中的 json 方法\"></a>Express 中的 json 方法</h5><ul>\n<li>该方法接收一个对象作为参数，自动把对象转为字符串，在发送给浏览器</li>\n</ul>\n<h3 id=\"在Express中配置使用art-template模板引擎\"><a href=\"#在Express中配置使用art-template模板引擎\" class=\"headerlink\" title=\"在Express中配置使用art-template模板引擎\"></a>在Express中配置使用art-template模板引擎</h3><ul>\n<li><p><a href=\"https://github.com/aui/art-template\" target=\"_blank\" rel=\"noopener\">art-template - GitHub 仓库</a></p>\n</li>\n<li><p><a href=\"https://aui.github.io/art-template/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">art-template - 官方文档</a></p>\n</li>\n</ul>\n<h4 id=\"安装：-1\"><a href=\"#安装：-1\" class=\"headerlink\" title=\"安装：\"></a>安装：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save art-template</span><br><span class=\"line\">npm install --save express-art-template</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置：\"><a href=\"#配置：\" class=\"headerlink\" title=\"配置：\"></a>配置：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'html'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'express-art-template'</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// express 默认会去项目中的 views 目录中找 index.html</span></span><br><span class=\"line\">  <span class=\"comment\">// render方法 =&gt; 渲染文件 详解见说明</span></span><br><span class=\"line\">  res.render(<span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">     title: <span class=\"string\">'hello world'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果希望修改默认的 <code>views</code> 视图渲染存储目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意第一个参数 views 千万不能错</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, 目录路径)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h4><ul>\n<li><p><strong>配置art-template 模板引擎</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.engine(<span class=\"string\">'art'</span>, <span class=\"built_in\">require</span>(<span class=\"string\">'express-art-template'</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个参数表示：当渲染以 .art 结尾的文件的时候，使用 art-template 模板引擎<ul>\n<li>个人习惯 <code>app.engine(&#39;html&#39;, require(&#39;express-art-template&#39;))</code></li>\n</ul>\n</li>\n<li>express-art-template 是专门用来在 Express 中 把 art-template 整合到 Express中</li>\n<li>虽然这里不需要加载 art-template 但是也必须安装</li>\n<li>原因是 express-art-template 依赖了 art-template</li>\n</ul>\n</li>\n<li><p><strong>使用art-template 模板引擎</strong></p>\n<ul>\n<li>Express 为 Response 相应对象提供了一个方法：render</li>\n<li>render 方法默认是不可以使用的，但是如果配置了模板引擎就可以使用了</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">'html模板名'</span>, &#123;模板数据&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个参数不能写路径，默认会去项目中的 views 目录查找该模板文件</li>\n<li>Express有个约定，开发人员把所有的视图文件都放到 views 目录中</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index.html'</span>)<span class=\"comment\">// 若不需要模板引擎渲染，第二个参数不用传，直接渲染文件页面</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>若要访问 views 下目录中的文件，直接跳过 views/ 即可</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## └─ views</span><br><span class=\"line\">##    └─ admin</span><br><span class=\"line\">## \t\t\t └─ index.js</span><br><span class=\"line\">app.get(<span class=\"string\">'/admin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'admin/index.html'</span>, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'index page'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"Express-中配置使用-Express-session\"><a href=\"#Express-中配置使用-Express-session\" class=\"headerlink\" title=\"Express 中配置使用 Express-session\"></a>Express 中配置使用 Express-session</h3><p>express 中默认不支持 session 和 cookie，使用第三方中间件 <code>express-session</code>解决</p>\n<p>安装： </p>\n<p><code>npm install express-session</code></p>\n<p>配置：（必须在 app.use(router)之前）</p>\n<ul>\n<li>该插件会为 req 请求对象添加一个成员：<code>req.session</code>，默认是一个对象。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>)</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置加密字符串，会在原有加密基础之上，和这个字符串拼起来去加密</span></span><br><span class=\"line\">  <span class=\"comment\">// 目的为了增加安全性，防止客户端恶意伪造</span></span><br><span class=\"line\">  secret: <span class=\"string\">'keyboard cat'</span>, </span><br><span class=\"line\">  resave: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  saveUninitialized: <span class=\"literal\">true</span> <span class=\"comment\">// 无论是否使用 session ，默认直接分配一把钥匙（空 session ）</span></span><br><span class=\"line\">  \t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// false：存数据的时候才会分配钥匙</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<ul>\n<li>可以通过 req.session 来发访问和设置 Session 成员<ul>\n<li>添加 session 数据：<ul>\n<li>req.session.foo = ‘bar’</li>\n</ul>\n</li>\n<li>获取 session 数据：<ul>\n<li>req.session.foo</li>\n</ul>\n</li>\n<li>删除 session 数据：<ul>\n<li>req.session.foo = null</li>\n<li>更严谨的做法使用 <code>delete</code> 语法<ul>\n<li>delete req.session.foo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>提示：默认Session 数据是内存存储的，服务器一旦存储就会丢失，真正的生产环境会把 Session 进行持久化存储。</p>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><p> <a href=\"http://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/guide/using-middleware.html</a> </p>\n<p>![1-130I0234953631](media/NodeJS. assets/1-130I0234953631.png)</p>\n<p>中间件的本质就是一个请求处理方法，把用户从请求到响应的整个过程分发到多个中间件中去处理，这样做的目的是提高代码的灵活性，动态可扩展。</p>\n<ul>\n<li>同一个请求所经过的中间件都是同一个请求对象和响应对象。</li>\n</ul>\n<h4 id=\"中间件匹配机制\"><a href=\"#中间件匹配机制\" class=\"headerlink\" title=\"中间件匹配机制\"></a>中间件匹配机制</h4><p>当请求进来，会从第一个中间件开始进行匹配</p>\n<ul>\n<li><p>如果匹配，则进来</p>\n</li>\n<li><p>如果请求进入中间件之后，没有调用 next 则代码会停在当前中间件</p>\n</li>\n<li><p>如果调用了 next 则继续向后找到第一个匹配的中间件</p>\n</li>\n<li><p>如果不匹配，则继续判断匹配下一个中间件</p>\n</li>\n<li><p>如果没有能匹配的中间件，则 Express 会默认输出：Cannot GET 路径</p>\n</li>\n</ul>\n<h4 id=\"中间件类目\"><a href=\"#中间件类目\" class=\"headerlink\" title=\"中间件类目\"></a>中间件类目</h4><h5 id=\"应用程序级别中间件\"><a href=\"#应用程序级别中间件\" class=\"headerlink\" title=\"应用程序级别中间件\"></a>应用程序级别中间件</h5><p>万能匹配（不关心任何请求路径和请求方法）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中间件本身是一个方法，该方法接收三个参数：</span></span><br><span class=\"line\"><span class=\"comment\">//    Request 请求对象</span></span><br><span class=\"line\"><span class=\"comment\">//    Response 响应对象</span></span><br><span class=\"line\"><span class=\"comment\">//    next     下一个中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 当一个请求进入一个中间件之后，如果不调用 next 则会停留在当前中间件</span></span><br><span class=\"line\"><span class=\"comment\">// 所以 next 是一个方法，用来调用下一个中间件的</span></span><br><span class=\"line\"><span class=\"comment\">// 调用 next 方法也是要匹配的（不是调用紧挨着的那个）</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>只要是以 <code>/xxx/</code> 开头的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">'/a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now())</span><br><span class=\"line\">  next()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"路由级别中间件\"><a href=\"#路由级别中间件\" class=\"headerlink\" title=\"路由级别中间件\"></a>路由级别中间件</h5><p>get:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'Hello World!'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>post:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'Got a POST request'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>put:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.put(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'Got a PUT request at /user'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>delete:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.delete(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'Got a DELETE request at /user'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"错误处理中间件\"><a href=\"#错误处理中间件\" class=\"headerlink\" title=\"错误处理中间件\"></a>错误处理中间件</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.error(err.stack)</span><br><span class=\"line\">\tres.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Something broke!'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"内置中间件\"><a href=\"#内置中间件\" class=\"headerlink\" title=\"内置中间件\"></a>内置中间件</h5><ul>\n<li><a href=\"http://expressjs.com/en/4x/api.html#express.static\" target=\"_blank\" rel=\"noopener\">express.static</a> serves static assets such as HTML files, images, and so on.</li>\n<li><a href=\"http://expressjs.com/en/4x/api.html#express.json\" target=\"_blank\" rel=\"noopener\">express.json</a> parses incoming requests with JSON payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li>\n<li><a href=\"http://expressjs.com/en/4x/api.html#express.urlencoded\" target=\"_blank\" rel=\"noopener\">express.urlencoded</a> parses incoming requests with URL-encoded payloads. <strong>NOTE: Available with Express 4.16.0+</strong></li>\n</ul>\n<h5 id=\"第三方中间件\"><a href=\"#第三方中间件\" class=\"headerlink\" title=\"第三方中间件\"></a>第三方中间件</h5><p> <a href=\"http://expressjs.com/en/guide/using-middleware.html\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/en/guide/using-middleware.html</a> </p>\n<ul>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/body-parser.html\" target=\"_blank\" rel=\"noopener\">body-parser</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/compression.html\" target=\"_blank\" rel=\"noopener\">compression</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/cookie-parser.html\" target=\"_blank\" rel=\"noopener\">cookie-parser</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/morgan.html\" target=\"_blank\" rel=\"noopener\">morgan</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/response-time.html\" target=\"_blank\" rel=\"noopener\">response-time</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/serve-static.html\" target=\"_blank\" rel=\"noopener\">serve-static</a> </p>\n</li>\n<li><p><a href=\"http://expressjs.com/en/resources/middleware/session.html\" target=\"_blank\" rel=\"noopener\">session</a> </p>\n</li>\n</ul>\n<h4 id=\"中间件应用\"><a href=\"#中间件应用\" class=\"headerlink\" title=\"中间件应用\"></a>中间件应用</h4><h5 id=\"配置处理-404-的中间件\"><a href=\"#配置处理-404-的中间件\" class=\"headerlink\" title=\"配置处理 404 的中间件\"></a>配置处理 404 的中间件</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在项目入口文件的最后（app.listen之前）</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'404.html'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置全局处理中间件\"><a href=\"#配置全局处理中间件\" class=\"headerlink\" title=\"配置全局处理中间件\"></a>配置全局处理中间件</h5><ul>\n<li><p>当调用 next 的时候，如果传递了参数，则直接往后找到带有 四个参数的应用程序级别中间件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在项目入口文件的最后（app.listen之前）</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.status(<span class=\"number\">500</span>).send(err.message)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当发生错误的时候，我们可以调用 next 传递错误对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\"><span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> next(err) <span class=\"comment\">// 省去大量重复代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就会被全局错误处理中间件匹配到并处理之</p>\n</li>\n</ul>\n<h2 id=\"crud案例\"><a href=\"#crud案例\" class=\"headerlink\" title=\"crud案例\"></a>crud案例</h2><h3 id=\"模块化思想\"><a href=\"#模块化思想\" class=\"headerlink\" title=\"模块化思想\"></a>模块化思想</h3><p>模块符合划分：</p>\n<ul>\n<li>模块职责要单一</li>\n</ul>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p> <a href=\"https://github.com/asnwer-zf/nodeText_express_crud\" target=\"_blank\" rel=\"noopener\">https://github.com/asnwer-zf/nodeText_express_crud</a> </p>\n<h2 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h2><h3 id=\"回调函数：获取异步操作结果\"><a href=\"#回调函数：获取异步操作结果\" class=\"headerlink\" title=\"回调函数：获取异步操作结果\"></a>回调函数：获取异步操作结果</h3><p><del>不成立情况：</del></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 到这里执行结束，不会等到前面的定时器，所以直接返回默认值 undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">10</span>, <span class=\"number\">20</span>)) <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><del>不成立情况：</del></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">10</span>, <span class=\"number\">20</span>)) <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果需要获取一个函数异步操作的结果，必须使用回调函数来获取</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// callback 就是回调函数</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = x + y</span><br><span class=\"line\">       \tcallback(ret)  <span class=\"comment\">// ret -&gt; 实参</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ret</span>) </span>&#123;  <span class=\"comment\">// ret -&gt; 形参</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ret)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>基于原生XMLHTTPRequest封装get 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oReq = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">  <span class=\"comment\">// 当请求加载成功之后要调用指定的函数</span></span><br><span class=\"line\">  oReq.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    callback(oReq.responseText)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  oReq.open(<span class=\"string\">\"get\"</span>, url, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  oReq.send()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span>('data.json', function (data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>异步API 一般都 伴随着回调函数(上层定义，下层调用)</p>\n<ul>\n<li>setTimeout</li>\n<li>readFile</li>\n<li>writeFile</li>\n<li>readdir</li>\n<li>ajax</li>\n</ul>\n</li>\n<li><p>a 链接默认是同步请求</p>\n</li>\n</ul>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><blockquote>\n<p> 参考文档：<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/promise</a> </p>\n</blockquote>\n<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><p>callbackhell：</p>\n<p>![callbackhell](media/NodeJS. assets/callbackhell.jpg)</p>\n<p>无法保证顺序的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return console.log('读取失败')</span></span><br><span class=\"line\">    <span class=\"comment\">// 抛出异常（做测试的时候经常使用）</span></span><br><span class=\"line\">    <span class=\"comment\">//    1. 阻止程序的执行 （程序奔溃直接退出）</span></span><br><span class=\"line\">    <span class=\"comment\">//    2. 把错误消息打印到控制台</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/b.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/c.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>通过回调嵌套的方式来保证顺序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./data/a.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'./data/b.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'./data/c.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123; <span class=\"keyword\">throw</span> err &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>为了解决以上编码方式带来的问题（回调地狱嵌套），在Ecamscript 6 中新增了一个API：<code>Promise</code></p>\n<h4 id=\"Promise基本语法\"><a href=\"#Promise基本语法\" class=\"headerlink\" title=\"Promise基本语法\"></a>Promise基本语法</h4><ul>\n<li>Promise  -  承诺、保证</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"comment\">// promise是一个构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 不是异步，但里面往往封装一个异步任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 Promise 容器</span></span><br><span class=\"line\"><span class=\"comment\">// Promise 容器一旦创建，就开始执行里面的代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  fs.readFile('./data/a.txt', 'utf8', function(err, data) &#123;  ## 异步任务</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 承诺容器中的任务失败，</span></span><br><span class=\"line\">      <span class=\"comment\">// console.log(err)</span></span><br><span class=\"line\">      <span class=\"comment\">// 把容器中的 Pending 状态变为 rejected</span></span><br><span class=\"line\">      <span class=\"comment\">// 调用 reject 就相当于调用了 then 方法的第二个参数</span></span><br><span class=\"line\">      reject(err)  ## 失败调用</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 承诺容器中的任务成功，</span></span><br><span class=\"line\">      <span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\">      <span class=\"comment\">// 把容器中的 Pending 状态变为 resolved</span></span><br><span class=\"line\">      <span class=\"comment\">// 调用 resolve 就相当于调用了 then 方法的传递的那个function</span></span><br><span class=\"line\">      resolve(data)  ## 成功调用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当 p1 成功了 然后（then） 做指定操作</span></span><br><span class=\"line\"><span class=\"comment\">// then 方法接收的 function 就是容器中的 resolve 函数</span></span><br><span class=\"line\">p1.then(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Promise的封装\"><a href=\"#Promise的封装\" class=\"headerlink\" title=\"Promise的封装\"></a>Promise的封装</h4><p>实例推导（ readFile ）</p>\n<ul>\n<li>异步调用链式编程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  fs.readFile(<span class=\"string\">'./data/a.txt'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"regexp\">/...</span></span><br><span class=\"line\"><span class=\"regexp\">var p3 = /</span>...</span><br><span class=\"line\">p1.then(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"comment\">// 当 p1 读取成功的时候</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前函数中 return 的结果就可以在后面的 then 中 function 接收到，故：</span></span><br><span class=\"line\">    <span class=\"comment\">// 当 return 123 后面就接收到 123</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有 return 后面就接收的是 undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 同理可以 return 一个 Promise 对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 当 return 一个Promise 对象的时候，后续的then中的 方法的第一个参数会作为p2 的 resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p2</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p3</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>![Snipaste_2019-10-19_15-40-57](media/NodeJS. assets/Snipaste_2019-10-19_15-40-57.jpg)</p>\n<p>=&gt;  封装实例    promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filePath, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pReadFile(<span class=\"string\">'./data/a.txt'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/b.txt'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/c.txt'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a>其他：</h2><h3 id=\"修改完成代码自动重启\"><a href=\"#修改完成代码自动重启\" class=\"headerlink\" title=\"修改完成代码自动重启\"></a>修改完成代码自动重启</h3><p><strong>第三方命令行工具<code>nodemon</code>，可以解决频繁修改代码重启服务器问题</strong></p>\n<p><strong><code>nodemon</code>是基于node.js开发的第三方命令行工具，需要独立安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 所有需要用 --global 来安装的包都可以在任意目录执行</span></span></span><br><span class=\"line\">npm install --global nodemon</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装完毕以后，使用</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app.js</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 执行 nodemon 替换 node</span></span></span><br><span class=\"line\">nodemon app.js</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过 <code>nodemon</code> 启动的服务，会监视文件变化，当文件发生变化，自动重启服务器</strong></p>\n<h3 id=\"文件操作中的-与模块标识中的\"><a href=\"#文件操作中的-与模块标识中的\" class=\"headerlink\" title=\"文件操作中的 / 与模块标识中的 /\"></a>文件操作中的 <code>/</code> 与模块标识中的 <code>/</code></h3><ul>\n<li>*<em>文件标识中的路径可以省略 <code>./</code> *</em></li>\n<li><strong>在模块加载中，相对路径中的 <code>./</code> 不能省略</strong></li>\n</ul>\n<h3 id=\"快捷创建服务\"><a href=\"#快捷创建服务\" class=\"headerlink\" title=\"快捷创建服务\"></a>快捷创建服务</h3><h4 id=\"http-server\"><a href=\"#http-server\" class=\"headerlink\" title=\"http-server\"></a>http-server</h4><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g http-server@0.9.0 ## 新版本报错</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs -c-l -o</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"json-server\"><a href=\"#json-server\" class=\"headerlink\" title=\"json-server\"></a>json-server</h4><h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server --watch 文件名</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2fw5cgd00052cq16fnpdj43","category_id":"ck2fw5cgg00062cq129chau1k","_id":"ck2fw5cgs00092cq15ekrgqzk"},{"post_id":"ck2fw5cpt000a2cq1dmongcs8","category_id":"ck2fw5cgg00062cq129chau1k","_id":"ck2fw5cpy000d2cq1c6anclu9"},{"post_id":"ck2gutpc00000swq15c7i5o64","category_id":"ck2guvu4g0001swq182uz6j1c","_id":"ck2gw9923000aswq1gjnfdraq"}],"PostTag":[{"post_id":"ck2fw5cgd00052cq16fnpdj43","tag_id":"ck2fw5cgk00072cq1hx462evg","_id":"ck2fw5cgs00082cq1ftnufqyc"},{"post_id":"ck2fw5cpt000a2cq1dmongcs8","tag_id":"ck2fw5cpx000c2cq1679rczam","_id":"ck2fw5cpz000e2cq12jv96176"},{"post_id":"ck2gutpc00000swq15c7i5o64","tag_id":"ck2guvu4i0002swq1anbi4t00","_id":"ck2gw99230009swq1cirt85n4"}],"Tag":[{"name":"cmd","_id":"ck2fw5cgk00072cq1hx462evg"},{"name":"git","_id":"ck2fw5cpx000c2cq1679rczam"},{"name":"NodeJS","_id":"ck2guvu4i0002swq1anbi4t00"}]}}